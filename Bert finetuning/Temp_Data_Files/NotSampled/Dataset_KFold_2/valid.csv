label,summmarydescription
0,"Fix PayloadProcessorProvider to no longer use Directory for lookup, instead AtomicReaderThe PayloadProcessorProvider has a broken API, this should be fixed. The current trunk mimics the old behaviour, but not 100%.

The PayloadProcessorProvider API should return a PayloadProcessor based on the AtomicReader instance that gets merged. As AtomicReader do no longer know the directory they are reside (they could be e.g. FilterIndexReaders, MemoryIndexes,...) a selection by Directory is no longer possible.

The current code in Lucene trunk mimics the old behavior by doing an instanceof SegmentReader check and then asking for a DirProvider. If something else is merged in, Payload processing is not supported. This should be changed, the old API could be kept backwards compatible by moving the instanceof check in a ""convenience class"" DirPayloadProcessorProvider, extending PayloadProcessorProvider."
0,Text extraction may congest thread pool in the repositoryText extraction congests the thread pool in the repository when e.g. many PDFs are loaded into the workspace. Tasks submitted by the index merger are delayed because of that and will result in many index segment folders.
0,"Add SimpleText codecInspired by Sahin Buyrukbilen's question here:

  http://www.lucidimagination.com/search/document/b68846e383824653/how_to_export_lucene_index_to_a_simple_text_file#b68846e383824653

I made a simple read/write codec that stores all postings data into a
single text file (_X.pst), looking like this:

{noformat}
field contents
  term file
    doc 0
      pos 5
  term is
    doc 0
      pos 1
  term second
    doc 0
      pos 3
  term test
    doc 0
      pos 4
  term the
    doc 0
      pos 2
  term this
    doc 0
      pos 0
END
{noformat}

The codec is fully funtional -- all Lucene & Solr tests pass with
-Dtests.codec=SimpleText -- but, its performance is obviously poor.

However, it should be useful for debugging, transparency,
understanding just what Lucene stores in its index, etc.  And it's a
quick way to gain some understanding on how a codec works...
"
0,"Separate SegmentReaders (and other atomic readers) from composite IndexReadersWith current trunk, whenever you open an IndexReader on a directory you get back a DirectoryReader which is a composite reader. The interface of IndexReader has now lots of methods that simply throw UOE (in fact more than 50% of all methods that are commonly used ones are unuseable now). This confuses users and makes the API hard to understand.

This issue should split ""atomic readers"" from ""reader collections"" with a separate API. After that, you are no longer able, to get TermsEnum without wrapping from those composite readers. We currently have helper classes for wrapping (SlowMultiReaderWrapper - please rename, the name is really ugly; or Multi*), those should be retrofitted to implement the correct classes (SlowMultiReaderWrapper would be an atomic reader but takes a composite reader as ctor param, maybe it could also simply take a List<AtomicReader>). In my opinion, maybe composite readers could implement some collection APIs and also have the ReaderUtil method directly built in (possibly as a ""view"" in the util.Collection sense). In general composite readers do not really need to look like the previous IndexReaders, they could simply be a ""collection"" of SegmentReaders with some functionality like reopen.

On the other side, atomic readers do not need reopen logic anymore? When a segment changes, you need a new atomic reader? - maybe because of deletions thats not the best idea, but we should investigate. Maybe make the whole reopen logic simplier to use (ast least on the collection reader level).

We should decide about good names, i have no preference at the moment."
0,"Indexing performance tests with realtime branchWe should run indexing performance tests with the DWPT changes and compare to trunk.

We need to test both single-threaded and multi-threaded performance.

NOTE:  flush by RAM isn't implemented just yet, so either we wait with the tests or flush by doc count."
0,"Reduce memory usage of transient nodesWhen adding lots of transient nodes, most of them don't have child nodes because they are leafs. The attached patch initializes NodeState.childNodeEntries with an unmodifiable empty ChildNodeEntries instance and turns it into a modifiable one only when needed.

Running a test with 100k nodes (10 children per node) the memory consumption for child node entries drops from 42MB to 12MB with this patch."
0,"Redesign SPI observationWith the current SPI observation design it may happen that events are lost while the filter for an event listener is changed.

See:
- http://www.nabble.com/SPI-observation%3A-EventFilter-lifecycle-tf4732281.html
- http://people.apache.org/~mreutegg/spi-event/problem.png

My proposal is to introduce a Subscription interface. See attached patch and:
http://people.apache.org/~mreutegg/spi-event/proposal.png"
1,"UserManagement: IndexNodeResolver.findNodes(..... , nonExact) fails to find values containing backslash"
0,"remove IndexSearcher.closeNow that IS is never ""heavy"" (since you have to pass in your own IR), IS.close is truly a no-op... I think we should remove it.

"
0,Query Stats should use the TimeSeries mechanismRefactor the Query Stats to use TimeSeries for the average query duration.
0,Highlighter Documentation updatesVarious places in the Highlighter documentation refer to bytes (i.e. SimpleFragmenter) when it should be chars.  See http://www.gossamer-threads.com/lists/lucene/java-user/56986
1,"DatabaseJournal.checkSchema generates ""Cannot call commit when autocommit=true"" ExceptionWhen I tried to activate clustering with adding the following XML to repository.xml, 

    <Cluster id=""node_1"" syncDelay=""5"">
		<Journal class=""org.apache.jackrabbit.core.journal.DatabaseJournal"">
			<param name=""revision"" value=""${rep.home}/revision""/>
			<param name=""driver"" value=""com.mysql.jdbc.Driver""/>
			<param name=""url"" value=""jdbc:mysql://localhost/jcr""/>
			<param name=""user"" value=""userX""/>
			<param name=""password"" value=""passWordC""/>
			<param name=""schema"" value=""mysql""/>
			<param name=""schemaObjectPrefix"" value=""J_C_""/>
		</Journal>
    </Cluster>

Databse Journal threw the following exception:

....
Caused by: javax.jcr.RepositoryException: Unable to initialize connection.: Unable to initialize connection.
        at org.apache.jackrabbit.core.RepositoryImpl.createClusterNode(RepositoryImpl.java:677)
        at org.apache.jackrabbit.core.RepositoryImpl.<init>(RepositoryImpl.java:276)
        at org.apache.jackrabbit.core.RepositoryImpl.create(RepositoryImpl.java:584)
        at org.apache.jackrabbit.core.TransientRepository$2.getRepository(TransientRepository.java:245)
        at org.apache.jackrabbit.core.TransientRepository.startRepository(TransientRepository.java:265)
        at org.apache.jackrabbit.core.TransientRepository.login(TransientRepository.java:333)
        at com.liferay.portal.jcr.jackrabbit.JCRFactoryImpl.createSession(JCRFactoryImpl.java:71)
        at com.liferay.portal.jcr.JCRFactoryUtil.createSession(JCRFactoryUtil.java:53)
        at com.liferay.portal.jcr.JCRFactoryUtil.createSession(JCRFactoryUtil.java:57)
        at com.liferay.documentlibrary.util.IndexerImpl.reIndex(IndexerImpl.java:258)
        ... 17 more
Caused by: org.apache.jackrabbit.core.cluster.ClusterException: Unable to initialize connection.
        at org.apache.jackrabbit.core.cluster.ClusterNode.init(ClusterNode.java:218)
        at org.apache.jackrabbit.core.cluster.ClusterNode.init(ClusterNode.java:189)
        at org.apache.jackrabbit.core.RepositoryImpl.createClusterNode(RepositoryImpl.java:674)
        ... 26 more
Caused by: java.sql.SQLException: Can't call commit when autocommit=true
        at com.mysql.jdbc.Connection.commit(Connection.java:2161)
        at org.apache.jackrabbit.core.journal.DatabaseJournal.checkSchema(DatabaseJournal.java:437)
        at org.apache.jackrabbit.core.journal.DatabaseJournal.init(DatabaseJournal.java:168)
        at org.apache.jackrabbit.core.cluster.ClusterNode.init(ClusterNode.java:213)
        ... 28 more

When I examined the source code of the release jackrabbit 1.3, I saw that the init() method for DatabaseJournal class is:

			...
			Class.forName(driver);
			con = DriverManager.getConnection(url, user, password);
			con.setAutoCommit(true);

			checkSchema();
			prepareStatements();
			...

and just before checkSchema() method's finally block:

			...
			// commit the changes
			con.commit();
			...

So, it seemed normal to see the mentioned exception. I just commented out the commit expression and continued my development. Am I missing something?"
0,"Confusing Javadoc in Searchable.javaIn Searchable.java, the javadoc for maxdoc() is:

  /** Expert: Returns one greater than the largest possible document number.
   * Called by search code to compute term weights.
   * @see org.apache.lucene.index.IndexReader#maxDoc()

The qualification ""expert"" and the statement ""called by search code to compute term weights"" is a bit confusing, It implies that maxdoc() somehow computes weights, which is obviously not true (what it does is explained in the other sentence). Maybe it is used as one factor of the weight, but do we really need to mention this here? "
1,"'100-continue' response times out unexpectedlyEntity encosing methods time out (3 seconds) rather than getting the
100-continue response. Then, after it has send the body, the 100-continue
response is received and returned.

Adding

  method.setUseExpectHeader(false);

seems to fix it.

Platform 1: Jetty server on Windows XP, Sun JDK 1.4.1_01, 
Platform 2: Tomcat-4.1.18 + Turbine on Windows 2000 Pro, Sun JDK 1.3.1
Platform 3: Tomcat-4.1.18 on Linux if the connection is running over stunnel-4.00

Reported by: 
 Simon Roberts <simon.roberts@fifthweb.net>
 Aurelien Pernoud <apernoud@sopragroup.com>
 Ingo Brunberg <ib@fiz-chemie.de>"
0,Remove deprecated methods in PriorityQueue
0,"[PATCH] Avoid checking for TermBuffer in SegmentTermEnum#scanToIt seems that SegmentTermEnum#scanTo is a critical method which is called very often, especially whenever we iterate over a sequence of terms in an index.

When that method is called, the first thing happens is that it checks whether a temporary TermBuffer ""scratch"" has already been initialized.

In fact, this is not necessary. We can simply declare and initialize the ""scratch""-Buffer at the class-level (right now, the initial value is _null_). Java's lazy-loading capabilities allow this without adding any memory footprint for cases where we do not need that buffer.

The attached patch takes care of this. We now save one comparison per term.
In addition to that, the patch renames ""scratch"" to ""scanBuffer"", which aligns with the naming of the other two buffers that are declared in the class."
0,"ItemImpl#validateTransientItems: Incomplete validation of mandatory child itemItemImpl#validateTransientItems iterates over all mandatory child node/property definitions in order to assert that those items have
been created. However, it only checks if an item with the name defined by the mandatory item definition is present and not if that
existing item really has the mandatory definition.

the example i had:
- mandatory single-value property.
- there is the possibility to add residual props
- added a residual property with the name of the mandatory prop but with multiple values

-> changes are saved without exception.
-> the node doesn't have a property with the mandatory definition.

((without having tried it out, i think the same would be possible with child nodes))

suggested fix:
if there is a child item with the mandatory-item-name -> make sure it's definition is mandatory (or the expected one...)
patch will follow.
"
1,"Node's childNodes out of sync after unsuccessful save()If node.save() failes due to an exception in PersistanceManager.store(ChangeLog) a successive call to node.getNodes() will still contain a reference to the node which failed to be persisted.
This is the case even after a call to refresh(false).
You have to restart Jackrabbit in order to get rid of this reference


UseCase in kind of dummy-code:

node.addNode(""new"", ""nt:unstructured"");
node.save();
=> ItemStateException from persistance

node.refresh(false);

Iterator itr = node.getNodes();
while(itr.hasNext()) {
   child = itr.nextNode();
}
=> Exception: ""Failed to build path to ""new""

"
1,"Jackrabbit fails to shutdown properly when tomcat is shutting downThis is the same issue already discudded in http://issues.apache.org/jira/browse/JCR-57

The problem only occurs when Jackrabbit is deployed in the WEB-INF/lib directory of a web application in Tomcat.
During dispose() jackrabbit tries to instantiate a few objects from classes which were not previously loaded by the webapp classloader, but tomcat doesn't allow to load new classes while shutting down.
This causes the repository not to be closed properly, and an annoying set of stack traces are written to the log.

It seems that there are only two classes which are loaded in this situation: org.apache.jackrabbit.core.observation.EventListenerIteratorImpl and org.apache.jackrabbit.core.fs.FileSystemPathUtil. This is the log from the server standard output:

org.apache.catalina.loader.WebappClassLoader loadClass
INFO: Illegal access: this web application instance has been stopped already.  Could not load org.apache.jackrabbit.core.observation.EventListenerIteratorImpl.  The eventual following stack trace is caused by an error thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access, and has no functional impact.
[repeaded more times at each shutdown]

org.apache.catalina.loader.WebappClassLoader loadClass
INFO: Illegal access: this web application instance has been stopped already.  Could not load org.apache.jackrabbit.core.fs.FileSystemPathUtil.  The eventual following stack trace is caused by an error thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access, and has no functional impact.


A quick fix is to force preloading of classes normally needed only during shutdown, simply adding a static block to caller classes. The following patch makes tomcat happy, causing classes to be loaded by the webapp classloaded when still allowed  (probably not really elegant, but perfectly working...)




Index: org/apache/jackrabbit/core/fs/FileSystemResource.java
===================================================================
--- src\java\org\apache\jackrabbit\core\fs\FileSystemResource.java	(revision 169503)
+++ src\java\org\apache\jackrabbit\core\fs\FileSystemResource.java	(working copy)
@@ -30,6 +30,11 @@
 
     protected final String path;
 
+    static {
+        // preload FileSystemPathUtil to prevent classloader issues during shutdown
+        FileSystemPathUtil.class.hashCode();
+    }
+
     /**
      * Creates a new <code>FileSystemResource</code>
      *
Index: org/apache/jackrabbit/core/observation/ObservationManagerImpl.java
===================================================================
--- src\java\org\apache\jackrabbit\core\observation\ObservationManagerImpl.java	(revision 169503)
+++ src\java\org\apache\jackrabbit\core\observation\ObservationManagerImpl.java	(working copy)
@@ -54,6 +54,11 @@
      */
     private final ObservationManagerFactory obsMgrFactory;
 
+    static {
+        // preload EventListenerIteratorImpl to prevent classloader issues during shutdown
+        EventListenerIteratorImpl.class.hashCode();
+    }
+
     /**
      * Creates an <code>ObservationManager</code> instance.
      *


"
0,Best effort merge if concurrent modifications include changes to mixin typescurrently the NodeStateMerger#merge method immediately aborts if the mixin types of the 2 nodes are not the same.
0,"[PATCH] Make a getter for SortField[] fields in org.apache.lucene.search.SortI'm have my own Collector and I would like to use the Sort object within my
collector, but SortField[] fields; is not accessible outside Lucene's package.
Can you please consider making a public getFields() method in the Sort object so
we can use it in our implementation?"
0,"Disable Usersadd ""disable user"" functionality to prevent an existing user from login into the repository."
1,"JNDI data sources with various PersistenceManager: wrong default valuesWith JCR-1305 Jackrabbit supports creating a connection throug a JNDI Datasource and without configuring user and password. This works for some but not all provided PersistenceManagers. Some of them - like the Oracle-specific BundleDBPersistenceManager - sets default values for user and password if none are provided in the jackrabbit config. This way its impossible to use such PersistenceManagers with the plain JNDI DS.

This concerns the following BundleDbPersistenceManagers: OraclePersistenceManager, DerbyPersistenceManager, H2PersistenceManager.

There also might be other PMs (perhaps some special SimpleDbPersistenceManagers) with similar behaviour."
1,New BufferedIndexOutput optimization fails to update bufferStartNew BufferIndexOutput optimization of writeBytes fails to update bufferStart under some conditions. Test case and fix attached.
1,"search.jsp doesn't handle utf-8 parameters correctly
1.  I  cannot use WebDav client to uploaded a file whose name is in Chinese.  The file name I had is ''郭可为.txt'  and the uploaded command by the WebDav client did something like:

  ========= Outbound Message =========
PUT /op/%ED%EF%3A.txt HTTP/1.1
Host: localhost:8080
-----

 The server didn't decode it correctly -- the result is the file name got screwed and the file content was not uploaded.

2. In the default web.war module,  there is search.jsp for rendering the search page. If I type Chinese text in the search box,  search.jsp does not decode the input parameter from ISO-8859-1 to utf-8 and in turn the search engine searches wrong string.

3. The search engine does do search correctly if I hardcode the query  variable in search.jsp or do decoding the query parameter from ISO-885901 to utf-8.

"
0,"Add support for distributed stats(its a bug in a way, since we broke this, temporarily).

There is no way to do this now (distributed IDF, etc) with the new API.

But we should do it right:
* having the sim ask the searcher for docfreq of a term is wasteful and dangerous, 
  usually we have already seek'd to the term and already collected the 'raw' stuff.
* the situation is more than just docfreq, because you should be able to implement
  distributed scoring for all of the new sim models (or your own), that use any
  of Lucene's stats.
"
1,"SSL verification occurs before setSoTimeout, which can lead to hangspartial thread dump:

       at java.net.SocketInputStream.socketRead0(Native Method)
       at java.net.SocketInputStream.read(SocketInputStream.java:129)
       at com.sun.net.ssl.internal.ssl.InputRecord.readFully(InputRecord.java:293)
       at com.sun.net.ssl.internal.ssl.InputRecord.read(InputRecord.java:331)
       at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:723)
       - locked <0x00002aaab87d9de0> (a java.lang.Object)
       at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1030)
       - locked <0x00002aaab87d9dc0> (a java.lang.Object)
       at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1057)
       at com.sun.net.ssl.internal.ssl.SSLSocketImpl.getSession(SSLSocketImpl.java:1757)
       at org.apache.http.conn.ssl.AbstractVerifier.verify(AbstractVerifier.java:87)
       at org.apache.http.conn.ssl.SSLSocketFactory.connectSocket(SSLSocketFactory.java:295)
       at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:131)
       at org.apache.http.impl.conn.AbstractPoolEntry.open(AbstractPoolEntry.java:143)
       at org.apache.http.impl.conn.AbstractPooledConnAdapter.open(AbstractPooledConnAdapter.java:120)
       at org.apache.http.impl.client.DefaultClientRequestDirector.execute(DefaultClientRequestDirector.java:286)
       at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:452)
       at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:406)
       at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:365)


... this is because in DefaultClientConnectionOperator, prepareSocket (which sets any configured timeouts) isn't called until after SocketFactory.connectSocket. When using SSLSocketFactory, the default behavior is to verify the hostname, which opens a connection, and can block indefinitely.

Simple workaround is to use the AllowAllHostnameVerifier which doesn't do any verification."
0,OCM test are too verboseThe OCM test cases print quite a bit of stuff on standard output which makes the standard build output harder to read. It would be better if the tests either used explicit assertions to verify correct behaviour or at least redirected free-form output to a log file in the target directory.
1,UserManager.getAuthorizable() may fail with InvalidQueryExceptionHappens when the principal name contains an apostrophe.
0,Add basic I/O counters to query handlerThere should be a couple of simple counters that track the number of I/O operations that are performed during a query execution. This will help debug query performance issues.
1,"Read permission on parent node required to access an item's definitionIf a session is granted all permissions on a given item B but lacks permission to read it's parent node A an attempt to
access the definition of B by means of Node.getDefinition or Property.getDefinition will fail with AccessDeniedException.

Similarly, the same session will not be able to modify that item B - e.g. add a child node in case it was a node - since implementation e.g. checks of that
item B isn't protected, which is determined by looking at the definition.

My feeling is, that the item definition should be accessible even if the parent node cannot be read."
1,"Importer drops jcr:xmlcharacters fields after a large jcr:xmlcharacters entryIf you have an XML node as follows:

<a>
[lots and lots of data]
</a>

This should translate into

Node: a
 +- Node: jcr:xmltext
   +- Property: jcr:xmlcharacters = [lots and lots of data]

Instead, the following things happen:
- There is no node jcr:xmltext
- If the node a has child nodes, they also lose the jcr:xmltext node
- Any nodes on the same level after node a also lose the jcr:xmltext node
- Nodes that come after a, but are on a higher level, have correct jcr:xmltext 
nodes

(I've used some 100+k of data, namely a base64 encoded picture)"
1,"UUID compareTo and hashCodeThe current UUID.compareTo implementation is not correct. Usually, 'equals' is used so this is not a big problem, but I need to create an ordered list of UUIDs and for this I need compareTo. The current implementation is based on subtraction, but this doesn't always work. Example:

//long a = 10, b = 20, c = 0;
long a = Long.MAX_VALUE, b = Long.MIN_VALUE, c = 0;
System.out.println((a - b) < 0 ? ""a < b"" : ""a >= b"");
System.out.println((c - a) < 0 ? ""c < a"" : ""c >= a"");
System.out.println((b - c) < 0 ? ""b < c"" : ""b >= c"");

The hashCode implementation is OK, but the multiplication is not required."
0,"Review the use of BaiscHttpParams and HttpProtocolProcessor in HttpClientReview the use of BaiscHttpParams and HttpProtocolProcessor in HttpClient and replace with thread-safe implementations where necessary.

Oleg"
0,"NamespaceRegistryTest.testRegisterNamespace test assumptionsNamespaceRegistryTest.testRegisterNamespace() makes the assumption that it is possible to create arbitrarily nodes inside the root folder.

This is not required to be the case.

Proposal: 

- get the name of the test node from the config, and

- use a property rather than a child node for the test (as far as I can tell, many repositories will not allow node names in namespaces other than the empty one).
"
1,"jcr2spi spi2dav getProperties returns only cached propertiesI'm using JCR through webdav (contrib jcr2spi and spi2dav libraries).
Server is default jcr server (jackrabbit-webapp-1.3.1 on tomcat),
client is 2007/09/28 svn snapshot

I've noticed that Node.getProperty returns only cached properties. 

Sample test case can be found at http://kplab.tuke.sk/svn/kplab/ctm/trunk/test/org/kplab/tsf/CTMTest.java

Note that sometimes properties do get printed, so it may not be so straightforwarding to reproduce this bug.


Simple Example:

// I have nt:file node at kplab/jojo in my repository
...
Session session = repository.login();
Node root  = session.getRootNode();
Node node = root.getNode(""kplab/jojo"");
// node.getProperty(""jcr:content/jcr:data""); // force to load property
from server
dump(node); // simple dump method from (
http://jackrabbit.apache.org/doc/firststeps.html )


dump prints:
/kplab/jojo
/kplab/jojo/jcr:content

But when I uncomment the getProperty line above, it prints:
/kplab/jojo
/kplab/jojo/jcr:content
/kplab/jojo/jcr:content/jcr:lastModified = 2007-09-27T15:52:27.312+02:00
/kplab/jojo/jcr:content/jcr:uuid = 4421ed5a-6200-4918-864e-c58643bc8d4e
/kplab/jojo/jcr:content/jcr:mimeType = text/plain
/kplab/jojo/jcr:content/jcr:data = hura hura
/kplab/jojo/jcr:content/jcr:primaryType = nt:resource

--
Jozef Wagner"
0,"Proxy tunneling/auth with CONNECT for non-HTTP protocolsHttpClient would be even more useful if it supported connections tunneled 
through proxies and proxy authentication for non-HTTP protocols. E.g. Binary 
protocols such as SSH or JXTA-TCP could be tunneled through a web proxy if 
HttpClient provided access to the underlying Socket after the negotiations 
(auth, CONNECT) with the web proxy were complete."
1,"TestIndexWriterExceptions random failure: AIOOBE in ByteBlockPool.allocSliceTestIndexWriterExceptions threw this today, and its reproducable"
0,"Fix CommitIndexTask to also commit IndexReader changesI'm setting up a benchmark for LUCENE-1458, and one limitation I hit is that the CommitIndexTask doesn't commit pending changes in the IndexReader (eg via DeleteByPercent), using a named commit point."
0,"substitute for URLUtils.javaI would like to contribute a substitute for existing URLUtils.java... UrlEncodedUtils.java offer utility methods for dealing with 'urlencoded' data. Main difference with existing class is that parameters are Map <String, List <String>> instead of NameValue pairs and lack of third party dependencies...  It's partially covered with tests which I will further extend to cover all methods of this utility class."
1,"ItemStateMap warnings during node type changesAs reported already in JCR-1105, the ItemStateMap logs warnings when a cached item state is being overwritten. This shouldn't normally happen, but it turns out that virtual item state providers do this when the root of the virtual tree is modified. Probably the most common such situation is when node types are being modified. This case is luckily not troublesome for the virtual tree functionality, but the logged warnings are annoying.

Here's a relevant part of a stack trace where this problem occurs:

        at org.apache.jackrabbit.core.state.ItemStateMap.put(ItemStateMap.java:72)
        at org.apache.jackrabbit.core.virtual.AbstractVISProvider.cache(AbstractVISProvider.java:324)
        at org.apache.jackrabbit.core.virtual.AbstractVISProvider.createNodeState(AbstractVISProvider.java:284)
        at org.apache.jackrabbit.core.nodetype.virtual.VirtualNodeTypeStateProvider.createNodeTypeState(VirtualNodeTypeStateProvider.java:157)
        at org.apache.jackrabbit.core.nodetype.virtual.VirtualNodeTypeStateProvider.createRootNodeState(VirtualNodeTypeStateProvider.java:80)
        at org.apache.jackrabbit.core.virtual.AbstractVISProvider.stateDiscarded(AbstractVISProvider.java:470)
        at org.apache.jackrabbit.core.state.ItemState.notifyStateDiscarded(ItemState.java:226)
        at org.apache.jackrabbit.core.state.ItemState.discard(ItemState.java:370)
        at org.apache.jackrabbit.core.nodetype.virtual.VirtualNodeTypeStateProvider.onNodeTypesRemoved(VirtualNodeTypeStateProvider.java:139)
        at org.apache.jackrabbit.core.nodetype.virtual.VirtualNodeTypeStateManager.nodeTypesUnregistered(VirtualNodeTypeStateManager.java:199)
        at org.apache.jackrabbit.core.nodetype.virtual.VirtualNodeTypeStateManager.nodeTypeReRegistered(VirtualNodeTypeStateManager.java:174)
        at org.apache.jackrabbit.core.nodetype.NodeTypeRegistry.notifyReRegistered(NodeTypeRegistry.java:1821)
        at org.apache.jackrabbit.core.nodetype.NodeTypeRegistry.reregisterNodeType(NodeTypeRegistry.java:433)
        at org.apache.jackrabbit.core.nodetype.NodeTypeRegistry.reregisterNodeType(NodeTypeRegistry.java:364)
        at org.apache.jackrabbit.core.nodetype.NodeTypeManagerImpl.registerNodeTypes(NodeTypeManagerImpl.java:591)
        at org.apache.jackrabbit.commons.cnd.CndImporter.registerNodeTypes(CndImporter.java:118)"
0,BundleDumper to analyze broken bundlesThe BundleReader fails if it can't read a bundle. We should have a tool to analyze broken bundles.
0,"Checks for optional features in test cases are wrongReported by David Sanders:

The TCK for JSR-170 Final Release
(http://jcp.org/aboutJava/communityprocess/final/jsr170/index.html)
checks for level 2 and optional features by comparing
Repository.getDescriptor to null.  According to the
spec and javadoc, getDescriptor must return either
""true"" or ""false"" for the ""capability"" keys.

Example in AbsractJCRest.java:

        // setup custom namespaces
        if
(helper.getRepository().getDescriptor(Repository.LEVEL_2_SUPPORTED)
!= null) {
            NamespaceRegistry nsReg =
superuser.getWorkspace().getNamespaceRegistry();


I think the above if statement should be:
       if
(helper.getRepository().getDescriptor(Repository.LEVEL_2_SUPPORTED)
.equals(""true"")) "
0,"Improve logging of Session.save() to trace back root cause of externally modified nodesCurrently it's very difficult to find the root cause of error like: javax.jcr.InvalidItemStateException: <UUID> has been modified externally.

To better trace back such issues, it would be nice to add DEBUG logging for the Session.save() call."
1,"Exception shouldn't be thrown for unsupported authentication methodCurrently, Authenticator will throw an UnsupportedOperationException for 
unsupported authentication method (like NTLM). This is correct. However,  
HttpMethodBase.execute only catches HttpException, so this 
UnsupportedOperationException is leaked to the user. This is undesirable, 
because user may want a chance to handle such such authentication themself. The 
correct way is to pass the http status code to the user, just like how it 
treats redirect to a different host.

The simple fix is to catch all exceptions in HttpMethodBase.execute when 
calling Authenticator.authenticate."
0,"Move listeners from item state to item state managersClients interested in item state modifications directly subscribe to the item states, which is a very flexible approach. On the other side, it increases the memory consumption of an item state, because every item state holds a collection of its listeners. It further increases complexity, because item state listeners can potentially have a shorter life and might be garbage collected.

Listeners should therefore be moved to their associated item state manager. At the same time, this enables an item state manager to completely remove an item state from its cache and resurrect it at a later time without losing the listeners interested in notifications."
0,Rename IOUtils.close methodsThe closeSafely methods that take a boolean suppressExceptions are dangerous... I've renamed to .close (no suppression) and .closeWhileHandlingException (suppresses all exceptions).
0,"Exception may get lost in WorkspaceManager.OperationVisitorImpl.execute()The method calls Batch.submit() in the finally block. If both the try and finally block throw exceptions, the one from the try block is ignored."
0,"nuke IndexSearcher(directory)IndexSearcher is supposed to be a cheap wrapper around a reader,
but sometimes it is, sometimes it isn't.

I think its confusing tangling of a heavyweight and lightweight
object that it sometimes 'houses' a reader and must close it in that case.
"
1,"ArrayIndexOutOfBoundsException: ConcurrentCacheArrayIndexOutOfBoundsException after several days of uptime.

I'm experiencing some strange ArrayIndexOutOfBoundsExceptions on
 accessing the jackrabbit ConcurrentCache in 2.2.5. in Line 241 during
 shrinkIfNeeded check.

 Caused by: java.lang.ArrayIndexOutOfBoundsException: -14
        at
 org.apache.jackrabbit.core.cache.ConcurrentCache.shrinkIfNeeded(ConcurrentCache.java:241)


I reviewed jackrabbit-code and I'm sure it's caused by that
 AtomicInteger for realizing accessCounter in AbstractCache, which will
 have become negative during increasing over the Integer.MAX_VALUE constant.

         // Semi-random start index to prevent bias against the first
 segments
         int start = (int) getAccessCount() % segments.length;
         for (int i = start; isTooBig(); i = (i + 1) % segments.length) {
             synchronized (segments[i]) {

 ___________________________

 Uncaught Throwable java.lang.ArrayIndexOutOfBoundsException: -7
         at
 org.apache.jackrabbit.core.cache.ConcurrentCache.shrinkIfNeeded(ConcurrentCache.java:241)
         at
 org.apache.jackrabbit.core.cache.ConcurrentCache.put(ConcurrentCache.java:176)
         at
 org.apache.jackrabbit.core.persistence.bundle.AbstractBundlePersistenceManager.getBundle(AbstractBundlePersistenceManager.java:657)
         at
 org.apache.jackrabbit.core.persistence.bundle.AbstractBundlePersistenceManager.load(AbstractBundlePersistenceManager.java:400)
         at
 org.apache.jackrabbit.core.state.SharedItemStateManager.loadItemState(SharedItemStateManager.java:1819)
         at
 org.apache.jackrabbit.core.state.SharedItemStateManager.getNonVirtualItemState(SharedItemStateManager.java:1739)
         at
 org.apache.jackrabbit.core.state.SharedItemStateManager.getItemState(SharedItemStateManager.java:261)
         at
 org.apache.jackrabbit.core.state.LocalItemStateManager.getNodeState(LocalItemStateManager.java:107)
         at
 org.apache.jackrabbit.core.state.LocalItemStateManager.getItemState(LocalItemStateManager.java:172)
         at
 org.apache.jackrabbit.core.state.XAItemStateManager.getItemState(XAItemStateManager.java:260)
         at
 org.apache.jackrabbit.core.state.SessionItemStateManager.getItemState(SessionItemStateManager.java:161)
         at
 org.apache.jackrabbit.core.ItemManager.getItemData(ItemManager.java:370)
         at
 org.apache.jackrabbit.core.ItemManager.getItem(ItemManager.java:316)
         at
 org.apache.jackrabbit.core.ItemManager.getItem(ItemManager.java:610)
         at
 org.apache.jackrabbit.core.SessionImpl.getNodeById(SessionImpl.java:493)
         at
 org.apache.jackrabbit.core.SessionImpl.getNodeByIdentifier(SessionImpl.java:1045)
         at sun.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)
         at
 sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
         at java.lang.reflect.Method.invoke(Method.java:597)
         at
 org.apache.sling.jcr.base.SessionProxyHandler$SessionProxyInvocationHandler.invoke(SessionProxyHandler.java:109)
         at $Proxy2.getNodeByIdentifier(Unknown Source)
         at
 de.dig.cms.frontend.servlet.helper.ResourceUtil.findResourceById(ResourceUtil.java:44)
         at
 de.dig.cms.frontend.servlet.CMSContentEnrichServletFilter.doFilter(CMSContentEnrichServletFilter.java:194)
         at
 org.apache.sling.engine.impl.filter.AbstractSlingFilterChain.doFilter(AbstractSlingFilterChain.java:60)
         at
 de.dig.cms.frontend.servlet.CacheControlFilter.doFilter(CacheControlFilter.java:120)
         at
 org.apache.sling.engine.impl.filter.AbstractSlingFilterChain.doFilter(AbstractSlingFilterChain.java:60)
         at
 de.dig.cms.cache.impl.WallCacheServletFilter.processCacheableRequest(WallCacheServletFilter.java:244)
         at
 de.dig.cms.cache.impl.WallCacheServletFilter.processCacheableRequestWithLatch(WallCacheServletFilter.java:185)
         at
 de.dig.cms.cache.impl.WallCacheServletFilter.doFilter(WallCacheServletFilter.java:154)
         at
 org.apache.sling.engine.impl.filter.AbstractSlingFilterChain.doFilter(AbstractSlingFilterChain.java:60)
         at
 de.dig.cms.frontend.servletapi.CMSSlingHttpServletRequestFilter.doFilter(CMSSlingHttpServletRequestFilter.java:52)
         at
 org.apache.sling.engine.impl.filter.AbstractSlingFilterChain.doFilter(AbstractSlingFilterChain.java:60)
         at
 org.apache.sling.engine.impl.SlingMainServlet.service(SlingMainServlet.java:313)
         at
 org.apache.sling.engine.impl.SlingMainServlet.service(SlingMainServlet.java:207)
         at
 org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502)
         at
 org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:389)
         at
 org.ops4j.pax.web.service.internal.HttpServiceServletHandler.handle(HttpServiceServletHandler.java:64)
         at
 org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
         at
 org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
         at
 org.ops4j.pax.web.service.internal.HttpServiceContext.handle(HttpServiceContext.java:111)
         at
 org.ops4j.pax.web.service.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:64)
         at
 org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
         at org.mortbay.jetty.Server.handle(Server.java:324)
         at
 org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:535)
         at
 org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:865)
         at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:539)
         at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)
         at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
         at
 org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
         at
 org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)"
1,"DBFileSystem MySQL DDL not compatible with pre-5.0 versionsThe packaged ddl for mysql index sizes is too large for 4.x versions of MySQL. As the sum-total of the index sizes may only reach 500.

So, 

create unique index ${schemaObjectPrefix}FSENTRY_IDX on ${schemaObjectPrefix}FSENTRY (FSENTRY_PATH(745), FSENTRY_NAME)

will not work. I would suggest shortening the FSENTRY_PATH index value to 245, as FSENTRY_NAME is already set to 255.

create unique index ${schemaObjectPrefix}FSENTRY_IDX on ${schemaObjectPrefix}FSENTRY (FSENTRY_PATH(245), FSENTRY_NAME)"
1,"adding docs with large (binary) fields of 5mb causes OOM regardless of heap sizeas reported by George Washington in a message to java-user@lucene.apache.org with subect ""Storing large text or binary source documents in the index and memory usage"" arround 2006-01-21 there seems to be a problem with adding docs containing really large fields.

I'll attach a test case in a moment, note that (for me) regardless of how big i make my heap size, and regardless of what value I set  MIN_MB to, once it starts trying to make documents of containing 5mb of data, it can only add 9 before it rolls over and dies.

here's the output from the code as i will attach in a moment...

    [junit] Testsuite: org.apache.lucene.document.TestBigBinary
    [junit] Tests run: 1, Failures: 0, Errors: 1, Time elapsed: 78.656 sec

    [junit] ------------- Standard Output ---------------
    [junit] NOTE: directory will not be cleaned up automatically...
    [junit] Dir: /tmp/org.apache.lucene.document.TestBigBinary.97856146.100iters.4mb
    [junit] iters completed: 100
    [junit] totalBytes Allocated: 419430400
    [junit] NOTE: directory will not be cleaned up automatically...
    [junit] Dir: /tmp/org.apache.lucene.document.TestBigBinary.97856146.100iters.5mb
    [junit] iters completed: 9
    [junit] totalBytes Allocated: 52428800
    [junit] ------------- ---------------- ---------------
    [junit] Testcase: testBigBinaryFields(org.apache.lucene.document.TestBigBinary):    Caused an ERROR
    [junit] Java heap space
    [junit] java.lang.OutOfMemoryError: Java heap space


    [junit] Test org.apache.lucene.document.TestBigBinary FAILED
"
0,"add numDocs() and maxDoc() methods to IndexWriter; deprecate docCount()Spinoff from here:

  http://mail-archives.apache.org/mod_mbox/lucene-java-user/200804.mbox/%3c405706.11550.qm@web65411.mail.ac4.yahoo.com%3e

I think we should add maxDoc() and numDocs() methods to IndexWriter,
and deprecate docCount() in favor of maxDoc().  To do this I think we
should cache the deletion count of each segment in the segments file.

"
1,"ConcurrentModificationException in WebDAV UPDATEAfter fixing JCR-2750, I started seeing the following exception in the jcr2dav integration tests:

java.util.ConcurrentModificationException: null
	at java.util.LinkedHashMap$LinkedHashIterator.nextEntry(LinkedHashMap.java:365) ~[na:1.5.0_22]
	at java.util.LinkedHashMap$ValueIterator.next(LinkedHashMap.java:380) ~[na:1.5.0_22]
	at java.util.AbstractCollection.toArray(AbstractCollection.java:176) ~[na:1.5.0_22]
	at org.apache.jackrabbit.webdav.MultiStatus.getResponses(MultiStatus.java:122) ~[jackrabbit-webdav-2.2-SNAPSHOT.jar:2.2-SNAPSHOT]
	at org.apache.jackrabbit.webdav.MultiStatus.toXml(MultiStatus.java:151) ~[jackrabbit-webdav-2.2-SNAPSHOT.jar:2.2-SNAPSHOT]
	at org.apache.jackrabbit.webdav.WebdavResponseImpl.sendXmlResponse(WebdavResponseImpl.java:145) ~[jackrabbit-webdav-2.2-SNAPSHOT.jar:2.2-SNAPSHOT]
	at org.apache.jackrabbit.webdav.WebdavResponseImpl.sendMultiStatus(WebdavResponseImpl.java:113) ~[jackrabbit-webdav-2.2-SNAPSHOT.jar:2.2-SNAPSHOT]
	at org.apache.jackrabbit.webdav.server.AbstractWebdavServlet.doUpdate(AbstractWebdavServlet.java:1117) ~[jackrabbit-webdav-2.2-SNAPSHOT.jar:2.2-SNAPSHOT]
	at org.apache.jackrabbit.webdav.server.AbstractWebdavServlet.execute(AbstractWebdavServlet.java:327) ~[jackrabbit-webdav-2.2-SNAPSHOT.jar:2.2-SNAPSHOT]
	at org.apache.jackrabbit.webdav.server.AbstractWebdavServlet.service(AbstractWebdavServlet.java:201) ~[jackrabbit-webdav-2.2-SNAPSHOT.jar:2.2-SNAPSHOT]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) ~[servlet-api-2.5-20081211.jar:na]
	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511) ~[jetty-6.1.22.jar:6.1.22]
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:390) ~[jetty-6.1.22.jar:6.1.22]
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765) [jetty-6.1.22.jar:6.1.22]
	at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114) [jetty-6.1.22.jar:6.1.22]
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) [jetty-6.1.22.jar:6.1.22]
	at org.mortbay.jetty.Server.handle(Server.java:326) [jetty-6.1.22.jar:6.1.22]
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542) [jetty-6.1.22.jar:6.1.22]
	at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:938) [jetty-6.1.22.jar:6.1.22]
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:755) [jetty-6.1.22.jar:6.1.22]
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218) [jetty-6.1.22.jar:6.1.22]
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404) [jetty-6.1.22.jar:6.1.22]
	at org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:228) [jetty-6.1.22.jar:6.1.22]
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582) [jetty-util-6.1.22.jar:6.1.22]

Instead of something caused by JCR-2750, it looks like a deeper problem that the JCR_2750 fix just uncovered. As far as I can tell, the ConcurrentModificationException is coming from the AbstractResource.EListener class that may end up concurrently modifying the MultiStatus response while it's being serialized."
0,"Add getVersion method to IndexCommitReturns the equivalent of IndexReader.getVersion for IndexCommit

{code}
public abstract long getVersion();
{code}"
0,"Add deleteAllDocuments() method to IndexWriterIdeally, there would be a deleteAllDocuments() or clear() method on the IndexWriter

This method should have the same performance and characteristics as:
* currentWriter.close()
* currentWriter = new IndexWriter(..., create=true,...)

This would greatly optimize a delete all documents case. Using deleteDocuments(new MatchAllDocsQuery()) could be expensive given a large existing index.

IndexWriter.deleteAllDocuments() should have the same semantics as a commit(), as far as index visibility goes (new IndexReader opening would get the empty index)

I see this was previously asked for in LUCENE-932, however it would be nice to finally see this added such that the IndexWriter would not need to be closed to perform the ""clear"" as this seems to be the general recommendation for working with an IndexWriter now

deleteAllDocuments() method should:
* abort any background merges (they are pointless once a deleteAll has been received)
* write new segments file referencing no segments

This method would remove one of the final reasons i would ever need to close an IndexWriter and reopen a new one 
"
0,Rename package namesRename package names  *graffito* into *jackrabbit*
1,"Jcr-server: Parsing NodeTypeProperty not compliant with definitionCreating a new NodeTypeProperty from an existing DavProperty fails, since assumptions made are not compliant with definition:

a) nodetype name is always enclosed in a 'nodetypename' element
b) nodetype property may be empty, thus contain no 'nodetype' element."
0,"SQL2 joins on empty sets are not efficientIt seems that in the cases where the LEFT side of the join doesn't contain any hits, the QueryEngine in unable to generate an efficient query for the RIGHT side, so it basically select all the possible nodes.
See this discussion as context [0].

Example:
LEFT side has hits, RIGHT side select is fast given some conditions: 
> SQL2 JOIN LEFT SIDE took 18 ms. fetched 145 rows.
> SQL2 JOIN RIGHT SIDE took 67 ms. fetched 0 rows.

LEFT side has no hits, RIGHT select everything
> SQL2 JOIN LEFT SIDE took 8 ms. fetched 0 rows.
> SQL2 JOIN RIGHT SIDE took 845 ms. fetched 13055 rows.
...so it fetches 130k nodes and doesn't keep any of them.


[0] http://jackrabbit.510166.n4.nabble.com/Strange-Search-Performance-problem-with-OR-td4507121.html
"
0,Allow separate control over whether body is stored or analyzedSimple enhancement to DocMaker.
0,[PATCH] add term index interval accessorsIt should be possible for folks to set the index interval used when writing indexes.
0,"If test has methods with @Ignore, we should print out a noticeCurrently these silently pass, but there is usually a reason they are @Ignore 
(sometimes good, sometimes really a TODO we should fix)

In my opinion we should add reasons for all these current @Ignores like Mike did with Test2BTerms.

Example output:
{noformat}
[junit] Testsuite: org.apache.lucene.index.Test2BTerms
[junit] Tests run: 0, Failures: 0, Errors: 0, Time elapsed: 0.184 sec
[junit]
[junit] ------------- Standard Error -----------------
[junit] NOTE: Ignoring test method 'test2BTerms' Takes ~4 hours to run on a fast machine!!  And requires that you don't use PreFlex codec.
[junit] ------------- ---------------- ---------------

...

[junit] Testsuite: org.apache.solr.handler.dataimport.TestMailEntityProcessor
[junit] Tests run: 0, Failures: 0, Errors: 0, Time elapsed: 0.043 sec
[junit]
[junit] ------------- Standard Error -----------------
[junit] NOTE: Ignoring test method 'testConnection'
[junit] NOTE: Ignoring test method 'testRecursion'
[junit] NOTE: Ignoring test method 'testExclude'
[junit] NOTE: Ignoring test method 'testInclude'
[junit] NOTE: Ignoring test method 'testIncludeAndExclude'
[junit] NOTE: Ignoring test method 'testFetchTimeSince'
[junit] ------------- ---------------- ---------------
{noformat}"
0,"Add a LATENT FieldSelectorResultI propose adding LATENT FieldSelectorResult

this would be similar to LAZY_LOAD except that it would NEVER cache the stored value

This will be useful for very large fields that should always go direct to disk (because they will take so much memory)
when caching Documents returned from a Searcher, the large field may be initially requested as LAZY_LOAD, however once someone reads this field, it will then get locked into memory. if this Document (and others like it) are cached, it can start to use a very large amount of memory for these fields

Contract for FieldSelectorResult.LATENT should be that it will always be pulled direct from the IndexInput and never be persisted in memory as part of a Fieldable

I could prepare a patch if desired

"
1,"Exception executing SQL2/JQOM with non-admin sessionConstraints are correctly handled when session does not have access to a node:

Caused by: javax.jcr.ItemNotFoundException: 21232f29-7a57-35a7-8389-4a0e4a801fc3
        at org.apache.jackrabbit.core.SessionImpl.getNodeById(SessionImpl.java:545)
        at org.apache.jackrabbit.core.query.lucene.constraint.NodeLocalNameOperand.getValues(NodeLocalNameOperand.java:44)
        at org.apache.jackrabbit.core.query.lucene.constraint.ComparisonConstraint.evaluate(ComparisonConstraint.java:80)"
1,"after enabling access manager, I can't createNode and setProperty without a node.save in the middleI added my own access manager. after that I can't get the following code working 

Node n = createNewNode(parentNode);
n.setProperty();
parentNode.save();

It seems that setProperty will invoke access control check, but since the new node is not in the repository yet, my access manager implementation won't be able to grant permission. I also tried to use hierachyManager to get the path of the new node, it also returned null. 


"
0,"Make getAttribute(Class attClass) Genericorg.apache.lucene.util.AttributeSource

current:
public Attribute getAttribute(Class attClass) {
    final Attribute att = (Attribute) this.attributes.get(attClass);
    if (att == null) {
      throw new IllegalArgumentException(""This AttributeSource does not have the attribute '"" + attClass.getName() + ""'."");
    }
    return att;
}
sample usage:
TermAttribute termAtt = (TermAttribute)ts.getAttribute(TermAttribute.class)


my improvment:
@SuppressWarnings(""unchecked"")
	public <T> T getAttribute2(Class<? extends Attribute> attClass) {
    final T att = (T) this.attributes.get(attClass);
    if (att == null) {
      throw new IllegalArgumentException(""This AttributeSource does not have the attribute '"" + attClass.getName() + ""'."");
    }
    return att;
 }
sample usage:
TermAttribute termAtt = ts.getAttribute(TermAttribute.class)"
0,"MANIFEST.MF cleanup (main jar and luci customizations)there are several problems with the MANIFEST.MF file used in the core jar, and some inconsistencies in th luci jar:

Lucli's build.xml has an own ""jar"" target and does not use the jar target from common-build.xml. The result
is that the MANIFEST.MF file is not consistent and the META-INF dir does not contain LICENSE.TXT and NOTICE.TXT.

Is there a reason why lucli behaves different in this regard? If not I think we should fix this."
1,"NullPointerException in ClassDescriptorIndex: /Users/cziegeler/Developer/workspaces/default/jackrabbit/contrib/jackrabbit-jcr-mapping/jcr-mapping/src/main/java/org/apache/jackrabbit/ocm/mapper/model/ClassDescriptor.java
===================================================================
--- /Users/cziegeler/Developer/workspaces/default/jackrabbit/contrib/jackrabbit-jcr-mapping/jcr-mapping/src/main/java/org/apache/jackrabbit/ocm/mapper/model/ClassDescriptor.java	(revision 579109)
If a class descriptor (for whatever reason) does not have a jcr type, a npe is thrown in ClassDescriptor.
The following patch solves this issue:

+++ contrib/jackrabbit-jcr-mapping/jcr-mapping/src/main/java/org/apache/jackrabbit/ocm/mapper/model/ClassDescriptor.java	(working copy)
@@ -468,7 +468,7 @@
         while (iterator.hasNext()) {
             ClassDescriptor descendantClassDescriptor = (ClassDescriptor) iterator.next();
   
-            if (descendantClassDescriptor.getJcrType().equals(nodeType)) {
+            if (nodeType.equals(descendantClassDescriptor.getJcrType())) {
                 return descendantClassDescriptor;
             }
   
"
1,"Identifier paths for inexistent items throw exceptionThe following fails with a RepositoryException but it should rather return false:

session.itemExists(""["" + UUID.randomUUID() + ""]"")"
1,"FastVectorHighlighter: small fragCharSize can cause StringIndexOutOfBoundsException If fragCharSize is smaller than Query string, StringIndexOutOfBoundsException is thrown."
1,"InstantiatedTermEnum#skipTo(Term) throws ArrayIndexOutOfBoundsException on empty index{code}
java.lang.ArrayIndexOutOfBoundsException: 0
	at org.apache.lucene.store.instantiated.InstantiatedTermEnum.skipTo(InstantiatedTermEnum.java:105)
	at org.apache.lucene.store.instantiated.TestEmptyIndex.termEnumTest(TestEmptyIndex.java:73)
	at org.apache.lucene.store.instantiated.TestEmptyIndex.testTermEnum(TestEmptyIndex.java:54)
{code}"
0,"request.abort() should interrupt thread waiting for a connectionCalls to HttpRequestBase.abort() will not unblock a thread that is still waiting for a connection and therefore has no ConnectionReleaseTrigger yet.
"
0,Expose namespace registry via workspace instead via session in spi2jcrspi2jcr/SessionInfoImpl.getNamespaceResolver() returns the namespace registry through the current session of the wrapped repository. Since session scoped namespace remapping is not visible to the SPI I think the method should return the namespace registry through the current workspace. 
0,EasySimilarity to interpret document length as float
0,"Java 1.4 compile error in EclipseAs reported by Ate Douma in JCR-804, the revision 520841 introduced code that causes the Eclipse compiler to fail in Java 1.4 compliance mode. However, the same code compiles with the Sun JDK 1.4.

The problem is a enclosing class reference that an anonymous innner class instantiated in the constructor of a named inner class contains. Apparently (and understandably), in Eclipse 1.4 complier the instance references are not yet available when evaluating the super() arguments in the constructor."
1,"SegmentMerger doesn't set payload bit in new optimized codeIn the new optimized code in SegmentMerger the payload bit is not set correctly
in the merged segment. This means that we loose all payloads during a merge!

The Payloads unit test doesn't catch this. Now that we have the new
DocumentsWriter we buffer much more docs by default then before. This means
that the test cases can't assume anymore that the DocsWriter flushes after 10
docs by default. TestPayloads however falsely assumed this, which means that no
merges happen anymore in TestPayloads. We should check whether there are
other testcases that rely on this.

The fixes for TestPayloads and SegmentMerger are very simple, I'll attach a patch
soon."
0,"Handle virtual hosts, relative urls, multi-homingNeed to be able to open a socket to one ipaddress (or hostname) and then include
a virtual hostname in the Host header. Use InetAddress class perhaps."
1,"Cookie.java blowing up on cookies from ""country code"" domainsThe following exception is thrown from Cookie.java when receiving a cookie from
a ""country code"" domain such as amazon.ca.

     [java] INFO: Cookie.parse(): Rejecting set cookie header
""session-id=702-1613649-9326458; path=/; domain=
.amazon.ca; expires=Tuesday, 29-Oct-2002 08:00:00 GMT,
session-id-time=1035878400; path=/; domain=.amazon.ca;
expires=Tuesday, 29-Oct-2002 08:00:00 GMT"" because ""session-id"" has an illegal
domain attribute ("".amazon.ca"")
 for the given domain ""www.amazon.ca"".  It violoates the Netscape cookie
specification for non-special TLDs.
     [java] Oct 22, 2002 9:32:37 AM org.apache.commons.httpclient.HttpMethodBase
processResponseHeaders
     [java] SEVERE: Exception processing response headers
     [java] org.apache.commons.httpclient.HttpException: Bad Set-Cookie header:
session-id=702-1613649-9326458
; path=/; domain=.amazon.ca; expires=Tuesday, 29-Oct-2002 08:00:00 GMT,
session-id-time=1035878400; path=/; do
main=.amazon.ca; expires=Tuesday, 29-Oct-2002 08:00:00 GMT Illegal domain
attribute .amazon.ca
     [java]     at org.apache.commons.httpclient.Cookie.parse(Cookie.java:944)
     [java]     at
org.apache.commons.httpclient.HttpMethodBase.processResponseHeaders(HttpMethodBase.java:141
9)
     [java]     at
org.apache.commons.httpclient.HttpMethodBase.readResponse(HttpMethodBase.java:1504)
     [java]     at
org.apache.commons.httpclient.HttpMethodBase.processRequest(HttpMethodBase.java:2128)
     [java]     at
org.apache.commons.httpclient.HttpMethodBase.execute(HttpMethodBase.java:790)
     [java]     at
org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:442)


The http response that caused this exception is below.

HTTP/1.1 302 Found
Date: Tue, 22 Oct 2002 13:30:11 GMT
Server: Stronghold/2.4.2 Apache/1.3.6 C2NetEU/2412 (Unix)
Set-Cookie: session-id=702-8591055-5561622; path=/; domain=.amazon.ca;
expires=Tuesday, 29-Oct-2002 08:00:00 GMT
Set-Cookie: session-id-time=1035878400; path=/; domain=.amazon.ca;
expires=Tuesday, 29-Oct-2002 08:00:00 GMT
Location: http://www.amazon.ca/exec/obidos/tg/browse/-/915398/702-8591055-5561622
Connection: close
Transfer-Encoding: chunked
Content-Type: text/html

I've seen this problem with other .ca domains so this isn't a problem unique to
amazon.ca.

My guess would be that the problem is on line 929 of Cookie.java:

int domainParts = new StringTokenizer(cookie.getDomain(), ""."").countTokens();

Where domainParts would be 2 for a domain like "".amazon.ca"" instead of the 3
that the code is expecting.  I'm not that familiar with the cookie spec so I
could be completely wrong ;-)

The results above were done with the Oct 20/2002 gump build."
0,"DbClusterTest failure due to network configurationAs reported by Serge, the DbClusterTest case fails when run with certain network configuration.

Thomas already suggested a fix:

### Eclipse Workspace Patch 1.0
#P jackrabbit-core
Index: src/test/java/org/apache/jackrabbit/core/cluster/DbClusterTest.java
===================================================================
--- 
src/test/java/org/apache/jackrabbit/core/cluster/DbClusterTest.java (revisi
on 1067983)
+++ 
src/test/java/org/apache/jackrabbit/core/cluster/DbClusterTest.java (workin
g copy)
@@ -37,9 +37,9 @@
     public void setUp() throws Exception {
         deleteAll();
         server1 = Server.createTcpServer(""-tcpPort"", ""9001"", ""-baseDir"",
-                ""./target/dbClusterTest/db1"").start();
+                ""./target/dbClusterTest/db1"", ""-tcpAllowOthers"").start();
         server2 = Server.createTcpServer(""-tcpPort"", ""9002"", ""-baseDir"",
-                ""./target/dbClusterTest/db2"").start();
+                ""./target/dbClusterTest/db2"", ""-tcpAllowOthers"").start();
         FileUtils.copyFile(
                 new
File(""./src/test/resources/org/apache/jackrabbit/core/cluster/repository-h2
.xml""),
                 new File(""./target/dbClusterTest/node1/repository.xml""));
"
0,"Jcr-Server: missing-auth-mapping init parameter should have option for GuestCredential loginthe missing-auth-mapping parameter of the servlets contained in jcr-server is defined as follows:

             <param-value>anonymous:anonymous</param-value>
             <description>
                 Defines how a missing authorization header should be handled.
                 1) If this init-param is missing, a 401 response is generated.
                    This is suiteable for clients (eg. webdav clients) for which
                    sending a proper authorization header is not possible if the
                    server never sent a 401.
                 2) If this init-param is present with an empty value,
                    null-credentials are returned, thus forcing an null login
                    on the repository.
                 3) If this init-param has a 'user:password' value, the respective
                    simple credentials are generated.
             </description>

JCR 2.0 introduces GuestCredentials used to obtain a ""anonymous"" session.

Therefore we should probably extend/modify the missing-auth-param in a way that
allows to distinguish between

- null-login
- guest login

in case of missing authorization header."
1,"setProperty(""name"", new Value[0], PropertyType.LONG) loses property typeAdding an empty multivalued property with a specific non-STRING type to an unstructured node (i.e. one with an UNDEFINED multivalued property definition) creates an empty multivalued property of type STRING.

In some cases keeping the explicit type information is important, so we should avoid losing it."
0,"Allow benchmark tasks from alternative packagesRelax current limitation of all tasks in same package - that of PerfTask.
Add a property ""alt.tasks.packages"" - its value are comma separated full package names.
If the task class is not found in the default package, an attempt is made to load it from the alternate packages specified in that property."
0,Stack traces from failed tests are messed up on ANT 1.7.x
0,"Remove unnecessary TestAll classes in jcr-commonsThe module jackrabbit-jcr-commons uses the default test configuration, which means the TestAll test suites are not necessary. They actually cause all tests to be executed twice."
0,"FIXME in src/test/org/apache/lucene/IndexTest.javaIndex: src/test/org/apache/lucene/IndexTest.java
===============================================================
====
--- src/test/org/apache/lucene/IndexTest.java   (revision 155945)
+++ src/test/org/apache/lucene/IndexTest.java   (working copy)
@@ -27,8 +27,7 @@   
public static void main(String[] args) {
     try {
       Date start = new Date();
-      // FIXME: OG: what's with this hard-coded dirs??
-      IndexWriter writer = new IndexWriter(""F:\\test"", new SimpleAnalyzer(),
+      IndexWriter writer = new IndexWriter(File.createTempFile(""luceneTest"",""idx""), new 
SimpleAnalyzer(),
                                           true);
        writer.setMergeFactor(20);"
0,"Allow setting arbitrary objects on PerfRunDataPerfRunData is used as the intermediary objects between PerfRunTasks. Just like we can set IndexReader/Writer on it, it will be good if it allows setting other arbitrary objects that are e.g. created by one task and used by another.

A recent example is the enhancement to the benchmark package following the addition of the facet module. We had to add TaxoReader/Writer.

The proposal is to add a HashMap<String, Object> that custom PerfTasks can set()/get(). I do not propose to move IR/IW/TR/TW etc. into that map. If however people think that we should, I can do that as well."
0,"Some small javadocs/extra import fixesTwo things that Uwe Schindler caught, plus fixes for javadoc warnings in core.  I plan to commit to trunk & 2.4."
0,Jcr2spiRepositoryFactory: make class loading more robustCurrently Jcr2spiRepositoryFactory loads a RepositoryServiceFactory from the context class loader. In an OSGi environment this fails with a ClassNotFoundException. I suggest to fall back to the class loader of a the class (Jcr2spiRepositoryFactory) in this case. 
0,"Workspace{Copy|Move}VersionableTest assumptions on versioningThese test cases assume that an ancestor of a versioned node can be made versioned. This may not be true for all JCR compliant stores.

There should be a way to skip the test when it can not be executed.

One obvious approach would be to throw a NotExecutableException when the attempt to enable versioning on the parent fails. However this has the drawback that it can mask configuration errors.

Thoughts?
"
0,"ShingleFilter: don't output all-filler shingles/unigrams; also, convert from TermAttribute to CharTermAttributeWhen the input token stream to ShingleFilter has position increments greater than one, filler tokens are inserted for each position for which there is no token in the input token stream.  As a result, unigrams (if configured) and shingles can be filler-only.  Filler-only output tokens make no sense - these should be removed.

Also, because TermAttribute has been deprecated in favor of CharTermAttribute, the patch will also convert TermAttribute usages to CharTermAttribute in ShingleFilter."
0,"GetMethod.getResponseBodyAsStream() .available() could return content-lengthIt would be nice if the InputStream returned from
GetMethod.getResponseBodyAsStream() could override the available()
method to return the content-length of the requested URL.  This would
make things like ProgressMonitorInputStream useful for monitoring the
progress of a download.  Here is a code snippet:


/**
 * supply a hard-coded value for available() method.
 */
class FixedInputStream extends FilterInputStream {
  private int contentLength;

  public FixedInputStream(InputStream is,
              int contentLength) {
    super(is);
    this.contentLength = contentLength;
  }

  public int available() throws IOException {
    return contentLength;
  }
} 



Also, somewhat related to this request, could
GetMethod.getResponseContentLength() must be made public?  Is there a
good reason for it to be protected?  I had to extend GetMethod and
implement a public getResponseContentLength() in order to feed that
value to my FixedInputStream.

Thanks for your time."
0,"Credentials ignored if realm specified in preemptive authenticationWhen you specifiy credentials for a specific realm using preemptive 
authentication, the credentials are ignored during the first try (error 401 
back).

...
HttpClient client = new HttpClient(manager);
client.getState().setCredentials(""myRealm"",""myHost"",
			new UsernamePasswordCredentials(
				""user"",""password""));
client.getState().setAuthenticationPreemptive(true); 
...

""myRealm"" will be ignored in HttpState's matchCredentials() private method 
because during preemptive authentication, it is called with a null realm:

 private static Credentials matchCredentials(HashMap map, String realm, String 
host) {
        HttpAuthRealm entry = new HttpAuthRealm(host, realm);
	// no possible match here, map only contains the version with the realm
        Credentials creds = (Credentials) map.get(entry);
        if (creds == null && host != null && realm != null) {
            entry = new HttpAuthRealm(host, null);
            creds = (Credentials) map.get(entry);
            if (creds == null) {
                entry = new HttpAuthRealm(null, realm);
                creds = (Credentials) map.get(entry);
            }
        }
        if (creds == null) {
            creds = (Credentials) map.get(DEFAULT_AUTH_REALM);
        }
        return creds;
    } 

This is quite logical since the realm comes from the server and you don't 
contact the server first during preemptive authentication.

But, it should not be possible to set a realm when using preemptive mode, or at 
least it should not be silently ignored.

The current workaround is to set the realm to null in setCredential(), no 
elegant but works.

Regards,

Philippe"
0,"Move Kuromoji to analysis.ja and introduce Japanese* namingLucene/Solr 3.6 and 4.0 will get out-of-the-box Japanese language support through {{KuromojiAnalyzer}}, {{KuromojiTokenizer}} and various other filters.  These filters currently live in {{org.apache.lucene.analysis.kuromoji}}.

I'm proposing that we move Kuromoji to a new Japanese package {{org.apache.lucene.analysis.ja}} in line with how other languages are organized.  As part of this, I also think we should rename {{KuromojiAnalyzer}} to {{JapaneseAnalyzer}}, etc. to further align naming to our conventions by making it very clear that these analyzers are for Japanese.  (As much as I like the name ""Kuromoji"", I think ""Japanese"" is more fitting.)

A potential issue I see with this that I'd like to raise and get feedback on, is that end-users in Japan and elsewhere who use lucene-gosen could have issues after an upgrade since lucene-gosen is in fact releasing its analyzers under the {{org.apache.lucene.analysis.ja}} namespace (and we'd have a name clash).

I believe users should have the freedom to choose whichever Japanese analyzer, filter, etc. they'd like to use, and I don't want to propose a name change that just creates unnecessary problems for users, but I think the naming proposed above is most fitting for a Lucene/Solr release.
"
0,"full text search tests use incorrect character for escaping phrasesThe query test cases use single quotes to escape phrases. The grammar in 6.6.5.2 however requires double quotes.
"
1,"Change value of 'Expect' header in org.apache.http.client.methods.HttpPostsee original report at http://code.google.com/p/android/issues/detail?id=7208.

i'm going to apply the obvious patch to Android:

diff --git a/src/org/apache/http/params/CoreProtocolPNames.java b/src/org/apache/http/params/CoreProtocolPNames.java
index a42c5de..a0a726d 100644
--- a/src/org/apache/http/params/CoreProtocolPNames.java
+++ b/src/org/apache/http/params/CoreProtocolPNames.java
@@ -94,8 +94,8 @@ public interface CoreProtocolPNames {
 
     /**
      * <p>
-     * Activates 'Expect: 100-Continue' handshake for the 
-     * entity enclosing methods. The purpose of the 'Expect: 100-Continue'
+     * Activates 'Expect: 100-continue' handshake for the
+     * entity enclosing methods. The purpose of the 'Expect: 100-continue'
      * handshake to allow a client that is sending a request message with 
      * a request body to determine if the origin server is willing to 
      * accept the request (based on the request headers) before the client
diff --git a/src/org/apache/http/protocol/HTTP.java b/src/org/apache/http/protocol/HTTP.java
index de76ca6..9223955 100644
--- a/src/org/apache/http/protocol/HTTP.java
+++ b/src/org/apache/http/protocol/HTTP.java
@@ -60,7 +60,7 @@ public final class HTTP {
     public static final String SERVER_HEADER = ""Server"";
     
     /** HTTP expectations */
-    public static final String EXPECT_CONTINUE = ""100-Continue"";
+    public static final String EXPECT_CONTINUE = ""100-continue"";
 
     /** HTTP connection control */
     public static final String CONN_CLOSE = ""Close"";
"
0,"Improper EOL for text files on Windowsversion 2.0-rc3. Improper EOL for text files on Windows for README.txt and
LICENSE.txt, docs/*.txt. The files display as one loooong line in Notepad."
0,"JCR2SPI: several performance improvements pointed out by FindbugsFindBug report:

M P Bx: Method org.apache.jackrabbit.jcr2spi.nodetype.BitsetENTCacheImpl.getBitNumber(QName) invokes inefficient Integer(int) constructor; use Integer.valueOf(int) instead	src/main/java/org/apache/jackrabbit/jcr2spi/nodetype	BitsetENTCacheImpl.java	line 177	1190981544656	1666284
M P Bx: Method org.apache.jackrabbit.jcr2spi.query.RowIteratorImpl$RowImpl.getValue(String) invokes inefficient Integer(int) constructor; use Integer.valueOf(int) instead	src/main/java/org/apache/jackrabbit/jcr2spi/query	RowIteratorImpl.java	line 247	1190981544671	1666292
M P Bx: Method org.apache.jackrabbit.jcr2spi.WorkspaceManager.onEventReceived(EventBundle[], InternalEventListener[]) invokes inefficient Integer(int) constructor; use Integer.valueOf(int) instead	src/main/java/org/apache/jackrabbit/jcr2spi	WorkspaceManager.java	line 616	1190981544640	1666279
M P WMI: Method org.apache.jackrabbit.jcr2spi.name.NamespaceCache.syncNamespaces(Map) makes inefficient use of keySet iterator instead of entrySet iterator	src/main/java/org/apache/jackrabbit/jcr2spi/name	NamespaceCache.java	line 193	1190981544656	1666283
M P WMI: Method org.apache.jackrabbit.jcr2spi.nodetype.NodeTypeRegistryImpl.internalRegister(Map) makes inefficient use of keySet iterator instead of entrySet iterator	src/main/java/org/apache/jackrabbit/jcr2spi/nodetype	NodeTypeRegistryImpl.java	line 524	1190981544656	1666285
M P WMI: Method org.apache.jackrabbit.jcr2spi.observation.ObservationManagerImpl.onEvent(EventBundle) makes inefficient use of keySet iterator instead of entrySet iterator	src/main/java/org/apache/jackrabbit/jcr2spi/observation	ObservationManagerImpl.java	line 189	1190981544656	1666286
M P WMI: Method org.apache.jackrabbit.jcr2spi.state.NodeState.persisted(ChangeLog) makes inefficient use of keySet iterator instead of entrySet iterator	src/main/java/org/apache/jackrabbit/jcr2spi/state	NodeState.java	line 275	1190981544671	1666297
"
1,"MatchAllScorer calculateDocFilter() bugIn MatchAllScorer.calculateDocFilter(), When you have just two nodes, with different properties, like ""myprop"" and ""myprop2"", and you have an xpath String xpath = ""//*[@myprop], you get both nodes back (to be precise, you'll get every node that has a property that startswith ""myprop"")


You can reproduce it by changing the SimpleQueryTest.testIsNotNull() a little:

Change 

bar.setProperty(""text"", ""the quick brown fox jumps over the lazy dog.""); 

to

bar.setProperty(""mytextwhichstartswithmytext"", ""the quick brown fox jumps over the lazy dog."");

Now the test with xpath = ""//*[@jcr:primaryType='nt:unstructured' and @mytext]""; fails because 2 results. I did test for the trunk and tag 1.3.1 and both have the same problem. I have attached MatchAllScorer.java.patch in this mail, or should I create a JIRA issue for this? 

Furthermore I would like to discuss a different implementation for the MatchAllScorer, because IMHO the current calculateDocFilter() becomes slow pretty fast (see bottom email the code part i am referring to: if you have 100.000 docs with ""mytext"" property, and you query  [@mytext] the loop below is executed at least 100.000 times). I think it might be out of scope for the user-list, or is the user-list the place to discuss something like this? 

-----------------------------------------------------------------------

TermEnum terms = reader.terms(new Term(FieldNames.PROPERTIES, field));
        try {
            TermDocs docs = reader.termDocs();
            try {
                while (terms.term() != null
                        && terms.term().field() == FieldNames.PROPERTIES
                        && terms.term().text().startsWith(field)) {
                    docs.seek(terms);
                    while (docs.next()) {
                        docFilter.set(docs.doc());
                    }
                    terms.next();
                }
            } finally {
                docs.close();
            }
        } finally {
            terms.close();
        }

-----------------------------------------------------------------------

"
1,"JCR-Server: IllegalArgumentException when retrieving DateHeaderissue reported by martin perez:

Here is one exception. If I access to any repository through WebDAV using a
web browser (http://localhost:8080/webapp/repository/default the first time
goes well, but if I refresh the page then I get the following exception:

GRAVE: Servlet.service() para servlet Webdav lanzó excepción
java.lang.IllegalArgumentException: mar, 29 nov 2005 22:45:48 CET
    at org.apache.catalina.connector.Request.getDateHeader(Request.java
:1791)
    at org.apache.catalina.connector.RequestFacade.getDateHeader(
RequestFacade.java:630)
    at org.apache.jackrabbit.webdav.WebdavRequestImpl.getDateHeader(
WebdavRequestImpl.java:724)
    at org.apache.jackrabbit.server.AbstractWebdavServlet.spoolResource(
AbstractWebdavServlet.java:363)
    at org.apache.jackrabbit.server.AbstractWebdavServlet.doGet(
AbstractWebdavServlet.java:344)
    at org.apache.jackrabbit.j2ee.SimpleWebdavServlet.execute(
SimpleWebdavServlet.java:191)
    at org.apache.jackrabbit.server.AbstractWebdavServlet.service(
AbstractWebdavServlet.java:170)
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(
ApplicationFilterChain.java:252)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(
ApplicationFilterChain.java:173)
    at org.apache.catalina.core.StandardWrapperValve.invoke(
StandardWrapperValve.java:213)
    at org.apache.catalina.core.StandardContextValve.invoke(
StandardContextValve.java:178)
    at org.apache.catalina.core.StandardHostValve.invoke(
StandardHostValve.java:126)
    at org.apache.catalina.valves.ErrorReportValve.invoke(
ErrorReportValve.java:105)
    at org.apache.catalina.core.StandardEngineValve.invoke(
StandardEngineValve.java:107)
    at org.apache.catalina.connector.CoyoteAdapter.service(
CoyoteAdapter.java:148)
    at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java
:868)
    at
org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection
(Http11BaseProtocol.java:663)
    at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(
PoolTcpEndpoint.java:527)
    at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(
LeaderFollowerWorkerThread.java:80)
    at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(
ThreadPool.java:684)
    at java.lang.Thread.run(Thread.java:595)"
0,"Remove jdk 1.4 restriction for jcr-testsThis restriction only exist because these tests form the TCK for JSR-283 which needed to support JDK 1.4. If maintenance on the JSR-283 TCK is needed, it can happen in a previous branch (2.3?).

"
0,"WebDAV BIND supportI'm tempted to work on implementing the WebDAV BIND protocol, as currently defined in http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-20.html.

This issue can be used to collect design proposals and track progress.

1) DAV:resource-id live property

This can be implemented in terms of the JCR UUID. However, we need to turn this one into a URI for WebDAV. If the JCR UUID happens to *really* use UUID syntax, we *could* use urn:uuid. Otherwise, it would probably useful to mint an HTTP URI, served by the WebDAV servlet. (note that the latter has the disadvantage that moving a node to a different server will affect its resource-id, in case that other server allows importing UUIDs).

2) REBIND and UNBIND methods

Same as MOVE and DELETE, with the excpetion of marshalling.

3) DAV:parent-set property

Either trivial (when node isn't shared), or needs to use the JCR 2.0 shared set functionality.

4) BIND method

Either trivial (when shareable nodes aren't supported), or needs to use the JCR 2.0 shared set functionality.

5) Cycle detection in depth:infinity requests

TBD :-)
"
0,CanAddChildNodeCallWithNodeTypeTest.testDefinedAndLegalType() may fail if protected child node definition is pickedIf the utility NodeTypeUtil.locateChildNodeDef() picks a protected child node definition the test case will fail because it is not allowed add a protected child node.
1,[PATCH] Fix possible Null Ptr exception in ConnectionFactorycode will throw npe if driver string is null - patch fixes this.
0,"Allow QP subclasses to support Wildcard Queries with leading ""*""It would be usefull for some users if the logic that prevents QueryParser from creating WIldcardQueries with leading wildcard characters (""?"" or ""*"") be moved from the grammer into the base implimentation of getWildcardQuery so that it may be overridden in subclasses without needing to modifiy the grammer directly.
"
0,"Contribution: Efficient Sorting of DateField/DateTools Encoded Timestamp Long ValuesHello Tim,

As promised, the sort functionality for ""long"" values is included in the
attached files.

patchTestSort.txt contains the diff info. for my modifications to the
TestSort.java class

org.apache.lucene.search.ZIP contains the three new class files for
efficient sorting of ""long"" field values and of encoded timestamp
field values as ""long"" values.

Let me know if you have any questions.

Regards,
Rus"
0,"convert automaton to char[] based processing and TermRef / TermsEnum apiThe automaton processing is currently done with String, mostly because TermEnum is based on String.
it is easy to change the processing to work with char[], since behind the scenes this is used anyway.

in general I think we should make sure char[] based processing is exposed in the automaton pkg anyway, for things like pattern-based tokenizers and such.
"
1,"Decompounders based on CompoundWordTokenFilterBase cannot be used with custom attributesThe CompoundWordTokenFilterBase.setToken method will call clearAttributes() and then will reset only the default Token attributes (term, position, flags, etc) resulting in any custom attributes losing their value. Commenting out clearAttributes() seems to do the trick, but will fail the TestCompoundWordTokenFilter tests.."
1,"QueryImpl result offSet must be considered after security class grant the item.ackrabbit version is 1.4 (jackrabbit-core - 1.4.5).
I use searches with result limit and offset but it is working some wrong for my case.
Lets suppose the total of nodes that will return with the search:

NAME      - GRANTACCESS -   OFFSET
node1     -     true                    - 0
node2     -     false                  -  1
node3     -     true                    - 2
node4     -     true                    - 3
node5     -     false                  -  4

My page must have 2 records, so first I do a count for the search and get size of 3 records (after filtered by my security class invoked automatically by jackrabbit), so I have 2 pages to show to the user. The first page must return 2 records, of course, and the second must return 1 record.

In the first search I do set:
QueryImp.setOffset(0);
QueryImpl.setLimit(2);

So, I get the nodes 1 and 3, thats correct.

In the second same search (for second page), I do set:
QueryImp.setOffset(2);
QueryImpl.setLimit(2);

This way I pretend to get two records, starting from the record nro 3, which would be only the node4.
But, the result I got is node3 (again) and node4, because the offset worked not according to the grantacess (provided by the security class), but according to the sequence of the raw result.

This offset have to start in the correct position, counting only the granted nodes returned by the security class.
Hope this make sense for you.

Thanks.
Helio."
1,"ClassCastException when registering custom node by XML fileWhen trying to register node type from XML file using following code:

		JackrabbitNodeTypeManager nodeTypeManager = (JackrabbitNodeTypeManager)workspace.getNodeTypeManager();
		for(Resource resource : nodeDefinitions){
			System.out.println(""** registering node:""+resource);
			nodeTypeManager.registerNodeTypes(resource.getInputStream(), JackrabbitNodeTypeManager.TEXT_XML);
		}

we receive such surprise:

Caused by: java.lang.ClassCastException: com.sun.org.apache.xerces.internal.dom.DeferredDocumentImpl
	at org.apache.jackrabbit.core.util.DOMWalker.iterateElements(DOMWalker.java:215)
	at org.apache.jackrabbit.core.nodetype.xml.NodeTypeReader.getNodeTypeDefs(NodeTypeReader.java:121)
	at org.apache.jackrabbit.core.nodetype.NodeTypeManagerImpl.registerNodeTypes(NodeTypeManagerImpl.java:257)
	at org.apache.jackrabbit.core.nodetype.NodeTypeManagerImpl.registerNodeTypes(NodeTypeManagerImpl.java:499)
	at pl.codeservice.jcr.JcrCustomNodeRegister.registerNodes(JcrCustomNodeRegister.java:41)
	at pl.codeservice.jcr.JcrCustomNodeRegister.init(JcrCustomNodeRegister.java:27)
	...


Registering nodes by .cnd files works fine."
0,"""reproduce with"" on test failure isn't right if you manually overrided anythingIf you run a test with eg -Dtests.codec=SimpleText...

If it fails, the ""reproduce with"" fails to include that manual override (-Dtests.codec=SimpleText), ie it only includes the seed / test class / test method.  So it won't actually reproduce the fail, in general.

We just need to fix the ""reproduce with"" to add any manual overrides...."
1,"Infinite loop on NTLM authenticationI got an infinite loop on NTLM authentication if the authentication failed (bad credentials).

The state FAILED of the NTLM sheme is never catched in the method authenticate of the class HttpAuthenticator (line 123).
I fix temporatily this bug by adding a case for the protocol state HANDSHAKE."
1,"make spell checker test case work againSee attached path which makes the spellchecker test case work again. The problem without the patch is that consecutive calls to indexDictionary() will create a spelling index with duplicate words. Does anybody see a problem with this patch? I see that the spellchecker code is now used in Solr, isn't it? I didn't have time to test this patch inside Solr.

Also see http://issues.apache.org/jira/browse/LUCENE-632, but the null check is included in this patch so the NPE described there cannot happen anymore.
"
1,"AbstractHttpClient.determineTarget does not recognize target host correctlyI am trying to execute an HttpGet with the following URI:
""http://www.foo.foo/doSomething.html?url=http://www.bar.bar/doSomethingElse.html""

This leads to UnknownHostException

Going through the internal code, the problem seems to be in the AbstractHttpClient.determineTarget method:
            String ssp = requestURI.getSchemeSpecificPart();
            ssp = ssp.substring(2, ssp.length()); //remove ""//"" prefix
            int end = ssp.indexOf(':') > 0 ? ssp.indexOf(':') :
                    ssp.indexOf('/') > 0 ? ssp.indexOf('/') :
                    ssp.indexOf('?') > 0 ? ssp.indexOf('?') : ssp.length();
            String host = ssp.substring(0, end);

This code sets the target host to ""www.foo.foo/doSomething.html?url=http"" instead of ""www.foo.foo"". This obviously breaks the execution not far down the line... DefaultClientConnectionOperator.resolveHostname throws an UnknownHostException.

FWIW the AbstractHttpClient.determineTarget method actually has access to the request URI object, which correctly states that the host is ""www.foo.foo"".

So why does it try to extract the host from the scheme specific part anyway?

I hope this is useful... and if there is any workaround please let me know, as I'm stuck on this one.

Marco"
0,"add infrastructure for longer running nightly test casesI'm spinning this out of LUCENE-2762...

The patch there adds initial infrastructure for tests to pull documents from a line file, and adds a longish running test case using that line file to test NRT.

I'd like to see some tests run on more substantial indices based on real data... so this is just a start."
0,"bad test assumptions in org.apache.jackrabbit.test.api.lockThese tests make a lot of assumptions that may not be true for a compliant repository, such as:

- ability to add nodes without specifiying the node type
- assumption that ordering and same name siblings are supported
- assumption that addMixin(lockable) is required on newly added nodes

Furthermore, some repositories may not support shallow locks on leaf nodes. That's not compliant, but failure to do so should not abort a test that tests something else.
"
0,"Provide Date Header Util MethodsHello,

It would be really nice to have util methods that help with setting date
headers.  For instance, like the servlet spec's setDateHeader() method.  This
allows for the client of HttpClient to not have to deal with formatting the date
into the correct string.  There is a parseDate method that turns a String into a
Date.  It would be nice to have the opposite method.

Thanks!
Seth"
0,"allow cache to be configured as a non-shared (private) cacheCurrently the CachingHttpClient only behaves as a shared cache, which is a safe and conservative assumption. However, in some settings, it would be appropriate to be able to configure the CachingHttpClient as a non-shared cache, which would make more responses cacheable, including:
* responses to requests with Authorization headers
* responses with 'Cache-Control: private'
* ability to serve stale responses when invalidation fails for 'Cache-Control: proxy-revalidate'
"
0,"Developer documentationProvide more example code in CVS and give a clear link on the website.  A
walkthrough of the API.  Documenntation suitable for new users."
1,"Error on query initialization - intermittentAbout 1 in ten times, I get the error as shown in the stack trace below. This happens when I run test, or when I start the app. The only way to resolve (when testing) seems to be to blow away the repository. 

It always happens at the point the query manager is accessed (triggering the query subsystem to start up). It DOES NOT cause an exception to be thrown back to the caller, I just noticed it in the logs. Basically the queries return NO data at all (and show up as test failures of course). 

In each case when I startup the system/test, if the repository exists I use it, and (for tests) clean it by deleting the root node of the user content, and then starting again, otherwise there is nothing that exciting.

Please let me know if more info is needed.


ERROR 05-03 15:54:39,386 (LazyQueryResultImpl.java:getResults:266)  -Exception while executing query:
java.io.IOException : No such file or directory
    at java.io.UnixFileSystem.createFileExclusively(Native Method)
    at java.io.File.createNewFile(File.java:850)
    at org.apache.jackrabbit.core.query.lucene.FSDirectory$1.obtain( FSDirectory.java:119)
    at org.apache.lucene.store.Lock.obtain(Lock.java:51)
    at org.apache.lucene.store.Lock$With.run(Lock.java:98)
    at org.apache.lucene.index.IndexReader.open(IndexReader.java:141)
    at org.apache.lucene.index.IndexReader.open(IndexReader.java:136)
    at org.apache.jackrabbit.core.query.lucene.AbstractIndex.getReadOnlyIndexReader(AbstractIndex.java:191)
    at org.apache.jackrabbit.core.query.lucene.MultiIndex.getIndexReader (MultiIndex.java:616)
    at org.apache.jackrabbit.core.query.lucene.SearchIndex.executeQuery(SearchIndex.java:384)
    at org.apache.jackrabbit.core.query.lucene.LazyQueryResultImpl.executeQuery(LazyQueryResultImpl.java :204)
    at org.apache.jackrabbit.core.query.lucene.LazyQueryResultImpl.getResults(LazyQueryResultImpl.java:244)
    at org.apache.jackrabbit.core.query.lucene.LazyQueryResultImpl.<init>(LazyQueryResultImpl.java :161)
    at org.apache.jackrabbit.core.query.lucene.QueryImpl.execute(QueryImpl.java:164)
    at org.apache.jackrabbit.core.query.QueryImpl.execute(QueryImpl.java:142)"
1,"Possible rare thread hazard in IW.commitI was seeing a very rare intermittent failure in TestIndexWriter.testCommitThreadSafety.

The issue happens if one thread calls commit while another is flushing, and is exacerbated at high flush rates (eg maxBufferedDocs=2).  The thread doing commit will first flush, and then it syncs the files.  However in between those two, if other threads manage to add enough docs and trigger another flush, a 2nd new segment can sneak into the SegmentInfos before we sync.

This is normally harmless, in that it just means the commit includes a few more docs that had been added by other threads, so it's fine. But, it can mean that a committed segment references the still-open doc store files.  Our tests now catch this (I changed MockDirWrapper to throw an exception in this case), and so testCommitThreadSafety can fail with this exception.  If you hardwire the maxBufferedDocs to 2 it happens quite often.

It's not clear this is really a problem in real apps vs just our anal MockDirWrapper but I think we should fix it..."
1,"DocMakers setup for the ""docs.dir"" property fails when passing an absolute path.setConfig in TrecDocMaker assumes docs.dir is a relative path. Therefore it create new File(workDir, docs.dir). However, if docs.dir is an absolute path, this works incorrectly and results in No txt files in dataDir exception."
0,"rename optimize to a less cool-sounding nameI think users see the name optimize and feel they must do this, because who wants a suboptimal system? but this probably just results in wasted time and resources.

maybe rename to collapseSegments or something?"
0,"Improve read/write concurrencyI'd like to set up a few performance tests to help identify our worst bottlenecks for various kinds of concurrent read-only and read-write access patterns.

Once identified, I'm hoping to fix at least some of those bottlenecks."
0,Make Jackrabbit repository DTD easier to extendIt would be nice if a downstream project could easily extend the Jackrabbit repository configuration format by adding new configuration elements under the <Repository> root. Currently that can only be done by customizing a copy of the entire DTD. It would be better if the relevant parts of the DTD could simply be included via an external parameter entity into a downstream DTD.
0,"Deprecate / Remove DutchAnalyzer.setStemDictionaryDutchAnalyzer.setStemDictionary(File) prevents reuse of TokenStreams (and also uses a File which isn't ideal).  It should be deprecated in 3x, removed in trunk."
0,"Add test to check maven artifacts and their pomsAs release manager it is hard to find out if the maven artifacts work correct. It would be good to have an ant task that executes maven with a .pom file that requires all contrib/core artifacts (or one for each contrib) that ""downloads"" the artifacts from the local dist/maven folder and builds that test project. This would require maven to execute the build script. Also it should pass the ${version} ANT property to this pom.xml"
0,expose PM for versioning manager so that the consistency check can be run from test casesWe need to be able to run the PM consistency checks for the versioning store as well.
0,"RAMInputStream and RAMOutputStream without further bufferingFrom java-dev, Doug's reply of 12 Sep 2005 
on Delaying buffer allocation in BufferedIndexInput: 
 
Paul Elschot wrote: 
... 
> I noticed that RAMIndexInput extends BufferedIndexInput. 
> It has all data in buffers already, so why is there another 
> layer of buffering? 
 
No good reason: it's historical. 
 
To avoid this either: (a) the BufferedIndexInput API would need to be  
modified to permit subclasses to supply the buffer; or (b)  
RAMInputStream could subclass IndexInput directly, using its own  
buffers.  The latter would probably be simpler. 
 
End of quote. 
 
I made version (b) of RAMInputStream. 
Using this RAMInputStream, TestTermVectorsReader failed as the only 
failing test."
0,Improve Memory Consumption for merging DocValues SortedBytes variantsCurrently SortedBytes are loaded into memory during merge which could be a potential trap. Instead of loading them into Heap memory we can merge those sorted values with much smaller memory and without loading all values into ram.
0,"Releasing a connection is unconfirmedWhen a connection is attempted to be released using
HttpConnection.releaseConnection(), it is unclear whether this is actually done.
The implementation for the method is as follows in 3.0-beta1:

    /**
     * Release the connection.
     */
    public void releaseConnection() {
        LOG.trace(""enter HttpConnection.releaseConnection()"");
        if (locked) {
            LOG.debug(""Connection is locked.  Call to releaseConnection() ignore
        } else if (httpConnectionManager != null) {
            LOG.debug(""Releasing connection back to connection manager."");
            httpConnectionManager.releaseConnection(this);
        } else {
            LOG.warn(""HttpConnectionManager is null.  Connection cannot be relea
        }
    }

Silently ignoring a request (to release the connection, in this case) is hardly
ever the right thing to do, in my opinion. Instead, I suggest the method
indicates whether the connection was actually closed or not.

I see at least 2 alternatives:

1) throw an exception to indicate the connection could not be released;
2) return a flag indicating whether the connection could actually be released."
1,"BeanConfig may incorrectly throw ConfigurationExceptionWith the changes from JCR-1462 the BeanConfig.newInstance() may throw a ConfigurationException if the bean does not support a configuration parameter that is configured.

There may be cases where the check in newInstance() yields an unsupported property even though there is a bean property present with the given key. Because the implementation uses 'map.get(key) == null'  as a check for a property name the method will throw if the key exists but the value is null.

The implementation should rather use 'map.containsKey(key)'."
1,"getScheme() and getPort() return wrong defaults for HttpsURLgetScheme(), if called on an instance of HttpsURL, wrongly returns http instead
of https. That's because dynamic data binding doesn't work for final static
fields (see DEFAULT_SCHEME)."
0,"Add maven-eclipse-plugin properties to project.xml for easier configuration in IDE- add the maven.eclipse.resources.addtoclasspath=true property to project.properties (make the eclipse plugin create source dirs also for resources). 

- add the <eclipse.dependency>true</eclipse.dependency> property to all the jackrabbit internal dependencies in all the POMs (all the dependencies with ""jackrabbit"" groupId) so internal dependencies becomes project dependencies in eclipse."
0,"Changes.html not explicitly included in releaseNone of the release related ant targets explicitly call cahnges-to-html ... this seems like an oversight.  (currently it's only called as part of the nightly target)

"
0,Deprecate RepositoryService.getNodeInfo methodI suggest to deprecate RepositoryService.getNodeInfo in favor of RepositoryService.getItemInfos. The former method is not called from jsr2spi anymore and thus not required. 
0,"Remove synchronization in CompoundFileReaderCurrently there is what seems to be unnecessary synchronization in CompoundFileReader.  This is solved by cloning the base IndexInput.  Synchronization in low level IO classes creates lock contention on highly multi threaded Lucene installations, so much so that in many cases the CPU utilization never reaches the maximum without using something like ParallelMultiSearcher."
0,"Add support for tablespaces to Oracle related classesWhen a user account for an Oracle database has no or a temporary default tablespace, then the appropriate database schemas cannot be created. This is an issue for at least the following packages:
- o.a.j.core.persistence.bundle
- o.a.j.core.persistence.db
- o.a.j.core.fs.db
"
0,"Add support for terms in BytesRef format to Term, TermQuery, TermRangeQuery & Co.It would be good to directly allow BytesRefs in TermQuery and TermRangeQuery (as both queries convert the strings to BytesRef internally). For NumericRange support in Solr it will be needed to support numerics as ByteRef in single-term queries.

When this will be added, don't forget to change TestNumericRangeQueryXX to use the BytesRef ctor of TRQ."
1,Deadlock in IndexWriterIf autoCommit == true a merge usually triggers a commit. A commit (prepareCommit) can trigger a merge vi the flush method. There is a synchronization mechanism for commit (commitLock) and a separate synchronization mechanism for merging (ConcurrentMergeScheduler.wait). If one thread holds the commitLock monitor and another one holds the ConcurrentMergeScheduler monitor we have a deadlock.
1,"QueryStat getPopularQueries doesn't set the proper positionEmbarrassing copy/paste error. I was updating the wrong array and the position info was never returned. 

This made any jmx client to fail with: 
at javax.management.openmbean.TabularDataSupport.checkValueAndIndex(TabularDataSupport.java:871) 
at javax.management.openmbean.TabularDataSupport.internalPut(TabularDataSupport.java:331) 
at javax.management.openmbean.TabularDataSupport.put(TabularDataSupport.java:323) 
at org.apache.jackrabbit.core.jmx.QueryStatManager.asTabularData(QueryStatManager.java:103)"
0,"NodeTest.testAddNodeConstraintViolationExceptionUndefinedNodeType relies on addNode(name, ""nt:base"")NodeTest.testAddNodeConstraintViolationExceptionUndefinedNodeType() relies on the ability to create a new node of type ""nt:base"", which isn't something repositories are required to support.

Proposal: make the node type name for this test case configurable.
"
1,"NPE Thrown when two Cluster Nodes are hitting the same underlying database.I've created a test that creates two repositories with clustering enabled that are backed by the same database.  Using the following workflow causes a NullPointerException to be thrown.

The workflow I'm using is:
The root node is versioned.
ClusterNode1 creates a versioned child node named ""foo"".
The test waits to make sure the syncDelay has passed so ClusterNode2 will notice the newly created node.
ClusterNode2 retrieves the ""foo"" child node and removes it.
The test waits for the change ClusterNode1 to sync with that change.
ClusterNode1 tries to create another new node however a NullPointerException is thrown when the it tries to checkout the rootNode.

java.lang.NullPointerException: null values not allowed
	at org.apache.commons.collections.map.AbstractReferenceMap.put(AbstractReferenceMap.java:251)
	at org.apache.jackrabbit.core.version.VersionManagerImpl.getItem(VersionManagerImpl.java:280)
	at org.apache.jackrabbit.core.version.XAVersionManager.getItem(XAVersionManager.java:334)
	at org.apache.jackrabbit.core.version.AbstractVersionManager.getVersion(AbstractVersionManager.java:87)
	at org.apache.jackrabbit.core.NodeImpl.getBaseVersion(NodeImpl.java:3198)
	at org.apache.jackrabbit.core.NodeImpl.checkout(NodeImpl.java:2991)
	at com.cerner.system.configuration.repository.jcr.SimpleJackrabbitConflictTest.testNullPointerExceptionThrown(SimpleJackrabbitConflictTest.java:96)"
1,"CartesianPolyFilterBuilder doesn't properly account for which tiers actually exist in the index In the CartesianShapeFilterBuilder, there is logic that determines the ""best fit"" tier to create the Filter against.  However, it does not account for which fields actually exist in the index when doing so.  For instance, if you index tiers 1 through 10, but then choose a very small radius to restrict the space to, it will likely choose a tier like 15 or 16, which of course does not exist."
1,"TestBytesRefHash#testCompact is brokenTestBytesRefHash#testCompact fails when run with ant test -Dtestcase=TestBytesRefHash -Dtestmethod=testCompact -Dtests.seed=-7961072421643387492:5612141247152835360
{noformat}

    [junit] Testsuite: org.apache.lucene.util.TestBytesRefHash
    [junit] Tests run: 1, Failures: 0, Errors: 1, Time elapsed: 0.454 sec
    [junit] 
    [junit] ------------- Standard Error -----------------
    [junit] NOTE: reproduce with: ant test -Dtestcase=TestBytesRefHash -Dtestmethod=testCompact -Dtests.seed=-7961072421643387492:5612141247152835360
    [junit] NOTE: test params are: codec=PreFlex, locale=et, timezone=Pacific/Tahiti
    [junit] NOTE: all tests run in this JVM:
    [junit] [TestBytesRefHash]
    [junit] NOTE: Linux 2.6.35-28-generic amd64/Sun Microsystems Inc. 1.6.0_24 (64-bit)/cpus=12,threads=1,free=363421800,total=379322368
    [junit] ------------- ---------------- ---------------
    [junit] Testcase: testCompact(org.apache.lucene.util.TestBytesRefHash):	Caused an ERROR
    [junit] bitIndex < 0: -27
    [junit] java.lang.IndexOutOfBoundsException: bitIndex < 0: -27
    [junit] 	at java.util.BitSet.set(BitSet.java:262)
    [junit] 	at org.apache.lucene.util.TestBytesRefHash.testCompact(TestBytesRefHash.java:146)
    [junit] 	at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1260)
    [junit] 	at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1189)
    [junit] 
    [junit] 
    [junit] Test org.apache.lucene.util.TestBytesRefHash FAILED
{noformat}

the test expects that _TestUtil.randomRealisticUnicodeString(random, 1000); will never return the same string.

I will upload a patch soon."
1,"IdleConnectionHandler can leave closed connections in a inconsistent stateIdleConnectionHandler when shutting down 'stale' connection does not update the state of AbstractPoolEntry thus causing an inconsistency between the state of the connection (closed) and that of the pool entry (still assumed open). The problem is mitigated by the fact that the pooling manager usually evicts closed connections almost immediately. There is a small window of time in the ThreadSafeClientConnManager#closeIdleConnection method, at which a connection can be closed by the IdleConnectionHandler and immediately leased from the pool by another thread in an inconsistent state before the main thread gets a chance to re-acquire the pool lock and clean out closed connections.

For 4.0.x the problem can be worked around by retaining the pool lock for the entire span of the #closeIdleConnection. For the 4.1 branch a better solution should be devised. This probably means a complete rewrite or deprecation of IdleConnectionHandler."
1,"iterative removal of same-name sibling nodes might under certain circumstances throw unexpected exceptionscode fragment to reproduce the issue:

            // setup test
            if (root.hasNode(""tmp"")) {
                root.getNode(""tmp"").remove();
                session.save();
            }
            Node tmp = root.addNode(""tmp"");
            for (int i = 0; i < 4; i++) {
                Node a = tmp.addNode(""a"");
                System.out.println(""added "" + a.getPath());
            }
            session.save();

            // iterative removal of same name sibling child nodes
            NodeIterator ni = tmp.getNodes();
            while (ni.hasNext()) {
                Node n = ni.nextNode();
                System.out.println(""removing "" + n.getPath());
                n.remove();
                tmp.save();
            }

console output:

added /tmp/a
added /tmp/a[2]
added /tmp/a[3]
added /tmp/a[4]
removing /tmp/a
removing /tmp/a
removing /
javax.jcr.RepositoryException: /: cannot remove root node
	at org.apache.jackrabbit.core.ItemImpl.internalRemove(ItemImpl.java:766)
	at org.apache.jackrabbit.core.ItemImpl.remove(ItemImpl.java:997)
	at org.apache.jackrabbit.core.Test.main(Test.java:141)


note that the msg of the exception is misleading: the above code did never try to remove
the root node. 

the exception is caused by a bug in CachingHierarchyManager which fails to update
the cache correctly.

btw: if you comment the first logging stmt, i.e. 

                //System.out.println(""added "" + a.getPath());

the problem doesn't occur anymore."
0,"WorkspaceRestoreTest extends RestoreTestWorkspaceRestoreTest extends RestoreTest in order to re-use variables and setUp/tearDown code. 

On the other hand, this causes all tests from RestoreTest that aren't overriden by WorkspaceRestoreTest to be run twice.

Proposal: decouple the classes, copying over the interesting parts from RestoreTest into WorkspaceRestoreTest.
"
0,"Manage Lucene FieldCaches per index segmentJackrabbit uses an IndexSearcher which searches on a single IndexReader which is most likely to be an instance of CachingMultiReader. On every search that does sorting or range queries a FieldCache is populated and associated with this instance of a CachingMultiReader. On successive queries which operate on this CachingMultiReader you will get a tremendous speedup for queries which can reuse  those associated FieldCache instances.
The problem is that Jackrabbit creates a new CachingMultiReader _everytime_ one of the underlying indexes are modified. This means if you just change _one_ item in the repository you will need to rebuild all those FieldCaches because the existing FieldCaches are associated with the old instance of CachingMultiReader.
This does not only lead to slow search response times for queries which contains range queries or are sorted by a field but also leads to massive memory consumption (depending on the size of your indexes) because there might be multiple instances of CachingMultiReaders in use if you have a scenario where a lot of queries and item modifications are executed concurrently.
The goal is to keep those FieldCaches as long as possible."
1,"PdfTextFilter may leave parsed document open in case of errorsIn case of errors in a parsed PDF document jackrabbit may fail to properly close the parsed document. PDFBox will write a stack trace to system out at finalize to warn agains this.

this is the resulting log:

WARN org.apache.jackrabbit.core.query.LazyReader LazyReader.java(read:82) 20.02.2007 15:42:50 exception initializing reader org.apache.jackrabbit.core.query.PdfTextFilter$1: java.io.IOException: Error: Expected hex number, actual=' 2'
java.lang.Throwable: Warning: You did not close the PDF Document
   at org.pdfbox.cos.COSDocument.finalize(COSDocument.java:384)
   at java.lang.ref.Finalizer.invokeFinalizeMethod(Native Method)
   at java.lang.ref.Finalizer.runFinalizer(Finalizer.java:83)
   at java.lang.ref.Finalizer.access$100(Finalizer.java:14)
   at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:160)


this may happens because the parse() method at

parser = new PDFParser(new BufferedInputStream(in));
parser.parse();

immediately creates a document, but it can throw an exception while processing the file.
PdfTextFilter should check if parser still holds a document and close it appropriately.

"
1,"Errors during concurrent session import of nodes with same UUIDs21.08.2009 16:22:14 *ERROR* [Executor 0] ConnectionRecoveryManager: could not execute statement, reason: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'SQL090821042140130' defined on 'DEFAULT_BUNDLE'., state/code: 23505/20000 (ConnectionRecoveryManager.java, line 453)
21.08.2009 16:22:14 *ERROR* [Executor 0] BundleDbPersistenceManager: failed to write bundle: 6c292772-349e-42b3-8255-7729615c67de (BundleDbPersistenceManager.java, line 1212)
ERROR 23505: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'SQL090821042140130' defined on 'DEFAULT_BUNDLE'.
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.impl.sql.execute.IndexChanger.insertAndCheckDups(Unknown Source)
	at org.apache.derby.impl.sql.execute.IndexChanger.doInsert(Unknown Source)
	at org.apache.derby.impl.sql.execute.IndexChanger.insert(Unknown Source)
	at org.apache.derby.impl.sql.execute.IndexSetChanger.insert(Unknown Source)
	at org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(Unknown Source)
	at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Unknown Source)
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source)
	at org.apache.jackrabbit.core.persistence.bundle.util.ConnectionRecoveryManager.executeStmtInternal(ConnectionRecoveryManager.java:371)
	at org.apache.jackrabbit.core.persistence.bundle.util.ConnectionRecoveryManager.executeStmtInternal(ConnectionRecoveryManager.java:298)
	at org.apache.jackrabbit.core.persistence.bundle.util.ConnectionRecoveryManager.executeStmt(ConnectionRecoveryManager.java:261)
	at org.apache.jackrabbit.core.persistence.bundle.util.ConnectionRecoveryManager.executeStmt(ConnectionRecoveryManager.java:239)
	at org.apache.jackrabbit.core.persistence.bundle.BundleDbPersistenceManager.storeBundle(BundleDbPersistenceManager.java:1209)
	at org.apache.jackrabbit.core.persistence.bundle.AbstractBundlePersistenceManager.putBundle(AbstractBundlePersistenceManager.java:709)
	at org.apache.jackrabbit.core.persistence.bundle.AbstractBundlePersistenceManager.storeInternal(AbstractBundlePersistenceManager.java:651)
	at org.apache.jackrabbit.core.persistence.bundle.AbstractBundlePersistenceManager.store(AbstractBundlePersistenceManager.java:527)
	at org.apache.jackrabbit.core.persistence.bundle.BundleDbPersistenceManager.store(BundleDbPersistenceManager.java:563)
	at org.apache.jackrabbit.core.state.SharedItemStateManager$Update.end(SharedItemStateManager.java:724)
	at org.apache.jackrabbit.core.state.SharedItemStateManager.update(SharedItemStateManager.java:1101)
	at org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:351)
	at org.apache.jackrabbit.core.state.XAItemStateManager.update(XAItemStateManager.java:354)
	at org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:326)
	at org.apache.jackrabbit.core.state.SessionItemStateManager.update(SessionItemStateManager.java:326)
	at org.apache.jackrabbit.core.ItemImpl.save(ItemImpl.java:1098)
	at org.apache.jackrabbit.core.SessionImpl.save(SessionImpl.java:925)
	at org.apache.jackrabbit.core.ConcurrentImportTest$1.execute(ConcurrentImportTest.java:73)
	at org.apache.jackrabbit.core.AbstractConcurrencyTest$Executor.run(AbstractConcurrencyTest.java:209)
	at java.lang.Thread.run(Thread.java:637)
"
0,"Sep codec should store less in terms dictI'm working on improving Lucene's performance with int block codecs
(FOR/PFOR), but in early perf testing I found that these codecs cause
a big perf hit to those MTQs that need to scan many terms but don't
end up accepting many of those terms (eg fuzzy, wildcard, regexp).

This is because sep codec stores much more in the terms dict, since
each file is separate, ie seek points for each of doc, frq, pos, pyl,
skp files.

So I'd like to shift these seek points to instead be stored in the doc
file, except for the doc seek point itself.  Since a given query will
always need to seek to the doc file, this does not add an extra seek.
But it saves tons of vInt decodes for the next/seke intensive MTQs...
"
0,"Jenkins trunk tests (nightly only) fail quite often with OOM in Automaton/FST testsThe nightly Job Lucene-trunk quite often fails with OOM (in several methods, not always in the same test):

Example from last night (this time a huge Automaton):

{noformat}
[junit] java.lang.OutOfMemoryError: Java heap space
[junit] Dumping heap to /home/hudson/hudson-slave/workspace/Lucene-trunk/heapdumps/java_pid38855.hprof ...
[junit] Heap dump file created [86965954 bytes in 1.186 secs]
[junit] Testsuite: org.apache.lucene.index.TestTermsEnum
[junit] Testcase: testIntersectRandom(org.apache.lucene.index.TestTermsEnum):	Caused an ERROR
[junit] Java heap space
[junit] java.lang.OutOfMemoryError: Java heap space
[junit] 	at org.apache.lucene.util.automaton.RunAutomaton.<init>(RunAutomaton.java:128)
[junit] 	at org.apache.lucene.util.automaton.ByteRunAutomaton.<init>(ByteRunAutomaton.java:28)
[junit] 	at org.apache.lucene.util.automaton.CompiledAutomaton.<init>(CompiledAutomaton.java:134)
[junit] 	at org.apache.lucene.index.TestTermsEnum.testIntersectRandom(TestTermsEnum.java:266)
[junit] 	at org.apache.lucene.util.LuceneTestCase$2$1.evaluate(LuceneTestCase.java:611)
[junit] 	at org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:148)
[junit] 	at org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:50)
[junit] 
[junit] 
[junit] Tests run: 6, Failures: 0, Errors: 1, Time elapsed: 11.699 sec
{noformat}

Other traces:

{noformat}
[junit] Testsuite: org.apache.lucene.util.fst.TestFSTs
[junit] Testcase: testRealTerms(org.apache.lucene.util.fst.TestFSTs):	Caused an ERROR
[junit] Java heap space
[junit] java.lang.OutOfMemoryError: Java heap space
[junit] 	at org.apache.lucene.util.ArrayUtil.grow(ArrayUtil.java:338)
[junit] 	at org.apache.lucene.util.fst.FST$BytesWriter.writeBytes(FST.java:927)
[junit] 	at org.apache.lucene.util.fst.ByteSequenceOutputs.write(ByteSequenceOutputs.java:113)
[junit] 	at org.apache.lucene.util.fst.ByteSequenceOutputs.write(ByteSequenceOutputs.java:32)
[junit] 	at org.apache.lucene.util.fst.FST.addNode(FST.java:451)
[junit] 	at org.apache.lucene.util.fst.NodeHash.add(NodeHash.java:122)
[junit] 	at org.apache.lucene.util.fst.Builder.compileNode(Builder.java:180)
[junit] 	at org.apache.lucene.util.fst.Builder.finish(Builder.java:495)
[junit] 	at org.apache.lucene.index.codecs.memory.MemoryCodec$TermsWriter.finish(MemoryCodec.java:232)
[junit] 	at org.apache.lucene.index.FreqProxTermsWriterPerField.flush(FreqProxTermsWriterPerField.java:414)
[junit] 	at org.apache.lucene.index.FreqProxTermsWriter.flush(FreqProxTermsWriter.java:92)
[junit] 	at org.apache.lucene.index.TermsHash.flush(TermsHash.java:117)
[junit] 	at org.apache.lucene.index.DocInverter.flush(DocInverter.java:80)
[junit] 	at org.apache.lucene.index.DocFieldProcessor.flush(DocFieldProcessor.java:78)
[junit] 	at org.apache.lucene.index.DocumentsWriterPerThread.flush(DocumentsWriterPerThread.java:472)
[junit] 	at org.apache.lucene.index.DocumentsWriter.doFlush(DocumentsWriter.java:420)
[junit] 	at org.apache.lucene.index.DocumentsWriter.flushAllThreads(DocumentsWriter.java:568)
[junit] 	at org.apache.lucene.index.IndexWriter.getReader(IndexWriter.java:366)
[junit] 	at org.apache.lucene.index.IndexReader.open(IndexReader.java:317)
[junit] 	at org.apache.lucene.util.fst.TestFSTs.testRealTerms(TestFSTs.java:1034)
[junit] 	at org.apache.lucene.util.LuceneTestCase$2$1.evaluate(LuceneTestCase.java:611)
{noformat}

or:

{noformat}
[junit] Testsuite: org.apache.lucene.util.automaton.TestCompiledAutomaton
[junit] Testcase: testRandom(org.apache.lucene.util.automaton.TestCompiledAutomaton):	Caused an ERROR
[junit] Java heap space
[junit] java.lang.OutOfMemoryError: Java heap space
[junit] 	at org.apache.lucene.util.automaton.RunAutomaton.<init>(RunAutomaton.java:128)
[junit] 	at org.apache.lucene.util.automaton.ByteRunAutomaton.<init>(ByteRunAutomaton.java:28)
[junit] 	at org.apache.lucene.util.automaton.CompiledAutomaton.<init>(CompiledAutomaton.java:134)
[junit] 	at org.apache.lucene.util.automaton.TestCompiledAutomaton.build(TestCompiledAutomaton.java:39)
[junit] 	at org.apache.lucene.util.automaton.TestCompiledAutomaton.testTerms(TestCompiledAutomaton.java:55)
[junit] 	at org.apache.lucene.util.automaton.TestCompiledAutomaton.testRandom(TestCompiledAutomaton.java:101)
[junit] 	at org.apache.lucene.util.LuceneTestCase$2$1.evaluate(LuceneTestCase.java:611)
[junit] 	at org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:148)
[junit] 	at org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:50)
{noformat}

Almost every nightly test fails, history: [https://builds.apache.org/job/Lucene-trunk]

We should maybe raise the max heap space or reduce doc counts/..."
0,"Tests fail with NoClassDefFoundError: org/w3c/dom/ranges/DocumentRangeThe nekohtml dependency in jackrabbit-text-extractors brings in a transitive xerces 2.4.0 dependency without the extra XML API classes required by Xerces. This causes test failures in jackrabbit-core and jackrabbit-jca because the Xerces dependency included in the test classpath overrides the default XML parser. Then, when the test cases try to parse XML documents, the missing XML API dependency causes a NoClassDefFoundError."
1,"RTF text extractor fails on Java 1.4 in some environmentsI've seen the RTF text extractor fail with the following errors with Java 1.4 on Unix platforms. Both are platform issues, but Jackrabbit should be prepared for such cases and for example just log a warning and return an empty text stream when encountering these errors.

java.lang.UnsatisfiedLinkError: /home/jukka/bin/java/j2sdk1.4.2_18/jre/lib/i386/libawt.so: libXp.so.6: cannot open shared object file: No such file or directory
        at java.lang.ClassLoader$NativeLibrary.load(Native Method)
        at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1586)
        at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1503)
        at java.lang.Runtime.loadLibrary0(Runtime.java:788)
        at java.lang.System.loadLibrary(System.java:834)
        at sun.security.action.LoadLibraryAction.run(LoadLibraryAction.java:50)
        at java.security.AccessController.doPrivileged(Native Method)
        at sun.awt.NativeLibLoader.loadLibraries(NativeLibLoader.java:38)
        at sun.awt.DebugHelper.<clinit>(DebugHelper.java:29)
        at java.awt.EventQueue.<clinit>(EventQueue.java:83)
        at javax.swing.SwingUtilities.isEventDispatchThread(SwingUtilities.java:1238)
        at javax.swing.text.StyleContext.reclaim(StyleContext.java:419)
        at javax.swing.text.StyleContext.addAttribute(StyleContext.java:276)
        at javax.swing.text.StyleContext$NamedStyle.addAttribute(StyleContext.java:1468)
        at javax.swing.text.StyleContext$NamedStyle.setName(StyleContext.java:1278)
        at javax.swing.text.StyleContext$NamedStyle.<init>(StyleContext.java:1226)
        at javax.swing.text.StyleContext.addStyle(StyleContext.java:88)
        at javax.swing.text.StyleContext.<init>(StyleContext.java:68)
        at javax.swing.text.DefaultStyledDocument.<init>(DefaultStyledDocument.java:88)
        at org.apache.jackrabbit.extractor.RTFTextExtractor.extractText(RTFTextExtractor.java:60)
        at org.apache.jackrabbit.extractor.RTFTextExtractorTest.testExtractor(RTFTextExtractorTest.java:35)

java.lang.InternalError: Can't connect to X11 window server using ':0.0' as the value of the DISPLAY variable.
	at sun.awt.X11GraphicsEnvironment.initDisplay(Native Method)
	at sun.awt.X11GraphicsEnvironment.<clinit>(X11GraphicsEnvironment.java:134)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:141)
	at java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment(GraphicsEnvironment.java:62)
	at sun.awt.motif.MToolkit.<clinit>(MToolkit.java:81)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:141)
	at java.awt.Toolkit$2.run(Toolkit.java:748)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.awt.Toolkit.getDefaultToolkit(Toolkit.java:739)
	at java.awt.Toolkit.getEventQueue(Toolkit.java:1519)
	at java.awt.EventQueue.isDispatchThread(EventQueue.java:676)
	at javax.swing.SwingUtilities.isEventDispatchThread(SwingUtilities.java:1238)
	at javax.swing.text.StyleContext.reclaim(StyleContext.java:419)
	at javax.swing.text.StyleContext.addAttribute(StyleContext.java:276)
	at javax.swing.text.StyleContext$NamedStyle.addAttribute(StyleContext.java:1468)
	at javax.swing.text.StyleContext$NamedStyle.setName(StyleContext.java:1278)
	at javax.swing.text.StyleContext$NamedStyle.<init>(StyleContext.java:1226)
	at javax.swing.text.StyleContext.addStyle(StyleContext.java:88)
	at javax.swing.text.StyleContext.<init>(StyleContext.java:68)
	at javax.swing.text.DefaultStyledDocument.<init>(DefaultStyledDocument.java:88)
	at org.apache.jackrabbit.extractor.RTFTextExtractor.extractText(RTFTextExtractor.java:60)
	at org.apache.jackrabbit.extractor.RTFTextExtractorTest.testExtractor(RTFTextExtractorTest.java:35)

"
0,"clean up serialization in the codebaseWe removed contrib/remote, but forgot to cleanup serialization hell everywhere.

this is no longer needed, never really worked (e.g. across versions), and slows 
development (e.g. i wasted a long time debugging stupid serialization of 
Similarity.idfExplain when trying to make a patch for the scoring system).
"
0,Some unit tests are not well configuredSome unit tests used for the annotation support are not well defined. There are inherited from DigesterTestBase instead of AnnotationTestBase
1,"WriteLineDocTask incorrectly normalizes fieldsWriteLineDocTask normalizes the body, title and date fields by replacing any ""\t"" with a space. However, if any one of them contains newlines, LineDocMaker will fail, since the first line read will include some of the text, however the second line, which it now expects to be a new document, will include other parts of the text.

I don't know how we didn't hit it so far. Maybe the wikipedia text doesn't have such lines, however when I ran over the TREC collection I hit a lot of those.

I will attach a patch shortly."
0,"Provide more Example Code- better project samples showing how to use HttpClient in a variety of ways. 
There is already a src/examples directory which is excellent.  Its in the right
place and should be build with a full compile, if only to know how any API
changes may effect example code, and that we will be required to keep them
current.
- make sure it uses the 2.0 API and no depricated methods!"
0,Improved join query performanceOur current implementation of SQL2 join queries does not perform very well on pretty much any non-trivial data set.
0,"Re-add SorterTemplate and use it to provide fast ArraySorting and replace BytesRefHash sortingThis patch adds back an optimized and rewritten SorterTemplate back to Lucene (removed after release of 3.0). It is of use for several components:

- Automaton: Automaton needs to sort States and other things. Using Arrays.sort() is slow, because it clones internally to ensure stable search. This component is much faster. This patch adds Arrays.sort() replacements in ArrayUtil that work with natural order or using a Comparator<?>. You can choose between quickSort and mergeSort.
- BytesRefHash uses another QuickSort algorithm without insertionSort for very short ord arrays. This class uses SorterTemplate to provide the same with insertionSort fallback in a very elegant way. Ideally this class can be used everywhere, where the sort algorithm needs to be separated from the underlying data and you can implement a swap() and compare() function (that get slot numbers instead of real values). This also applies to Solr (Yonik?).

SorterTemplate provides quickSort and mergeSort algorithms. Internally for short arrays, it automatically chooses insertionSort (like JDK's Arrays). The quickSort algorith was copied modified from old BytesRefHash. This new class only shares MergeSort with the original CGLIB SorterTemplate, which is no longer maintained."
0,Encapsulate RepositoryHelper fieldThis is a first step towards a test suite that will run tests with multiple threads concurrently.
1,"MultipartPost closes input streamThis is something of a collection of issues that are all interrelated.

1. MultipartPost calls close on the outputstream it retrieved from 
HttpConnection which causes an exception to be thrown later on.  This call 
should be replaced with a call to flush().

2. The MultipartPost classes do not have any logging in them.  We should add 
trace statements at a minimum.

3. new FilePart(String, File) throws a null pointer exception.

4. The tests in TestPartsNoHost are broken.

I'll attach patches for these fixes in a moment, broken down as much as 
possible."
1,"CookieSpecBase.domainMatch() leaks cookies to 3rd party domainsThe change committed for #32833
<http://issues.apache.org/bugzilla/show_bug.cgi?id=32833> is buggy; it doesn't
match browser behavior and in fact leaks cookies to third party domains. 

To see, try the following:

CookieSpecBase cspec = new CookieSpecBase();
Cookie cookie = new Cookie("".hotmail.com"",""foo"",""bar"",""/"",Integer.MAX_VALUE,false);
cspec.match(""iwanttostealcookiesfromhotmail.com"",80,""/"",false,cookie);

It will return true. Testing in Firefox1.0.4 and IE6 show no such similar
leakage for similar cases. (Indeed, it'd be a headline-making privacy bug if
they were to do this.)

Those browsers do, in my limited testing, behave as desired by the filer of
#32833: a cookie of domain value '.mydomain.com' will be returned to exact host
'mydomain.com' (. However, the fix that was suggested was overbroad.

I suggest instead for CookieSpecBase.domainMatch():

    public boolean domainMatch(final String host, final String domain) {
// BUGGY: matches a '.service.com' cookie to hosts like 'enemyofservice.com'
//        return host.endsWith(domain)
//            || (domain.startsWith(""."") && host.endsWith(domain.substring(1)));
// BETTER: RFC2109, plus matches a '.service.com' cookie to exact host 'service.com'
        return host.equals(domain)
            || (domain.startsWith(""."") 
                    && (host.endsWith(domain)
                            || host.equals(domain.substring(1))));
    }"
1,"Jackrabbit's lucene based query implementation does not check property constraints on the root node.XPath queries of the kind ""/jcr:root[<any property constraint>]"" apparently always match."
0,"Selective disabling of checks in ItemValidatorI would like to be able to selectively disable checks in ItemValidator in the scope of an operation performed through methods of the SessionState class. Doing so would provide simple means for internally modifying (for example) protected items. Currently such modifications must be done 'manually' on the item state level. This approach is very error prone and not very DRY.

With my upcoming patch in place, setting a protected property would look like this:

final Node parent = ...
final Value value = ...
SessionState sessionState = sessionContext.getSessionState();

Property property = sessionState.performUnchecked(new SessionOperation<Property>() {
    public Property perform(SessionContext context) throws RepositoryException {
        return parent.setProperty(""foo"", value);
    }
}, ItemValidator.CHECK_CONSTRAINTS);

That is, users need to have access to the session context in order to disable checks which makes this only usable from inside Jackrabbit. "
0,"Provide means for exception handling for QueryNodeVisitor implementationsCurrently the methods of QueryNodeVisitor do not declare any exceptions. Even though the query tree might be syntactically correct, an implementation might reach a point where it cannot continue (i.e. if it does not support one of the optional query features). For such cases there are currently two solution: 1. throw an unchecked exception or 2. communicate the error state through the visitor using the data object passed along. 
While I don't like 2. it is still an option. For 1. I'm not sure if this is the right way to go. It might be better to actually throw a checked exception. I therefore created a patch which declares RepositoryException on all visit methods of QueryNodeVisitor. Although the necessary changes in classes using QueryNodeVisitor are trivial, there are quite many of them. 

Any opinions on checked exception with probably breaking (trivially) existing code vs. using not checked exceptions?


"
0,"Small speedups to DocumentsWriterSome small fixes that I found while profiling indexing Wikipedia,
mainly using our own quickSort instead of Arrays.sort.

Testing first 200K docs of Wikipedia shows a speedup from 274.6
seconds to 270.2 seconds.

I'll commit in a day or two."
0,Avoid docFreq calls for non-fulltext queriesLooking up the document frequency for a query terms costs I/O and is only useful for fulltext queries (-> the document frequency has an influence on the relevance of a result node). Simple constraints like: @foo = 'bar' may return a constant value for docFreq.
1,"impl.conn.Wire uses String.getBytes() which depends on the default charsetimpl.conn.Wire uses String.getBytes() which depends on the default charset

The methods 
public void output(final String s)
and
public void input(final String s)

could probably be recoded to avoid this problem, as the output routine uses a StringBuilder."
0,"revise Scorer visitor APICurrently there is an (expert) API in scorer to allow you to take a scorer, and visit its children etc (e.g. booleanquery).

I think we should improve this, so its general to all queries.

The current issues are:
* the current api is hardcoded for booleanquery's Occurs, but we should support other types of children (e.g. disjunctionmax)
* it can be difficult to use the API, because of the amount of generics and the visitor callback API. 
* the current API enforces a DFS traversal when you might prefer BFS instead.
"
0,"Remove deprecated classes in jackrabbit-coresimilar to JCR-2109 i think i would be favorable to get rid of stuff that has been marked deprecated for 1.x releases.
"
0,AbstractQueryTest.evaluateResultOrder() should fail if workspace does not contain enough contentThe method AbstractQueryTest.evaluateResultOrder() currently throws a NotExecutableException if the workspace contains less than two nodes that can be used for ordering. It should rather fail with an error message telling that the workspace does not contain sufficient content to run the test.
0,"[PATCH] fixes for gcj target.I've modified the Makefile so that it compiles with GCJ-4.0.

This involved fixing the CORE_OBJ macro to match the generated jar file as well
as excluding FieldCacheImpl from being used from its .java source (GCJ has
problems with anonymous inner classes, I guess).

Also, I changed the behaviour of FieldInfos.fieldInfo(int). It depended on
catching IndexOutOfBoundsException exception. I've modified it to test the
bounds first, returning -1 in that case. This helps with gcj since we build with
-fno-bounds-check.

I compiled with;

GCJ=gcj-4.0 GCJH=gcjh-4.0 GPLUSPLUS=g++-4.0 ant clean gcj

patch to follow."
0,"Make FieldSelector usable from Searchable Seems reasonable that you would want to be able to specify a FieldSelector from Searchable because many systems do not use IndexSearcher (where you can get a Reader), but instead use Searchable or Searcher so that Searchers and MultiSearchers can be used in a polymorphic manner."
1,"BasicOperations.concatenate creates invariantsI started writing a test for LUCENE-2716, and i found a problem with BasicOperations.concatenate(Automaton, Automaton):
it creates automata with invariant representation (which should never happen, unless you manipulate states/transitions manually).

strangely enough the BasicOperations.concatenate(List<Automaton>) does not have this problem.
"
1,"AccessControlProvider#getEffectivePolicies for a set of principals does not include repo-level acas of JCR-2774 the resource based ac implementation allows to edit permissions for repository level operations.
however, ACLProvider#getEffectivePolicies(Set<Principal>, CompiledPermissions) does not include the repo level AC
in the result set due to a missing test for regular acl OR repo-level acl."
0,"Default namespaces in JackrabbitNodeTypeManager.registerNodetypesIt would be nice if it wasn't necessary to always specify all the namespaces in node type definition files passed to JackrabbitNodeTypeManager.registerNodeTypes(). The node type parsers should by default use the persistent namespace mappings, but allow custom mappigns to be specified in the parsed node type definition files."
0,"URI uses  sun.security.action.GetPropertyActionURI uses a sun.* class but should not.  Use of this class should be removed.

Reported my Mark Wilcox"
0,"Allow to disable referential integrity checking for workspaceSome operations like clone, remove operating on huge subtree of nodes requires a lot of memory. To copy, clone, remove subtree all nodes are loaded into transient spaces. It allows such operations to be transactional, from other side it requires a lot of heap size and this memory size is directly dependent on the size of subtree (number of nodes). In result of this in some cases it is impossible to make such operations in one step. In our environment sometimes 1 GB of java heap is not enough to succesfully clone subtree  from one workspace to another.

You can always clone (copy, remove) tree in chunks, but if you have references between subtrees such approach fails. Possibilty of temporary disabling referential integrity checking for experienced JCR user could be very usefull then.

Another use case is to allow to clone selected subtrees of the whole structure between worskpaces. In our application we need to clone only some selected subtrees from one workspace to another. But we can not do that because of existing references. We need to clone the whol estructure first, then remove all unwanted nodes, which is really time expensive and memory consuming.
"
0,"GData Server MileStone 1 RevisionSome Improvements to the GData Server.
CRUD actions for Entries implemented / tested 
StorageComponent storing entries / feeds / users
Dynamic Feed elements like links added.
Decoupled all server components (storage / ReqeustHandler etc) using lookup service

Added some JavaDoc "
1,"Repository holds onto Session instance after logout
After a call to Session.logout the Repository instance's activeSession map still holds a reference to the session. This causes a problem when trying to unlock nodes locked by another session, the addLockToken method rejects the lock token.

Looking at the code in Session.logout, it tries to notify SessionListeners about the logout but Repository, which implements the SessionListener interface and will remove a session on logout, doesn't register with the Session to receive the logout notification.
"
0,"JcrRemotingServlet should interpolate system properties in the home init-paramFor deployment scenarios where the same Jackrabbit WAR file is deployed multiple times on the same server with the same current working directory, it is useful to have the home init-param support system property interpolation."
0,"New Jackrabbit site skinSome time ago Michael Eppelheimer from Day created a new skin for the Jackrabbit web site, and I've now streamlined it a bit and integrated it with the Maven site build mechanism.

The templates should be easy to adapt also for Confluence when we get around to that migration."
1,"Cannot move a first-level nodeGiven /nodeA,
session.move(""/nodeA"", ""/nodeB"")

throws this exception:

javax.jcr.PathNotFoundException: no ancestor at degree 1: {}
	at org.apache.jackrabbit.spi.commons.name.PathFactoryImpl$PathImpl.getAncestor(PathFactoryImpl.java:481)
	at org.apache.jackrabbit.core.retention.RetentionRegistryImpl.hasEffectiveRetention(RetentionRegistryImpl.java:291)
	at org.apache.jackrabbit.core.ItemValidator.hasRetention(ItemValidator.java:426)
	at org.apache.jackrabbit.core.ItemValidator.checkCondition(ItemValidator.java:328)
	at org.apache.jackrabbit.core.ItemValidator.checkRemove(ItemValidator.java:281)
	at org.apache.jackrabbit.core.SessionImpl.move(SessionImpl.java:1075)
	at org.apache.jackrabbit.core.MoveAtRootTest.testMoveAtRoot(MoveAtRootTest.java:54)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at org.apache.jackrabbit.test.AbstractJCRTest.run(AbstractJCRTest.java:456)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)

"
0,"TermVectorMapper.setDocumentNumber()Passes down the index of the document whose term vector is currently beeing mapped, once for each top level call to a term vector reader.  

See http://www.nabble.com/Allowing-IOExceptions-in-TermVectorMapper--tf4687704.html#a13397341"
1,"jackrabbit wrongly think nodetype is changed on nodetype re-registrationWhen trying node type re-registration with jackrabbit 2.0, it wrongly detects a nodetype as having changed, with non-trivial changes. Example nodetype definition;

[nen:profile] > mix:referenceable mixin orderable
- nen:dn (string)
- nen:cn (string)
- * (string)
+ * multiple

Exception on nodetype re-registration;

javax.jcr.RepositoryException: The following nodetype change contains
non-trivial changes.Up until now only trivial changes are supported.
(see javadoc for org.apache.jackrabbit.core.nodetype.NodeTypeDefDiff):
org.apache.jackrabbit.core.nodetype.NodeTypeDefDiff[
       nodeTypeName={http://netenviron.com/nen/1.0}profile,
       mixinFlagDiff=NONE,
       supertypesDiff=NONE,
       propertyDifferences=[
               org.apache.jackrabbit.core.nodetype.NodeTypeDefDiff$PropDefDiff[itemName={http://netenviron.com/nen/1.0}dn,
type=TRIVIAL, operation=MODIFIED],
               org.apache.jackrabbit.core.nodetype.NodeTypeDefDiff$PropDefDiff[itemName={http://netenviron.com/nen/1.0}cn,
type=TRIVIAL, operation=MODIFIED],
               org.apache.jackrabbit.core.nodetype.NodeTypeDefDiff$PropDefDiff[itemName={}*,
type=TRIVIAL, operation=MODIFIED]
       ],
       childNodeDifferences=[
               org.apache.jackrabbit.core.nodetype.NodeTypeDefDiff$ChildNodeDefDiff[itemName={}*,
type=MAJOR, operation=REMOVED],
               org.apache.jackrabbit.core.nodetype.NodeTypeDefDiff$ChildNodeDefDiff[itemName={}*,
type=TRIVIAL, operation=ADDED]
       ]
]

       at org.apache.jackrabbit.core.nodetype.NodeTypeRegistry.reregisterNodeType(NodeTypeRegistry.java:442)
       at org.apache.jackrabbit.core.nodetype.NodeTypeRegistry.reregisterNodeType(NodeTypeRegistry.java:363)
       at org.apache.jackrabbit.core.nodetype.NodeTypeManagerImpl.registerNodeTypes(NodeTypeManagerImpl.java:589)
       at org.apache.jackrabbit.commons.cnd.CndImporter.registerNodeTypes(CndImporter.java:118)
       at com.netenviron.content.manager.SessionManager.checkRepositorySchema(SessionManager.java:355)
       at com.netenviron.content.manager.SessionManager.afterPropertiesSet(SessionManager.java:199)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1288)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1257)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:438)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383)
       at java.security.AccessController.doPrivileged(Native Method)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353)
       at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245)
       at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169)
       at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242)
       at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
       at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:269)
       at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:104)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1172)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:940)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:437)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383)
       at java.security.AccessController.doPrivileged(Native Method)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353)
       at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245)
       at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169)
       at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242)
       at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
       at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:269)
       at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:104)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1172)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:940)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:437)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383)
       at java.security.AccessController.doPrivileged(Native Method)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353)
       at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245)
       at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169)
       at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242)
       at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
       at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1223)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:582)
       at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:438)
       at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:214)
       at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:189)
       at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:143)
       at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:614)
       at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:572)
       at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement.inject(AutowiredAnnotationBeanPostProcessor.java:496)
       at org.springframework.beans.factory.annotation.InjectionMetadata.injectMethods(InjectionMetadata.java:87)
       at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:250)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:928)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:437)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383)
       at java.security.AccessController.doPrivileged(Native Method)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353)
       at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245)
       at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169)
       at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242)
       at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
       at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:269)
       at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:104)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1172)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:940)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:437)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:383)
       at java.security.AccessController.doPrivileged(Native Method)
       at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353)
       at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:245)
       at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:169)
       at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:242)
       at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
       at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:299)
       at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:955)
       at org.springframework.context.support.AbstractApplicationContext.registerListeners(AbstractApplicationContext.java:712)
       at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:366)
       at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:261)
       at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:199)
       at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:45)
       at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3972)
       at org.apache.catalina.core.StandardContext.start(StandardContext.java:4467)
       at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791)
       at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771)
       at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:526)
       at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:905)
       at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:740)
       at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:500)
       at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1345)
       at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:303)
       at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
       at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1337)
       at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1601)
       at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1610)
       at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1590)
       at java.lang.Thread.run(Thread.java:637)
"
0,Exclude JavaCC-generated code from static analysisThe JavaCC-generated code we have in spi-commons should be excluded from static analysis done by tools like Sonar.
1,"CachingHttpClient returns a 411 respones when executing a POST (HttpPost) request The CachingHttpClient validates requests prior executing them, by calling RequestProtocolCompliance.requestIsFatallyNonCompliant(..).

When executing an HttpPost, this method considers the request is invalid because it does not contain (yet) a content-length header. Indeed, I observed that this header is generated at the time the DefaultHttpClient fires the request.

NB: i'm using the Cache 4.1-alpha2 plugged over the HttpClient 4.0.1-final. I can't use the latest version for both because I need to rely on a stable version if there's any. I would be curious to know if we get the same behaviour in 4.1...

Anyway, I would see two fixes for that issue:
- make HttpPost set the content-length at the time the entity is set,
- or remove the validation step on the CachingHttpClient side.
"
0,HttpClient javadocs need improving.. patch coming.
1,NPE in ConsolidatingChangeLog for id base NodeIdConsolidatingChangeLog does not guard guard against null in the path value of a NodeId. 
0,"optimize fuzzytermsenum per-segmentwe can make fuzzyquery about 3% faster by not creating DFA(s) for each segment.

creating the DFAs is still somewhat heavy: i can address this here too, but this is easy."
0,"Documentation for tii and tis files seems to be out of sync with codeThe documentation on the .tii file in fileformats.xml seems to be out of sync
with the actual code in TermInfosReader.java.

Specifically, the docs for the TermInfosIndex file seems to leave out several
fields that are read from the file in the readIndex() method (well, specifically
they're read in by the SegmentTermEnum constructor, but you get the idea)."
0,"Documentation improvements for 1.9 releaseI've poked arround the 1.9-rc1 builds and noticed a few simple documentation things that could be cleaned up, a patch will follow that...

1) Adds some additional info to the README.txt
2) Updates the version info in queryparsersyntax.xml and fileformats.html, and advises people 
     with older versions how to find the correct documentation for their version
3) Builds javadocs for all of the contrib modules (the list was incomplete)"
0,"Create org.apache.jackrabbit.core.idI'd like to create a separate package for the identifier interfaces and classes in jackrabbit-core. Currently all the identifiers are in org.apache.jackrabbit.core, which makes almost all the other packages have dependencies to o.a.j.core and causes trouble for various package-level code quality and dependency analysis tools.

For now the package would contain the ItemId, NodeId, and PropertyId classes."
0,"Move tika-parsers dependency to deployment packagesAs discussed on the mailing list, it would be better if the tika-parsers dependency (and all the parser libraries it pulls in transitively) was included in our deployment packages but not directly in jackrabbit-core. This would make it easier for people to set up custom lightweight deployments with no or only partial full text extraction functionality.

To do this we'll first need to wait for Tika 0.9, as we currently have a custom PDFParser class in jackrabbit-core as a workaround to a problem in Tika 0.8.

At the same time we should do a more thorough review of the transitive parser dependencies we include. At least the rome and bouncycastle libraries were flagged as potentially unnecessary."
0,"TermScorer caches values unnecessarilyTermScorer aggressively caches the doc and freq of 32 documents at a time for each term scored.  When querying for a lot of terms, this causes a lot of garbage to be created that's unnecessary.  The SegmentTermDocs from which it retrieves its information doesn't have any optimizations for bulk loading, and it's unnecessary.

In addition, it has a SCORE_CACHE, that's of limited benefit.  It's caching the result of a sqrt that should be placed in DefaultSimilarity, and if you're only scoring a few documents that contain those terms, there's no need to precalculate the SQRT, especially on modern VMs.

Enclosed is a patch that replaces TermScorer with a version that does not cache the docs or feqs.  In the case of a lot of queries, that saves 196 bytes/term, the unnecessary disk IO, and extra SQRTs which adds up."
1,"Suggested Patches to MultiPhraseQuery and QueryTermExtractor (for use with HighLighter)I encountered a problem with the Highlighter, where it was not recognizing MultiPhraseQuery.
To fix this, I developed the following two patches:

=====================================================
1. Addition to org.apache.lucene.search.MultiPhraseQuery:

Add the following method:

/** Returns the set of terms in this phrase. */
public Term[] getTerms() {
  ArrayList allTerms = new ArrayList();
  Iterator iterator = termArrays.iterator();
  while (iterator.hasNext()) {
    Term[] terms = (Term[])iterator.next();
    for (int i = 0, n = terms.length; i < n; ++i) {
      allTerms.add(terms[i]);
    }
  }
  return (Term[])allTerms.toArray(new Term[0]);
}

=====================================================
2. Patch to org.apache.lucene.search.highlight.QueryTermExtractor:

a) Add the following import:
import org.apache.lucene.search.MultiPhraseQuery;

b) Add the following code to the end of the getTerms(...) method:
      else  if(query instanceof MultiPhraseQuery)
              getTermsFromMultiPhraseQuery((MultiPhraseQuery) query, terms, fieldName);
  }

c) Add the following method:
 private static final void getTermsFromMultiPhraseQuery(MultiPhraseQuery query, HashSet terms, String fieldName)
 {
   Term[] queryTerms = query.getTerms();
   int i;

   for (i = 0; i < queryTerms.length; i++)
   {
       if((fieldName==null)||(queryTerms[i].field()==fieldName))
       {
           terms.add(new WeightedTerm(query.getBoost(),queryTerms[i].text()));
       }
   }
 }


=====================================================

Can the team update the repository?

Thanks
Michael Harhen "
0,Remaining contrib testcases should use Version based ctors instead of deprecated onesMany testcases in contrib use deprecated ctors for WhitespaceTokenizer / Analyzer etc.
1,"Group#getMembers may list inherited members multiple timesi just happen to detect the following regression that seems to be introduces quite a while ago:

Group#getMembers is defined to return all group members including those inherited by another group being member of that group.

Example:
User t
Group a : t is declared member
Group b : t is declared member
Group c : a, b are declared members

The expected result of Group.getMembers was: a, b and t.

What is currently happening is that t is included twice in the returned iterator.
Quickly testing on jackrabbit 2.0 revealed that this used to work before...

I didn't carefully check when that bug has been introduced but the the refactoring of the membership
collections seems to be a possible culprit.

"
1,"Handle URIs with path component nullHttpClient does not handle URIs with path component null (e.g. http://google.com) the same as path component '/'. This results e.g. in a ProtocolException ""The server failed to respond with a valid HTTP response""."
1,Session holds LockToken after removeLockToken in XA Environment
0,Remove deprecated Field.Store.COMPRESSAlso remove FieldForMerge and related code.
1,"HttpOptions.getAllowedMethods expects single Allow headerIn client.methods.HttpOptions.getAllowMethods(), a single Allow header is parsed to obtain the result. Since the value is a comma-separated list, servers can optionally return the values in multiple headers. HttpMethod.getHeaders(name) should be used instead of .getFirstHeader(name).
"
0,Remove remaining deprecations from indexer package
1,"Node.getPath() will corrupt the sessionWhen calling Node.getPath() anytime, no mather if its before or after save, and when deleting nodes, the internal reference points to the wrong nodes. 
The attached test will always fail with a javax.jcr.RepositoryException: /: cannot remove root node. 
We have seen other configurations where a node suddenly behaves as the another node that has references and throw a reference exception, and yet other configurations where the node we though we deleted still exists, and another node has now disappeared.

I do not know what causes the bug,a good bet is perhaps the CachingHierarchyManager?. It was not present in Jackrabbit 1.0.1, but was introduced in 1.1.

Have also tested the latest release: 1.2.2, and the bug is still present there.
"
1,"BundleFsPersistenceManager has no property called: minBlobSize2008-04-03 16:48:51,ERROR,org.apache.jackrabbit.core.RepositoryImpl,Thread-237 failed to start Repository: Cannot instantiate persistence manager org.apache.jackrabbit.core.persistence.bundle.BundleFsPersistenceManager: The bean of type: org.apache.jackrabbit.core.persistence.bundle.BundleFsPersistenceManager has no property called: minBlobSize
javax.jcr.RepositoryException: Cannot instantiate persistence manager org.apache.jackrabbit.core.persistence.bundle.BundleFsPersistenceManager: The bean of type: org.apache.jackrabbit.core.persistence.bundle.BundleFsPersistenceManager has no property called: minBlobSize: The bean of type: org.apache.jackrabbit.core.persistence.bundle.BundleFsPersistenceManager has no property called: minBlobSize
	at org.apache.jackrabbit.core.RepositoryImpl.createPersistenceManager(RepositoryImpl.java:1176)
	at org.apache.jackrabbit.core.RepositoryImpl.createVersionManager(RepositoryImpl.java:390)
	at org.apache.jackrabbit.core.RepositoryImpl.<init>(RepositoryImpl.java:294)
	at org.apache.jackrabbit.core.RepositoryImpl.create(RepositoryImpl.java:557)
	at pps.jcr.util.RepositoryManager.createRepository(RepositoryManager.java:117)
	at pps.jcr.util.RepositoryManager.startRepository(RepositoryManager.java:43)
	at pps.jcr.ejb.session.JcrUtilFacade.startRepository(JcrUtilFacade.java:62)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at com.sun.enterprise.security.application.EJBSecurityManager.runMethod(EJBSecurityManager.java:1067)
	at com.sun.enterprise.security.SecurityUtil.invoke(SecurityUtil.java:176)
	at com.sun.ejb.containers.BaseContainer.invokeTargetBeanMethod(BaseContainer.java:2895)
	at com.sun.ejb.containers.BaseContainer.intercept(BaseContainer.java:3986)
	at com.sun.ejb.containers.EJBLocalObjectInvocationHandler.invoke(EJBLocalObjectInvocationHandler.java:197)
	at com.sun.ejb.containers.EJBLocalObjectInvocationHandlerDelegate.invoke(EJBLocalObjectInvocationHandlerDelegate.java:127)
	at $Proxy181.startRepository(Unknown Source)
	at pps.jcr.web.JcrLifecycleListener.contextInitialized(JcrLifecycleListener.java:55)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4523)
	at org.apache.catalina.core.StandardContext.start(StandardContext.java:5184)
	at com.sun.enterprise.web.WebModule.start(WebModule.java:326)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:973)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:957)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:688)
	at com.sun.enterprise.web.WebContainer.loadWebModule(WebContainer.java:1584)
	at com.sun.enterprise.web.WebContainer.loadWebModule(WebContainer.java:1222)
	at com.sun.enterprise.web.WebContainer.loadJ2EEApplicationWebModules(WebContainer.java:1147)
	at com.sun.enterprise.server.TomcatApplicationLoader.doLoad(TomcatApplicationLoader.java:141)
	at com.sun.enterprise.server.AbstractLoader.load(AbstractLoader.java:244)
	at com.sun.enterprise.server.ApplicationManager.applicationDeployed(ApplicationManager.java:336)
	at com.sun.enterprise.server.ApplicationManager.applicationDeployed(ApplicationManager.java:210)
	at com.sun.enterprise.server.ApplicationManager.applicationDeployed(ApplicationManager.java:645)
	at com.sun.enterprise.admin.event.AdminEventMulticaster.invokeApplicationDeployEventListener(AdminEventMulticaster.java:928)
	at com.sun.enterprise.admin.event.AdminEventMulticaster.handleApplicationDeployEvent(AdminEventMulticaster.java:912)
	at com.sun.enterprise.admin.event.AdminEventMulticaster.processEvent(AdminEventMulticaster.java:461)
	at com.sun.enterprise.admin.event.AdminEventMulticaster.multicastEvent(AdminEventMulticaster.java:176)
	at com.sun.enterprise.admin.server.core.DeploymentNotificationHelper.multicastEvent(DeploymentNotificationHelper.java:308)
	at com.sun.enterprise.deployment.phasing.DeploymentServiceUtils.multicastEvent(DeploymentServiceUtils.java:226)
	at com.sun.enterprise.deployment.phasing.ServerDeploymentTarget.sendStartEvent(ServerDeploymentTarget.java:298)
	at com.sun.enterprise.deployment.phasing.ApplicationStartPhase.runPhase(ApplicationStartPhase.java:132)
	at com.sun.enterprise.deployment.phasing.DeploymentPhase.executePhase(DeploymentPhase.java:108)
	at com.sun.enterprise.deployment.phasing.PEDeploymentService.executePhases(PEDeploymentService.java:919)
	at com.sun.enterprise.deployment.phasing.PEDeploymentService.start(PEDeploymentService.java:591)
	at com.sun.enterprise.deployment.phasing.PEDeploymentService.start(PEDeploymentService.java:635)
	at com.sun.enterprise.admin.mbeans.ApplicationsConfigMBean.start(ApplicationsConfigMBean.java:744)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at com.sun.enterprise.admin.MBeanHelper.invokeOperationInBean(MBeanHelper.java:375)
	at com.sun.enterprise.admin.MBeanHelper.invokeOperationInBean(MBeanHelper.java:358)
	at com.sun.enterprise.admin.config.BaseConfigMBean.invoke(BaseConfigMBean.java:464)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:836)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:761)
	at sun.reflect.GeneratedMethodAccessor19.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at com.sun.enterprise.admin.util.proxy.ProxyClass.invoke(ProxyClass.java:90)
	at $Proxy1.invoke(Unknown Source)
	at com.sun.enterprise.admin.server.core.jmx.SunoneInterceptor.invoke(SunoneInterceptor.java:304)
	at com.sun.enterprise.interceptor.DynamicInterceptor.invoke(DynamicInterceptor.java:174)
	at com.sun.enterprise.deployment.client.DeploymentClientUtils.startApplication(DeploymentClientUtils.java:145)
	at com.sun.enterprise.deployment.client.DeployAction.run(DeployAction.java:537)
	at java.lang.Thread.run(Thread.java:619)
Caused by: java.lang.IllegalArgumentException: The bean of type: org.apache.jackrabbit.core.persistence.bundle.BundleFsPersistenceManager has no property called: minBlobSize
	at org.apache.commons.collections.BeanMap.put(BeanMap.java:367)
	at org.apache.jackrabbit.core.config.BeanConfig.newInstance(BeanConfig.java:109)
	at org.apache.jackrabbit.core.RepositoryImpl.createPersistenceManager(RepositoryImpl.java:1171)
	... 64 more

<?xml version=""1.0""?>
<Repository>
    <DataStore class=""org.apache.jackrabbit.core.data.FileDataStore"">
        <param name=""path"" value=""${rep.home}/datastore""/>
        <param name=""minRecordLength"" value=""100""/>
    </DataStore>    
    <FileSystem class=""org.apache.jackrabbit.core.fs.local.LocalFileSystem"">
        <param name=""path"" value=""${rep.home}""/>
    </FileSystem>    
    <Security appName=""Jackrabbit"">
        <AccessManager class=""org.apache.jackrabbit.core.security.SimpleAccessManager"" />
        <LoginModule class=""org.apache.jackrabbit.core.security.SimpleLoginModule"">
            <param name=""anonymousId"" value=""anonymous"" />
        </LoginModule>
    </Security>
    <Workspaces rootPath=""${rep.home}/workspaces"" defaultWorkspace=""default"" />
    <Workspace name=""${wsp.name}"">
        <FileSystem class=""org.apache.jackrabbit.core.fs.local.LocalFileSystem"">
            <param name=""path"" value=""${rep.home}/${wsp.name}""/>
        </FileSystem>            
        <!--  <PersistenceManager class=""org.apache.jackrabbit.core.persistence.obj.ObjectPersistenceManager""/>  -->
        <PersistenceManager class=""org.apache.jackrabbit.core.persistence.bundle.BundleFsPersistenceManager"">
            <param name=""bundleCacheSize"" value=""8""/> 
            <param name=""blobFSBlockSize"" value=""0""/> 
            <param name=""minBlobSize"" value=""4096""/> 
            <param name=""errorHandling"" value=""""/>             
        </PersistenceManager>        
        <SearchIndex class=""org.apache.jackrabbit.core.query.lucene.SearchIndex"">
            <param name=""path"" value=""${wsp.home}/index""/>    
            <param name=""textFilterClasses"" value=""
                   org.apache.jackrabbit.extractor.MsExcelTextExtractor,
                   org.apache.jackrabbit.extractor.MsPowerPointTextExtractor,
                   org.apache.jackrabbit.extractor.MsWordTextExtractor,
                   org.apache.jackrabbit.extractor.PdfTextExtractor,
                   org.apache.jackrabbit.extractor.PlainTextExtractor,
                   org.apache.jackrabbit.extractor.HTMLTextExtractor,
                   org.apache.jackrabbit.extractor.XMLTextExtractor,
                   org.apache.jackrabbit.extractor.RTFTextExtractor,
            org.apache.jackrabbit.extractor.OpenOfficeTextExtractor""/>
        </SearchIndex>
    </Workspace>
    <Versioning rootPath=""${rep.home}/version"">
        <FileSystem class=""org.apache.jackrabbit.core.fs.local.LocalFileSystem"">
            <param name=""path"" value=""${rep.home}/version""/>
        </FileSystem>                
        <!-- <PersistenceManager class=""org.apache.jackrabbit.core.persistence.obj.ObjectPersistenceManager""/> -->
        <PersistenceManager class=""org.apache.jackrabbit.core.persistence.bundle.BundleFsPersistenceManager"">
            <param name=""bundleCacheSize"" value=""8""/> 
            <param name=""blobFSBlockSize"" value=""0""/> 
            <param name=""minBlobSize"" value=""4096""/> 
            <param name=""errorHandling"" value=""""/>             
        </PersistenceManager>            
    </Versioning>
    <SearchIndex class=""org.apache.jackrabbit.core.query.lucene.SearchIndex"">
        <param name=""path"" value=""${rep.home}/index""/>    
        <param name=""textFilterClasses"" value=""
               org.apache.jackrabbit.extractor.MsExcelTextExtractor,
               org.apache.jackrabbit.extractor.MsPowerPointTextExtractor,
               org.apache.jackrabbit.extractor.MsWordTextExtractor,
               org.apache.jackrabbit.extractor.PdfTextExtractor,
               org.apache.jackrabbit.extractor.PlainTextExtractor,
               org.apache.jackrabbit.extractor.HTMLTextExtractor,
               org.apache.jackrabbit.extractor.XMLTextExtractor,
               org.apache.jackrabbit.extractor.RTFTextExtractor,
        org.apache.jackrabbit.extractor.OpenOfficeTextExtractor""/>
    </SearchIndex>    
</Repository>
"
0,"Behavior on hard power shutdownWhen indexing a large number of documents, upon a hard power failure  (e.g. pull the power cord), the index seems to get corrupted. We start a Java application as an Windows Service, and feed it documents. In some cases (after an index size of 1.7GB, with 30-40 index segment .cfs files) , the following is observed.

The 'segments' file contains only zeros. Its size is 265 bytes - all bytes are zeros.
The 'deleted' file also contains only zeros. Its size is 85 bytes - all bytes are zeros.

Before corruption, the segments file and deleted file appear to be correct. After this corruption, the index is corrupted and lost.

This is a problem observed in Lucene 1.4.3. We are not able to upgrade our customer deployments to 1.9 or later version, but would be happy to back-port a patch, if the patch is small enough and if this problem is already solved.
"
0,Remove deprecated methods in CompoundTokenFilters
1,"Token authentication parameters are not loaded from JAAS configuration.token based authentication can be disabled and expiration time set in the login module config.
however, this only works with local auth context but  not when using a jaas configuration."
0,"Add method getID to interface ItemInfoItemInfo is the base for NodeInfo and PropertyInfo both of which declare a method getId with return type NodeId and PropertyId, respectively. With Java 1.5. it is now possible to override a method with a covariant return type. I thus propose to introduce a method getId on ItemInfo with return type ItemId which is the common base type of NodeId and PropertyId."
0,"remove RoutedRequest from ClientRequestDirector interfaceRemove the RoutedRequest from ClientRequestDirector.execute, pass the request and route/target separately."
1,"Session.import() failes to resolve propert property definition in some casesSome Properties get assigned the wrong definiton when imported via SysView XML.

The selecteion of the definition failes under the following condition:
The nodetype contains a multi-valued property and a single-valued
residual property.
If the data to be imported than contains only one value for the multivalued property, it will be created with the residual definition.
A later access to this propertie's values will fail with an ValueFormatException.

Example:
Node-Type
 - Property
  - name: myapp:name
  - mulitple: true
 - Property
  - name: *
  - multible: false

Sysview:
<sv:node sv:name=""somenode"">
  <sv:property sv:name=""jcr:primaryType"" sv:type=""Name"">
   <sv:value>myapp:sampleNt</sv:value> 
  </sv:property>
 
  <sv:property sv:name=""myapp:name"" sv:type=""String"">
   <sv:value>At least I could have multi values</sv:value> 
  </sv:property>
</sv:node>

=> The ""mayapp:name"" will be imported into the residule property."
0,"Permit using different tablespaces for tables and indexes with OracleOracleFileSystem, OraclePersistenceManager and OracleDatabaseJournal already provide a tableSpace parameter to customize the DDL, but the same tablespace is used for both tables and indexes. It is common place to use distinct tablespaces for these. Jackrabbit could provide support for this."
0,Spellchecker uses default IW mergefactor/ramMB settings of 300/10These settings seem odd - I'd like to investigate what makes most sense here.
1,"jcr2spi NodeEntryImpl.getPath() blows stack due to getIndex() calling itselfThe jcr2spi NodeEntryImpl class contains logic that causes getIndex() to call itself.

Calling code:

    Session sess = repo.login(creds);
    Node inboxNode = sess.getRootNode().getNode(""Inbox"");
    inboxNode.getPath(); <== blows stack

Tracing reveals:

    1. NodeEntryImpl.getPath() ultimately calls getIndex()
    2. getIndex() calls NodeState.getDefinition()
    3. which calls ItemDefinitionProviderImpl.getQNodeDefinition(...)
    4. which catches a RepositoryException then calls NodeEntryImpl.getWorkspaceId()
    5. which calls NodeEntryImpl.getWorkspaceIndex()
    6. which calls getIndex() (back to step 2, ad infinitum)

Configuration:
    1. A configuration is loaded specifying in-memory persist manager
    2. Config is wrapped in TransientRepository
    3. that's wrapped in spi2jcr's RepositoryService using default BatchReadConfig
    4. a jcr2spi provider is instantiated that directly couples to spi2jcr
    5. Node in question is created as follows:

    Session sess = repo.login(creds);
    sess.getRootNode().addNode(""Inbox"", ""nt:folder"");
    sess.save();

I guess that's about it.
David"
0,"Exclude system index for queries that restrict the result set to nodetypes not availble in the ""jcr:system"" subtreeWe already have code that is able to decide whether the system index needs to be included in a search or not (see JCR-967). If I execute a query like ""my:app//element(*, my:doc)"" this will only search the workspace index. Unfortunately this is slower than ""//element(*, my:doc)"", since the first query can not be optimized as the second. In our case both queries return the same result set because we use application specific node types. Even though the second query includes the system index it is still faster than the first one. But it could be even faster because it doesn't need to search the system index because nodes with the application specific node type can't be added to the ""jcr:system""-tree and are therefore are added never to the system index (am I right?)."
0,"DateUtils should cache SimpleDateFormatDateUtils create a SimpleDateFormat for each invocation of #formatDate and #parseDate. This can be optimized if SimpleDateFormat instances are cached. Since SimpleDateFormat is not threadsafe, the cache must be threadlocal."
0,"Database Data Store: clean up the codeThere is some unnecessary code in the DbDataStore that should be removed.
Also, some more tests should be added."
0,"Investigate ways to compile the refactored jcr-mapping for Java 1.4The last refactoring of the jcr-mapping project included the annotation based mapping description into the main code based thus requiring compilation with Java 5 or higher.

There are still some use cases, which require Java 1.4. The goal is to investigate, whether it would be possible to define a build profile in the pom, which compiles for 1.4 by ignoring the annotation classes."
1,"CMS fails to cleanly stop threadsWhen you close IW, it waits for (or aborts and then waits for) all running merges.

However, it's wait criteria is wrong -- it waits for the threads to be done w/ their merges, not for the threads to actually die.

CMS already has a sync() method, to wait for running threads, which we can call from CMS.close.  However it has a thread hazard because a MergeThread removes itself from mergeThreads before it actually exits.  So sync() is able to return even while a merge thread is still running.

This was uncovered by LUCENE-2819 on the test case TestCustomScoreQuery.testCustomExternalQuery, though I expect other test cases would show it."
1,"ArrayIndexOutOfBounds Exception on invalid content-lengthIf the server returns an invalid (not parsable to int) content legnth the method
protected int getResponseContentLength() in HttpMethodBase walks off the
end of the Header[] array and throws the ArrayIndexOutOfBoundsException.

The loop at line 687 in HttpMethodBase.java:

   for (int i = headers.length - 1; i >= 0; i++) {

starts at the end of the array, but uses ++ intead of -- and so walks off the
end of the array on the next line if the header is invalid.  If the header is
valid the return statement in the try block succeeds so there is no error.

The fix is simply to change the line to be

   for (int i = headers.length -1; i>=0; i--) {"
0,"GroupImp#getMembers and #getDeclaredMembers should return RangeIteratorfor those cases where the total amount of members can easily be detected/calculated the
implementations of Group#getMembers() and #getDeclaredMembersOf() should return a RangeIterator.

so far i found that Group#declaredMembers() can be easily adjusted for those cases where
the group members are stored in a multivalued property."
0,"Update copyright years in READMEs and NOTICEsThe README.txt files of Jackrabbit components contain copyright lines like this:

    Collective work: Copyright 2007 The Apache Software Foundation.

The year should be updated."
0,"TermVectorAccessor, transparent vector space access This class visits TermVectorMapper and populates it with information transparent by either passing it down to the default terms cache (documents indexed with Field.TermVector) or by resolving the inverted index."
0,"Genericize DirectIOLinuxDir -> UnixDirToday DirectIOLinuxDir is tricky/dangerous to use, because you only want to use it for indexWriter and not IndexReader (searching).  It's a trap.

But, once we do LUCENE-2793, we can make it fully general purpose because then a single native Dir impl can be used.

I'd also like to make it generic to other Unices, if we can, so that it becomes UnixDirectory."
0,new CachingNamespaceResolver introduces dependency from commons-jackrabbit to commons-collectionsnew CachingNamespaceResolver introduces dependency from commons-jackrabbit to commons-collections which is undesried
0,"pass liveDocs Bits down in scorercontext, instead of Weights pulling from the reader Spinoff from LUCENE-1536, this would allow filters to work in a more flexible way (besides just cleaning up)"
1,"Inconsistencies if ""everyone"" Group is created by User Managementcurrently the 'everyone' principal used to define ACEs that apply for all regular users in the repository is hardcoded in the
principal management. this leads to inconsistencies if a group (or user) is created within the user management that has a principal 
name 'everyone'.


"
0,"Scorer.explain is deprecated but abstract, should have impl that throws UnsupportedOperationExceptionSuggest having Scorer implement explain to throw UnsupportedOperationException

right now, i have to implement this method (because its abstract), and javac yells at me for overriding a deprecated method

if the following implementation is in Scorer, i can remove my ""empty"" implementations of explain from my Scorers
{code}
  /** Returns an explanation of the score for a document.
   * <br>When this method is used, the {@link #next()}, {@link #skipTo(int)} and
   * {@link #score(HitCollector)} methods should not be used.
   * @param doc The document number for the explanation.
   *
   * @deprecated Please use {@link IndexSearcher#explain}
   * or {@link Weight#explain} instead.
   */
  public Explanation explain(int doc) throws IOException {
    throw new UnsupportedOperationException();
  }
{code}

best i figure, this shouldn't break back compat (people already have to recompile anyway) (2.9 definitely not binary compatible with 2.4)
"
1,"Test case failure for testConnTimeout[java] There was 1 failure:
     [java] 1)
testConnTimeout(org.apache.commons.httpclient.TestHttpConnection)junit.framework.AssertionFailedError:
Should have timed out
     [java]     at
org.apache.commons.httpclient.TestHttpConnection.testConnTimeout(TestHttpConnection.java:118)
     [java]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
     [java]     at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
     [java]     at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)

This test has been failing for some time.  It is run with the test-local ant target."
0,"Cutover remaining usage of pre-flex APIsA number of places still use the pre-flex APIs.

This is actually healthy, since it gives us ongoing testing of the back compat emulation layer.

But we should at some point cut them all over to flex.  Latest we can do this is 4.0, but I'm not sure we should do them all for 3.1... still marking this as 3.1 to ""remind us"" :)"
0,"Allow to override LockManager creationCurrently, Repository.getLockManager() internally creates a new lock manager if needed.

Jackrabbit should provide an extension point so that a JCR repository that extends it can create a custom lock manager."
0,[patch] remove bogus testcode checks an int to see if it's bigger than MAX_VALUE which is impossible -- removed.
0,"need to add a default constructor for CookieThe Cookie class doesn't have a default (no argument) constructor. This is 
causing problem for some framework which supports marshalling and unmarshalling 
of data types. e.g. a SOAP implementation may need to do this to transfer it 
between the SOAP server and SOAP client. It would be nice to add a default 
constructor, as it won't break anything, follows JavaBean convention, and 
potentially save user some trouble in the future."
1,SearcherManager misses to close IR if manager is closed during reopenif we close SM while there is a thread calling maybReopen() and swapSearcher throws already closed exception we miss to close the searcher / reader.
1,"Mixins as supertypes do not appear to be queryableWhen creating custom nodetypes that contain mixins as the supertype, nodes of the custom type do not appear to be queryable when using statements of the form: //element(*, mixin). Attached are a relatively simple JUnit test and compact type definition that seem to illustrate the problem."
1,"Evict fixed NodePropBundle from cacheThe BundleDbPersistenceManager only stores back fixed NodePropBundles in checkConsistency() but does not invalidate the cache, which may potentially contain a cached version of a NodePropBundle."
1,"SystemSessions created for GarbageCollector are not logged out ofI have a simple garbage collection task that runs periodically. After upgrading to 1.5.5 it started logging a warning shortly after each run:

2009-05-09 03:44:45,480 WARN [org.apache.jackrabbit.core.SessionImpl] - <Unclosed session detected. The session was opened here: >
java.lang.Exception: Stack Trace
	at org.apache.jackrabbit.core.SessionImpl.<init>(SessionImpl.java:239)
	at org.apache.jackrabbit.core.SystemSession.<init>(SystemSession.java:76)
	at org.apache.jackrabbit.core.SystemSession.create(SystemSession.java:64)
	at org.apache.jackrabbit.core.SessionImpl.createDataStoreGarbageCollector(SessionImpl.java:649)

So it's not my session, but an internally created SystemSession.


Code I'm using:
            getTemplate().execute(new JcrCallback()
            {
                public Object doInJcr(Session session)
                    throws IOException, RepositoryException {
                    SessionImpl sessionImpl = (SessionImpl)session;
                    GarbageCollector gc = sessionImpl.createDataStoreGarbageCollector();
                    gc.scan();
                    gc.stopScan();
                    gc.deleteUnused();
                    return null;
                }
            }, true);
"
0,"RFE: Make Credentials SerializableI've been working on upgrading the HtmlUnit library to use HttpClient 4, and I've realized that we could eliminate some hackish internal code if Credentials instances were Serializable. I don't really see a downside, and this would be a huge convenience for us.

The change would involve making the org.apache.http.auth.Credentials interface extend Serializable, and having org.apache.http.auth.BasicUserPrincipal and org.apache.http.auth.NTUserPrincipal implement Serializable (plus serialVersionUIDs where appropriate, I guess)."
1,"spi2dav: Observation's user data not property handledorg.apache.jackrabbit.test.api.observation#GetUserDataTest still fail in the setup jcr2spi - spi2dav(ex) - jcr-server.

"
0,"Expose FilteredTermsEnum from MTQ MTQ#getEnum() is protected and in order to access it you need to be in the o.a.l.search package. 

here is a relevant snipped from the mailing list discussion

{noformat}
getEnum() is protected so it is intended to be called *only* by subclasses (that's the idea behind protected methods). They are also accessible by other classes from the same package, but that's more a Java bug than a feature. The problem with MTQ is that RewriteMethod is a separate *class* and *not a subclass* of MTQ, so the method cannot be called (it can because of the ""java bug"" called from same package). So theoretically it has to be public otherwise you cannot call getEnum().

Another cleaner fix would be to add a protected final method to RewriteMethod that calls this method from MTQ. So anything subclassing RewriteMethod can get the enum from inside the RewriteMethod class which is the ""correct"" way to handle it. Delegating to MTQ is then ""internal"".
{noformat}"
0,"[PATCH] Refactoring of SpanScorerRefactored some common code in next() and skipTo(). 
Removed dependency on score value for next() and skipTo(). 
Passes all current tests at just about the same speed 
as the current version. Added minimal javadoc. 
 
Iirc, there has been some discussion on the dependency of next() 
and skipTo() on the score value, but I don't remember the conclusion. 
In case that dependency should stay in, it can be adapted 
in the refactored code."
0,"TCK: NamespaceRegistryTest#testRegisterNamespace doesn't remove node in new namespaceThe test creates a node in the new namespace, but doesn't remove it.  This prevents tearDown from unregistering the namespace.

Proposal: the test should remove the new node before returning.

--- NamespaceRegistryTest.java  (revision 422074)
+++ NamespaceRegistryTest.java  (working copy)
@@ -138,6 +138,10 @@
  
         testRootNode.addNode(namespacePrefix + "":root"");
         testRootNode.save();
+
+        // Need to remove it here, otherwise teardown can't unregister the NS.
+        testRootNode.getNode(namespacePrefix + "":root"").remove();
+        testRootNode.save();
     }
"
0,"Authorizable#getProperty and #setProperty should deal with relativePath Authorizable#getProperty and #setProperty defines the property to be identified by a name.

The JCR item based implementation could easily deal with relative paths instead and also retrieve or write properties below child
nodes of the rep:Authorizable node."
1,"add workaround for jre breakiterator bugson some inputs, the java breakiterator support will internally crash.

for example: ant test -Dtestcase=TestThaiAnalyzer -Dtestmethod=testRandomStrings -Dtests.seed=-8005471002120855329:-2517344653287596566 -Dtests.multiplier=3"
1,"SimpleSpanFragmenter can create very short fragmentsLine 74 of SimpleSpanFragmenter returns true when the current token is the start of a hit on a span or phrase, thus starting a new fragment. Two problems occur:

- The previous fragment may be very short, but if it contains a hit it will be combined with the new fragment later so this disappears.
- If the token is close to a natural fragment boundary the new fragment will end up very short; possibly even as short as just the span or phrase itself. This is the result of creating a new fragment without incrementing currentNumFrags.

To fix, remove or comment out line 74. The result is that fragments average to the fragment size unless a span or phrase hit is towards the end of the fragment - that fragment is made larger and the following fragment shorter to accommodate the hit."
1,"IndexReader.setNorms is no op if one of the field instances omits normsIf I add two documents to an index w/ same field, and one of them omit norms, then IndexReader.setNorms is no-op. I'll attach a patch w/ test case"
1,"maxFieldLength actual limit is 1 greater than expected value.
// Prepare document.
Document document = new Document();
document.add(new Field(""name"",
            ""pattern oriented software architecture"", Store.NO,
            Index.TOKENIZED, TermVector.WITH_POSITIONS_OFFSETS));

// Set max field length to 2.
indexWriter.setMaxFieldLength(2);

// Add document into index.
indexWriter.addDocument(document, new StandardAnalyzer());

// Create a query.
QueryParser queryParser = new QueryParser(""name"", new StandardAnalyzer());
Query query = queryParser.parse(""software"");

// Search the 3rd term.
Hits hits = indexSearcher.search(query);

Assert.assertEquals(0, hits.length());
// failed. Actual hits.length() == 1, but expect 0."
0,"Remove/deprecate IndexReader.undeleteAllThis API is rather dangerous in that it's ""best effort"" since it can only un-delete docs that have not yet been merged away, or, dropped (as of LUCENE-2010).

Given that it exposes impl details of how Lucene prunes deleted docs, I think we should remove this API.

Are there legitimate use cases....?"
1,"Trouble undeploying jackrabbit-webapp from TomcatWhen testing jackrabbit-webapp for the 1.4 release, I again came across this issue that I've occasionally seen also before, but never qualified enough for a bug report.

The Jackrabbit webapp would deploy without problems, but when I undeploy the webapp Tomcat fails to remove the Derby jar in WEB-INF/lib (I have unpackWARs enabled). This causes problems especially when I have autoDeploy enabled, as Tomcat then deploys the skeleton webapp right after undeployment, and the only way to really get rid of the webapp is to shutdown Tomcat and to manually remove the webapp on the file system.

I suspect that this problem is related to Derby jar being somehow referenced even after the webapp is undeployed, causing Windows to prevent the jar file from being removed.

Unless someone has some bright idea on how to resolve this, I'll consider this a known issue in Jackrabbit 1.4."
0,"JavaCC grammar generation to ${maven.build.dir}/generated-srcCurrently the JavaCC grammars in src/grammar/{xpath,sql} are processed into Java source files in src/java/org/apache/jacrabbit/core/query/{xpath,sql} where we also have normal version controlled source files. This leads to the need to maintain special svn:ignore properties and also the more general issue of mixing manually written and automatically generated source files. Because of this the ""maven clean"" command does not (at the moment) truly restore your source tree to a ""fresh checkout"" state.

I'm proposing (as a wish, you are free to disagree) that the JavaCC grammars be generated into Java files within the Maven build directory. The attached patch modifies the javacc maven goals to generate files into ${maven.build.dir}/generated-src. The modified prepare-filesystem goal also adds the generated source path ${maven.build.dir}/generated-src/main/java into the maven compile set so that the generated sources are included in the normal builds.

PS. There are a couple of JavaCC generated files that have been intentionally modified for Jackrabbit. The ant:delete commands at the end of the jacrabbit:generate-*-parser goals specifically remove these generated files. It would however be nicer if custom modifications would not be needed."
1,"Cluster: Node type register/unregister deadlockA deadlock can occur when two cluster nodes concurrently register or unregister node types.

Reason: 

NodeTypeRegistry.registerNodeTypes is synchronized, and calls eventChannel.registered(ntDefs), which calls AbstractJournal.lockAndSync(), which tries to lock AbstractJournal.rwLock.

On the other hand, AbstractJournal.sync() locks AbstractJournal.rwLock, then calls NodeTypeRecord.process, which calls NodeTypeRegistry.unregisterNodeTypes, which is also synchronized.

Possible solutions: Either 

- NodeTypeRegistry doesn't synchronize on the object when calling a eventChannel method,

- or NodeTypeRegistry locks AbstractJournal.rwLock before synchronizing.

There might be other solutions."
0,"Basic tool for checking & repairing an indexThis has been requested a number of times on the mailing lists.  Most
recently here:

  http://www.gossamer-threads.com/lists/lucene/java-user/53474

I think we should provide a basic tool out of the box.
"
1,"insufficient privilegesHI,
In Jackrabbit  DBStore, On the fly its creating some tables in DB .  But, In our Dev environment we do not have permission for creating tables on the fly. So, I manually inserted all the dll (tables & indexes) before the application start. Although I'm getting the following exception while running application. 

Attached repository.xml.

Below the log.

[11/23/09 11:32:04:405 EST] 0000003a SystemOut     O WARN > org.apache.jackrabbit.core.config.ConfigurationErrorHandler[WebContainer : 3]: Warning parsing the configuration at line 4 using system id file:/usr/local/web/fda/WAS/61x/svdw0047v61fda/installedApps/afda21Network001/osa_registry.ear/osa_registry.war/WEB-INF/cfg/repository.xml: org.xml.sax.SAXParseException: Document root element ""Repository"", must match DOCTYPE root ""null"".
[11/23/09 11:32:04:407 EST] 0000003a SystemOut     O WARN > org.apache.jackrabbit.core.config.ConfigurationErrorHandler[WebContainer : 3]: Warning parsing the configuration at line 4 using system id file:/usr/local/web/fda/WAS/61x/svdw0047v61fda/installedApps/afda21Network001/osa_registry.ear/osa_registry.war/WEB-INF/cfg/repository.xml: org.xml.sax.SAXParseException: Document is invalid: no grammar found.
[11/23/09 11:32:04:977 EST] 0000003a SystemOut     O INFO > org.apache.jackrabbit.core.RepositoryImpl[WebContainer : 3]: Starting repository...
[11/23/09 11:32:05:474 EST] 0000003a SystemOut     O ERROR> org.apache.jackrabbit.core.fs.db.DatabaseFileSystem[WebContainer : 3]: failed to initialize file system
java.sql.SQLException: ORA-01031: insufficient privileges

	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:112)
	at oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:331)
	at oracle.jdbc.driver.T4CTTIoer.processError(T4CTTIoer.java:288)
	at oracle.jdbc.driver.T4C8Oall.receive(T4C8Oall.java:745)
	at oracle.jdbc.driver.T4CStatement.doOall8(T4CStatement.java:210)
	at oracle.jdbc.driver.T4CStatement.executeForRows(T4CStatement.java:961)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:1190)
	at oracle.jdbc.driver.OracleStatement.executeUpdateInternal(OracleStatement.java:1657)
	at oracle.jdbc.driver.OracleStatement.executeUpdate(OracleStatement.java:1626)
	at org.apache.jackrabbit.core.fs.db.OracleFileSystem.checkSchema(OracleFileSystem.java:211)
	at org.apache.jackrabbit.core.fs.db.DatabaseFileSystem.init(DatabaseFileSystem.java:190)
	at org.apache.jackrabbit.core.fs.db.OracleFileSystem.init(OracleFileSystem.java:137)
	at org.apache.jackrabbit.core.config.RepositoryConfigurationParser$2.getFileSystem(RepositoryConfigurationParser.java:762)
	at org.apache.jackrabbit.core.config.RepositoryConfig.getFileSystem(RepositoryConfig.java:666)
	at org.apache.jackrabbit.core.RepositoryImpl.<init>(RepositoryImpl.java:262)
	at org.apache.jackrabbit.core.RepositoryImpl.create(RepositoryImpl.java:621)
	at org.apache.jackrabbit.core.jndi.BindableRepository.createRepository(BindableRepository.java:140)
	at org.apache.jackrabbit.core.jndi.BindableRepository.init(BindableRepository.java:116)
	at org.apache.jackrabbit.core.jndi.BindableRepository.<init>(BindableRepository.java:105)
	at org.apache.jackrabbit.core.jndi.BindableRepositoryFactory.getObjectInstance(BindableRepositoryFactory.java:51)
	at org.apache.jackrabbit.core.jndi.RegistryHelper.registerRepository(RegistryHelper.java:74)
	at com.ssc.soareg.jackrabbit.ContentRepository.<clinit>(ContentRepository.java:71)
	at com.ssc.soareg.jaxr.registry.client.infomodel.ServiceImpl.<init>(ServiceImpl.java:177)
	at com.ssc.soareg.governance.client.SOALifeCycleManagerImpl.saveBusinessServices(SOALifeCycleManagerImpl.java:259)
	at com.ssc.soareg.registry.server.UploadServlet.service(UploadServlet.java:473)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)
	at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1068)
	at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:543)
	at com.ibm.ws.wswebcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:478)
	at com.ibm.ws.webcontainer.webapp.WebApp.handleRequest(WebApp.java:3357)
	at com.ibm.ws.webcontainer.webapp.WebGroup.handleRequest(WebGroup.java:267)
	at com.ibm.ws.webcontainer.WebContainer.handleRequest(WebContainer.java:811)
	at com.ibm.ws.wswebcontainer.WebContainer.handleRequest(WebContainer.java:1455)
	at com.ibm.ws.webcontainer.channel.WCChannelLink.ready(WCChannelLink.java:115)
	at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleDiscrimination(HttpInboundLink.java:454)
	at com.ibm.ws.http.channel.inbound.impl.HttpInboundLink.handleNewInformation(HttpInboundLink.java:383)
	at com.ibm.ws.http.channel.inbound.impl.HttpICLReadCallback.complete(HttpICLReadCallback.java:102)
	at com.ibm.ws.tcp.channel.impl.AioReadCompletionListener.futureCompleted(AioReadCompletionListener.java:165)
	at com.ibm.io.async.AbstractAsyncFuture.invokeCallback(AbstractAsyncFuture.java:217)
	at com.ibm.io.async.AsyncChannelFuture.fireCompletionActions(AsyncChannelFuture.java:161)
	at com.ibm.io.async.AsyncFuture.completed(AsyncFuture.java:136)
	at com.ibm.io.async.ResultHandler.complete(ResultHandler.java:195)
	at com.ibm.io.async.ResultHandler.runEventProcessingLoop(ResultHandler.java:784)
	at com.ibm.io.async.ResultHandler$2.run(ResultHandler.java:873)
	at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:1473)
"
0,Fix javadocs after deprecation removalThere are a lot of @links in Javadocs to methods/classes that no longer exist. javadoc target prints tons of warnings. We should fix that.
0,Cut over SpanQuery#getSpans to AtomicReaderContextFollowup from LUCENE-2831 - SpanQuery#getSpans(IR) seems to be the last remaining artifact that doesn't enforce per-segments context while it should really work on AtomicReaderContext (SpanQuery#getSpans(AtomicReaderContext) instead of a naked IR.
0,"Some improvements to CMSWhile running optimize on a large index, I've noticed several things that got me to read CMS code more carefully, and find these issues:

* CMS may hold onto a merge if maxMergeCount is hit. That results in the MergeThreads taking merges from the IndexWriter until they are exhausted, and only then that blocked merge will run. I think it's unnecessary that that merge will be blocked.

* CMS sorts merges by segments size, doc-based and not bytes-based. Since the default MP is LogByteSizeMP, and I hardly believe people care about doc-based size segments anymore, I think we should switch the default impl. There are two ways to make it extensible, if we want:
** Have an overridable member/method in CMS that you can extend and override - easy.
** Have OneMerge be comparable and let the MP determine the order (e.g. by bytes, docs, calibrate deletes etc.). Better, but will need to tap into several places in the code, so more risky and complicated.

On the go, I'd like to add some documentation to CMS - it's not very easy to read and follow.

I'll work on a patch."
0,"First cut at column-stride fields (index values storage)I created an initial basic impl for storing ""index values"" (ie
column-stride value storage).  This is still a work in progress... but
the approach looks compelling.  I'm posting my current status/patch
here to get feedback/iterate, etc.

The code is standalone now, and lives under new package
oal.index.values (plus some util changes, refactorings) -- I have yet
to integrate into Lucene so eg you can mark that a given Field's value
should be stored into the index values, sorting will use these values
instead of field cache, etc.

It handles 3 types of values:

  * Six variants of byte[] per doc, all combinations of fixed vs
    variable length, and stored either ""straight"" (good for eg a
    ""title"" field), ""deref"" (good when many docs share the same value,
    but you won't do any sorting) or ""sorted"".

  * Integers (variable bit precision used as necessary, ie this can
    store byte/short/int/long, and all precisions in between)

  * Floats (4 or 8 byte precision)

String fields are stored as the UTF8 byte[].  This patch adds a
BytesRef, which does the same thing as flex's TermRef (we should merge
them).

This patch also adds basic initial impl of PackedInts (LUCENE-1990);
we can swap that out if/when we get a better impl.

This storage is dense (like field cache), so it's appropriate when the
field occurs in all/most docs.  It's just like field cache, except the
reading API is a get() method invocation, per document.

Next step is to do basic integration with Lucene, and then compare
sort performance of this vs field cache.

For the ""sort by String value"" case, I think RAM usage & GC load of
this index values API should be much better than field caache, since
it does not create object per document (instead shares big long[] and
byte[] across all docs), and because the values are stored in RAM as
their UTF8 bytes.

There are abstract Writer/Reader classes.  The current reader impls
are entirely RAM resident (like field cache), but the API is (I think)
agnostic, ie, one could make an MMAP impl instead.

I think this is the first baby step towards LUCENE-1231.  Ie, it
cannot yet update values, and the reading API is fully random-access
by docID (like field cache), not like a posting list, though I
do think we should add an iterator() api (to return flex's DocsEnum)
-- eg I think this would be a good way to track avg doc/field length
for BM25/lnu.ltc scoring.
"
0,"[CONTRIB] SSL authenticating protocol socket factoryHere's the long promised SSL client/server authenticating socket factory. This
socket factory can be used to enforce client/server authentication during the
SSL context negotiation. Let me know what you think. Please, please someone
proof-read the accompanying javadocs and let me know if the text is comprehensible 

I have also tweaked EasySSLProtocolSocketFactory a little

The patch is against HTTPCLIENT_2_0_BRANCH

Oleg"
0,IndexWriter.deleteDocuments bugIndexWriter.deleteDocuments() fails random testing
0,"Promote solr's PrefixFilter into Java Lucene's coreSolr's PrefixFilter class is not specific to Solr and seems to be of interest to core lucene users (PyLucene in this case).
Promoting it into the Lucene core would be helpful."
1,"problems with IR's readerFinishedListenerThere are two major problems:
1. The listener api does not really apply all indexreaders. for example segmentreaders dont fire it on close, only segmentcorereaders. this is wrong, a segmentcorereader is *not* an indexreader. Furthermore, if you register it on a top-level reader you get events for anything under the reader tree (sometimes, unless they are segmentreaders as mentioned above, where it doesnt work correctly at all).
2. Furthermore your listener is 'passed along' in a viral fashion from clone() and reopen(). This means for example, if you are trying to listen to readers in NRT search you are just accumulating reader listeners, all potentially keeping references to old indexreaders (because, in order to deal with #1 your listener must 'keep' a reference to the IR it was registered on, so it can check if thats *really* the one).

We should discuss how to fix #1. 

I will create a patch for #2 shortly and commit it, its just plain wrong.
"
1,"httpClient failed to reconnect after keep-alive connection timed outDescription:

When using httpClient with https tunnelling througha proxy server, after keep-
alive connection timed out on server side.  The httpClient code was unable to 
establish the connection again.

Cause:

The HttpMethodBase.processRequest's retry loop retries the connection without 
going through the ""CONNECT"" request to the proxy server.  Our proxy server 
returns 407 error code.  In case of tunnelling connection, proper reconnect 
should be done by first doing the ""CONNECT"" sequence to get authenticated 
throught the proxy.

Temp fix and Work around:

We implemented some work around to do the retry from the application layer.  In 
order to detect the situation, we have to rely on the error message contained 
in the HttpRecoverableException.  We are checking the text ""Connection aborted 
by peer: socket write error"".  We also have to modify the HttpMethodBase code 
to throw the HttpRecoverableException out to the application."
1,"ConstraintSplitter.getSelectorNames doesn't support FullTextSearch constraintsThe constraint type FullTextSearch is missing in the tested types in org.apache.jackrabbit.core.query.lucene.join.ConstraintSplitter.getSelectorNames(Constraint) method. Submitting a QOM query with a full-text constraint throws a javax.jcr.UnsupportedRepositoryOperationException, while the repository reports supporting such queries : session.getRepository().getDescriptorValue(Repository.QUERY_FULL_TEXT_SEARCH_SUPPORTED).getBoolean() returns TRUE.

Typical stack trace :

javax.jcr.UnsupportedRepositoryOperationException: Unknown constraint type: CONTAINS(r.[jcr:title], 'REGA -APA')
	org.apache.jackrabbit.core.query.lucene.join.ConstraintSplitter.getSelectorNames(ConstraintSplitter.java:177)
	org.apache.jackrabbit.core.query.lucene.join.ConstraintSplitter.getSelectorNames(ConstraintSplitter.java:195)
	org.apache.jackrabbit.core.query.lucene.join.ConstraintSplitter.getSelectorNames(ConstraintSplitter.java:157)
	org.apache.jackrabbit.core.query.lucene.join.ConstraintSplitter.split(ConstraintSplitter.java:106)
	org.apache.jackrabbit.core.query.lucene.join.ConstraintSplitter.split(ConstraintSplitter.java:104)
	org.apache.jackrabbit.core.query.lucene.join.ConstraintSplitter.<init>(ConstraintSplitter.java:80)
	org.apache.jackrabbit.core.query.lucene.join.QueryEngine.execute(QueryEngine.java:162)
	org.apache.jackrabbit.core.query.lucene.join.QueryEngine.execute(QueryEngine.java:147)
	org.apache.jackrabbit.core.query.QueryObjectModelImpl.execute(QueryObjectModelImpl.java:114)"
0,"Sandbox remaining contrib queriesIn LUCENE-3271, I moved the 'good' queries from the queries contrib to new destinations (primarily the queries module).  The remnants now need to find their home.  As suggested in LUCENE-3271, these classes are not bad per se, just odd.  So lets create a sandbox contrib that they and other 'odd' contrib classes can go to.  We can then decide their fate at another time."
1,"Startup fails if clustered jackrabbit is upgrade from 1.4.4 to 1.5This is closely related to JCR-1087

The call to checkLocalRevisionSchema() is too late because preapreStatements() already uses the LOCAL_REVISIONS table.

checkLocalRevisionSchema() should be called in checkSchema()"
0,"Rename Field.Index.UN_TOKENIZED/TOKENIZED/NO_NORMSThere is confusion about these current Field options and I think we
should rename them, deprecating the old names in 2.4/2.9 and removing
them in 3.0.  How about this:

{code}
TOKENIZED --> ANALYZED
UN_TOKENIZED --> NOT_ANALYZED
NO_NORMS --> NOT_ANALYZED_NO_NORMS
{code}

Should we also add ANALYZED_NO_NORMS?

Spinoff from here:

    http://mail-archives.apache.org/mod_mbox/lucene-java-user/200808.mbox/%3C48a3076a.2679420a.1c53.ffffa5c4%40mx.google.com%3E
    "
0,"Unclosed threads in JackrabbitThe Tomcat integration test added in JCR-2831 shows the following warnings about Jackrabbit threads that remain in place even after the repository has been closed:

08-Dec-2010 12:14:58 org.apache.catalina.loader.WebappClassLoader clearReferencesThreads
SEVERE: The web application [] appears to have started a thread named [Timer-1] but has failed to stop it. This is very likely to create a memory leak.
08-Dec-2010 12:14:58 org.apache.catalina.loader.WebappClassLoader clearReferencesThreads
SEVERE: The web application [] appears to have started a thread named [DynamicPooledExecutor] but has failed to stop it. This is very likely to create a memory leak.
08-Dec-2010 12:14:58 org.apache.catalina.loader.WebappClassLoader clearReferencesThreads
SEVERE: The web application [] appears to have started a thread named [Timer-2] but has failed to stop it. This is very likely to create a memory leak.

It would be best to close all such background threads even if they are singleton daemon threads and thus unlikely to cause trouble when left unattended."
0,"Field tokenStream should be usable with stored fields.Field.tokenStream should be usable for indexing even for stored values.  Useful for many types of pre-analyzed values (text/numbers, etc)
http://search.lucidimagination.com/search/document/902bad4eae20bdb8/field_tokenstreamvalue"
0,OpenDocument files missing in mimetypes.propertiesThe mime-types from Oasis OpenDocument are missing from mimetypes.properties file. 
1,"NullPointerException in CompoundFileReaderHello,

we have got a NullPointerException in the Lucene-class CompoundFileReader:

java.lang.NullPointerException
        at
org.apache.lucene.index.CompoundFileReader.<init>(CompoundFileReader.java:94)
        at org.apache.lucene.index.SegmentReader.<init>(SegmentReader.java:97)
        at org.apache.lucene.index.IndexWriter.mergeSegments(IndexWriter.java:466)
        at
org.apache.lucene.index.IndexWriter.flushRamSegments(IndexWriter.java:426)
        at org.apache.lucene.index.IndexWriter.close(IndexWriter.java:236)

Lucene has been working fine for some days, until this NullPointerException
has occured which has corrupted the complete index.

The reason for this NullPointerException is the following Code 
in Lucenes source file CompoundFileReader.java:

    public CompoundFileReader(Directory dir, String name)
    throws IOException
    {
        boolean success = false;
        ...

        try {
            stream = dir.openFile(name);

            // read the directory and init files
            ...

            success = true;

        } finally {
            if (! success) {
                try {
                    stream.close();
                } catch (IOException e) { }
            }
        }
    }

If the IO-method-call ""dir.openFile()"" throws an IOExeption,
then the variable ""stream"" remains its null value.
The statement ""stream.close()"" in the finally clause will then cause a
NullPointerException.

I would suggest that you change the code from:
    stream.close();
to:
    if ( stream != null ) {
        stream.close();
    }

There are a lot of reasons why an IO-operation like ""dir.openFile()""
could throw an IOException.
I cannot guarantee that such an IO exception will never occur again.
Therefore it is better to handle such an IO exception correctly.

This issue is similar to bug# 29774, except that I recommand an easy way
to solve this problem."
0,"BooleanScorer.nextDoc should also delegate to sub-scorer's bulk scoring methodBooleanScorer uses the bulk score methods of its sub scorers, asking them to score each chunk of 2048 docs.

However, its .nextDoc fails to do this, instead manually walking through the sub's docs (calling .nextDoc()), which is slower (though this'd be tiny in practice).

As far as I can tell it should delegate to the bulk scorer just like it does in its bulk scorer method."
0,"JSR 283 lifecycle managementJSR 283 specifies a simple lifecycle management mechanism for nodes, and as the reference implementation we should implement that feature. We also need to implement the related TCK tests.

This feature introduces a few new API methods, but during Jackrabbit 1.x we can just introduce them as custom jsr-283 API extensions.
"
0,Allow use of compact DocIdSet in CachingWrapperFilterExtends CachingWrapperFilter with a protected method to determine the DocIdSet to be cached.
1,"DocViewSAXEventGenerator produces invalid SAX streamISO9075.encode() is called twice in DocViewSAXEventGenerator.leaving(), which produces invalid endElement events.

Faulty block of code (note the encode method called twice):

        // encode node name to make sure it's a valid xml name
        name = ISO9075.encode(name);
        // element name
        String elemName;
        if (node.getDepth() == 0) {
            // root node needs a name
            elemName = jcrRoot;
        } else {
            // encode node name to make sure it's a valid xml name
            elemName = ISO9075.encode(name);
        }"
0,"test granularity for calendar (date) propertiesThere are repositories out there that do support properties of type Date, but not Calendar (the main difference being that Calendar also captures the time zone). Also, some repositories may not be able to store timestamps with millisecond resolution.

Although both these restrictions make a repository non-compliant, it would be useful for the tests to test these aspects as separate issues. Thus I propose to simplify the existing tests so that they just compare timestamps (factoring out the time zone), and do not require resolution finer than 1s. These two aspects then should be tested in a separate test case (thinking of it, they currently may not test sub-second resolution, in which case I propose to leave things as they are with respect to this).

"
0,"BalancedSegmentMergePolicy, contributed from the Zoie project for realtime indexingWritten by Yasuhiro Matsuda for Zoie realtime indexing system used to handle high update rates to avoid large segment merges.
Detailed write-up is at:

http://code.google.com/p/zoie/wiki/ZoieMergePolicy
"
0,"add ASCIIFoldingFilter and deprecate ISOLatin1AccentFilterThe ISOLatin1AccentFilter is removing accents from accented characters in the ISO Latin 1 character set.
It does what it does and there is no bug with it.

It would be nicer, though, if there was a more comprehensive version of this code that included not just ISO-Latin-1 (ISO-8859-1) but the entire Latin 1 and Latin Extended A unicode blocks.
See: http://en.wikipedia.org/wiki/Latin-1_Supplement_unicode_block
See: http://en.wikipedia.org/wiki/Latin_Extended-A_unicode_block

That way, all languages using roman characters are covered.
A new class, ISOLatinAccentFilter is attached. It is intended to supercede ISOLatin1AccentFilter which should get deprecated."
1,QPropertyDefinitionImpl.equals() is implemented incorrectly 
1,"CachingIndexReader: NullPointerException initializing parents cacheUsing the jackrabbit-core-1.4.9 (after upgrading from jackrabbot-core-1.4.6), the following exception is logged. The code where the exception happens was introduced in JCR-1884 and is first included in the 1.4.9 core release.

10.03.2009 18:56:25 *WARN * CachingIndexReader: Error initializing parents cache. (CachingIndexReader.java, line 310)
java.lang.NullPointerException
    at org.apache.jackrabbit.core.query.lucene.CachingIndexReader$CacheInitializer$2.collect(CachingIndexReader.java:362)
    at org.apache.jackrabbit.core.query.lucene.CachingIndexReader$CacheInitializer.collectTermDocs(CachingIndexReader.java:426)
    at org.apache.jackrabbit.core.query.lucene.CachingIndexReader$CacheInitializer.initializeParents(CachingIndexReader.java:356)
    at org.apache.jackrabbit.core.query.lucene.CachingIndexReader$CacheInitializer.run(CachingIndexReader.java:306)
    at org.apache.jackrabbit.core.query.lucene.CachingIndexReader.<init>(CachingIndexReader.java:109)
    at org.apache.jackrabbit.core.query.lucene.AbstractIndex.getReadOnlyIndexReader(AbstractIndex.java:276)
    at org.apache.jackrabbit.core.query.lucene.MultiIndex.getIndexReader(MultiIndex.java:731)
    at org.apache.jackrabbit.core.query.lucene.MultiIndex.<init>(MultiIndex.java:303)
    at org.apache.jackrabbit.core.query.lucene.SearchIndex.doInit(SearchIndex.java:454)
    at com.day.crx.query.lucene.LuceneHandler.doInit(LuceneHandler.java:93)
    at org.apache.jackrabbit.core.query.AbstractQueryHandler.init(AbstractQueryHandler.java:53)
    at org.apache.jackrabbit.core.SearchManager.initializeQueryHandler(SearchManager.java:583)
    at org.apache.jackrabbit.core.SearchManager.<init>(SearchManager.java:265)
    at org.apache.jackrabbit.core.RepositoryImpl$WorkspaceInfo.getSearchManager(RepositoryImpl.java:1600)
    at org.apache.jackrabbit.core.RepositoryImpl.initWorkspace(RepositoryImpl.java:606)
    at org.apache.jackrabbit.core.RepositoryImpl.getWorkspaceInfo(RepositoryImpl.java:718)
    at com.day.crx.core.CRXRepositoryImpl.login(CRXRepositoryImpl.java:964)
    at org.apache.sling.jcr.base.internal.SessionPool.acquireSession(SessionPool.java:268)
    at org.apache.sling.jcr.base.internal.SessionPoolManager.login(SessionPoolManager.java:99)
    at org.apache.sling.jcr.base.AbstractSlingRepository.login(AbstractSlingRepository.java:240)
    at org.apache.sling.jcr.base.AbstractSlingRepository.loginAdministrative(AbstractSlingRepository.java:206)
    at org.apache.sling.jcr.base.AbstractSlingRepository.pingAndCheck(AbstractSlingRepository.java:506)
    at org.apache.sling.jcr.base.AbstractSlingRepository.startRepository(AbstractSlingRepository.java:810)
    at org.apache.sling.jcr.base.AbstractSlingRepository.activate(AbstractSlingRepository.java:629)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at org.apache.felix.scr.impl.ImmediateComponentManager.createImplementationObject(ImmediateComponentManager.java:226)
    at org.apache.felix.scr.impl.ImmediateComponentManager.createComponent(ImmediateComponentManager.java:133)
    at org.apache.felix.scr.impl.AbstractComponentManager.activateInternal(AbstractComponentManager.java:476)
    at org.apache.felix.scr.impl.AbstractComponentManager.enableInternal(AbstractComponentManager.java:398)
    at org.apache.felix.scr.impl.AbstractComponentManager.access$000(AbstractComponentManager.java:36)
    at org.apache.felix.scr.impl.AbstractComponentManager$1.run(AbstractComponentManager.java:99)
    at org.apache.felix.scr.impl.ComponentActorThread.run(ComponentActorThread.java:85)
10.03.2009 18:56:31 *INFO * SearchIndex: Index initialized: /u01/media/u01/crxlocal/workspaces/dailymail-prod/index Version: 2 (SearchIndex.java, line 492)
"
1,"ArrayIndexOutOfBoundsException when using MultiFieldQueryParserWe get the following exception:

Exception in thread ""main"" java.lang.ArrayIndexOutOfBoundsException: -1
        at java.util.Vector.elementAt(Vector.java:434)
        at org.apache.lucene.queryParser.QueryParser.addClause(QueryParser.java:181)
        at org.apache.lucene.queryParser.QueryParser.Query(QueryParser.java:529)
        at org.apache.lucene.queryParser.QueryParser.parse(QueryParser.java:108)
        at org.apache.lucene.queryParser.QueryParser.parse(QueryParser.java:87)
        at
org.apache.lucene.queryParser.MultiFieldQueryParser.parse(MultiFieldQueryParser.java:77)
        at idx.Mquery.main(Mquery.java:64)


We are using a query with 'AND' like 'bla AND blo' on 5 fields.
One of the fields has a Tokenizer which returns no token
at all on this query, and this together with the AND
triggers the exception."
0,"Degrade gracefully when reading invalid date valuesAs noted in JCR-1996, it is possible for an old version of Jackrabbit to store date invalid date values in the repository. Currently such values cause exceptions when the repository attempts to read them. A better approach would be to automatically detect such dates and map them instead to string values to avoid losing any information. A client could then access the information as a string through the normal JCR API, and would only get a ValueFormatException when trying to read the value as a date, i.e. using the getDate() method."
0,"Integrate IndexReader with IndexWriter The current problem is an IndexReader and IndexWriter cannot be open
at the same time and perform updates as they both require a write
lock to the index. While methods such as IW.deleteDocuments enables
deleting from IW, methods such as IR.deleteDocument(int doc) and
norms updating are not available from IW. This limits the
capabilities of performing updates to the index dynamically or in
realtime without closing the IW and opening an IR, deleting or
updating norms, flushing, then opening the IW again, a process which
can be detrimental to realtime updates. 

This patch will expose an IndexWriter.getReader method that returns
the currently flushed state of the index as a class that implements
IndexReader. The new IR implementation will differ from existing IR
implementations such as MultiSegmentReader in that flushing will
synchronize updates with IW in part by sharing the write lock. All
methods of IR will be usable including reopen and clone. 
"
0,"TokenFilter should implement reset()TokenFilter maintains a private member of TokenStream.
It should implement reset() and call its member TokenStream's reset() method. Otherwise, that TokenStream never gets reset.
Patch applied."
0,"Publish source/javadoc jar files to the Maven repositoryIt would be really nice if HttpComponents (Core and Client) published jar files to the Maven repository for not just the bytecode, but also for the source and javadoc (done by defining a ""classifier"" attribute of ""javadoc"" or ""source"" for the jar when publishing with Maven).

Having these in the Maven repo allows an IDE (like Eclipse) to auto-download and attach the source/javadoc to the HttpComponent jar files - meaning developers will then see the API documentation automatically in their IDE.  This also greatly aids debugging if one needs to step through HttpComponent code, and placing the source in the hands of more developers also means you might see more patches coming back."
1,"If you ""flush by RAM usage"" then IndexWriter may over-mergeI think a good way to maximize performance of Lucene's indexing for a
given amount of RAM is to flush (writer.flush()) the added documents
whenever the RAM usage (writer.ramSizeInBytes()) has crossed the max
RAM you can afford.

But, this can confuse the merge policy and cause over-merging, unless
you set maxBufferedDocs properly.

This is because the merge policy looks at the current maxBufferedDocs
to figure out which segments are level 0 (first flushed) or level 1
(merged from <mergeFactor> level 0 segments).

I'm not sure how to fix this.  Maybe we can look at net size (bytes)
of a segment and ""infer"" level from this?  Still we would have to be
resilient to the application suddenly increasing the RAM allowed.

The good news is to workaround this bug I think you just need to
ensure that your maxBufferedDocs is less than mergeFactor *
typical-number-of-docs-flushed.
"
0,"make sure no static loggers are usedReview all loggers used in the component, make sure they are stored in non-static attributes only.
http://wiki.apache.org/jakarta-commons/Logging/StaticLog
"
1,"Contrib RMI: NotSerializableExceptionorg.apache.jackrabbit.rmi.client.RemoteRepositoryException:

error unmarshalling return; nested exception is:.java.io.WriteAbortedException: writing aborted; java.io.NotSerializableException: javax.jcr.NameValue

"
0,"common interface for HttpRoute and RouteTrackerClasses HttpRoute and RouteTracker have many identical getters. There should be a common interface, for example RouteInfo, to define these getters and a toRoute() method that returns an unmodifiable representation. Some portions of the API may then accept the interface instead of the specific class HttpRoute.
"
1,"Optimize runs forever if you keep deleting docs at the same timeBecause we ""cascade"" merges for an optimize... if you also delete documents while the merges are running, then the merge policy will see the resulting single segment as still not optimized (since it has pending deletes) and do a single-segment merge, and will repeat indefinitely (as long as your app keeps deleting docs)."
0,A faster JFlex-based replacement for StandardAnalyzerJFlex (http://www.jflex.de/) can be used to generate a faster (up to several times) replacement for StandardAnalyzer. Will add a patch and a simple benchmark code in a while.
1,"finalize()-methods of FSDirectory.FSIndexInput and FSDirectory.FSIndexOutput try to close already closed fileHi all,

I found a small problem in FSDirectory: The finalize()-methods of FSDirectory.FSIndexInput and FSDirectory.FSIndexOutput try to close the underlying file. This is not a problem unless the file has been closed before by calling the close() method. If it has been closed before, the finalize method throws an IOException saying that the file is already closed. Usually this IOException would go unnoticed, because the GarbageCollector, which calls finalize(), just eats it. However, if I use the Eclipse debugger the execution of my code will always be suspended when this exception is thrown.

Even though this exception probably won't cause problems during normal execution of Lucene, the code becomes cleaner if we apply this small patch. Might this IOException also have a performance impact, if it is thrown very frequently?

I attached the patch which applies cleanly on the current svn HEAD. All testcases pass and I verfied with the Eclipse debugger that the IOException is not longer thrown."
1,"Query for name literal without namespace failsQuery for a name literal without a namespace fails. 

Example:
//*[@foo = 'bla']

should return nodes with foo property that contain the String value 'bla' or the Name value 'bla' (no namespace). Only nodes with String value 'bla' are returned."
0,"Automaton Query/Filter (scalable regex)Attached is a patch for an AutomatonQuery/Filter (name can change if its not suitable).

Whereas the out-of-box contrib RegexQuery is nice, I have some very large indexes (100M+ unique tokens) where queries are quite slow, 2 minutes, etc. Additionally all of the existing RegexQuery implementations in Lucene are really slow if there is no constant prefix. This implementation does not depend upon constant prefix, and runs the same query in 640ms.

Some use cases I envision:
 1. lexicography/etc on large text corpora
 2. looking for things such as urls where the prefix is not constant (http:// or ftp://)

The Filter uses the BRICS package (http://www.brics.dk/automaton/) to convert regular expressions into a DFA. Then, the filter ""enumerates"" terms in a special way, by using the underlying state machine. Here is my short description from the comments:

     The algorithm here is pretty basic. Enumerate terms but instead of a binary accept/reject do:
      
     1. Look at the portion that is OK (did not enter a reject state in the DFA)
     2. Generate the next possible String and seek to that.

the Query simply wraps the filter with ConstantScoreQuery.

I did not include the automaton.jar inside the patch but it can be downloaded from http://www.brics.dk/automaton/ and is BSD-licensed."
1,"Query dump failed with deep query treeWith a big query (more than 400 OR operands) the query dump failed.
The query dump is made at QueryImpl.execute (line 136)

It failed because of the constant PADDING at QueryTreeDump.visit(line 85).
The constant PADDING is a 255 character array, but in my program it would need it to be bigger.
I think putting it to 65535 would not be a problem : it would only take a little bit more memory.

This is the top of the stacktract for info:
java.lang.ArrayIndexOutOfBoundsException
	at java.lang.System.arraycopy(Native Method)
	at java.lang.StringBuffer.append(StringBuffer.java:499)
	at org.apache.jackrabbit.core.query.QueryTreeDump.visit(QueryTreeDump.java:85)
	at org.apache.jackrabbit.core.query.OrQueryNode.accept(OrQueryNode.java:50)
	at org.apache.jackrabbit.core.query.QueryTreeDump.traverse(QueryTreeDump.java:263)
                     ...

This is not critical because I can avoid the dump by unactivating debug logs.
"
1,"ConcurrentModificationException during logoutWe regularly get the following exception:

java.util.ConcurrentModificationException
        at org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntrySetIterator.checkMod(AbstractReferenceMap.java:761)
        at org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntrySetIterator.hasNext(AbstractReferenceMap.java:735)
        at java.util.Collections$UnmodifiableCollection$1.hasNext(Collections.java:1009)
        at java.util.Collections$UnmodifiableCollection$1.hasNext(Collections.java:1009)
        at org.apache.jackrabbit.core.state.LocalItemStateManager.dispose(LocalItemStateManager.java:341)
        at org.apache.jackrabbit.core.WorkspaceImpl.dispose(WorkspaceImpl.java:170)
        at org.apache.jackrabbit.core.SessionImpl.logout(SessionImpl.java:1225)
        at org.apache.jackrabbit.core.XASessionImpl.logout(XASessionImpl.java:379)

Two causes for this exception have been identified:

 (Taken from an email to the dev-list from Marcel Reutegger):
> - session A reads some items I
> - session B transiently removes items in I
> - session A logs out and starts to iterate over I in  LocalItemStateManager (LISM)
> - session B saves changes and removed items are evicted from A's LISM
> - session A gets concurrent modification exception

Another scenario is the following:
- Session A gets the iterator of the values of (the primary cache of) an ItemStateReferenceCache in LocalItemStateManager.dispose.
- Session B then does something that triggers the CacheManager.
- The CacheManager then calls resizeAll, and evicts some items from the secondary cache of the ItemStateReferenceCache of which the LocalItemStateManager has a values iterator.
- The garbage collector then runs and evicts the removed items also from the primary cache, which effectively modifies the set over which is iterated.

Regards,

Martijn Hendriks"
0,"Upgrade to SLF4J 1.3Version 1.1 of the SLF4J logging facade was recently released. It contains no functional improvements that we'd need, but is split to a separate slf4j-api library and a set of backend-specic logging adapters. This would allow us to avoid exposing log4j as a transitive dependency for projects that depend on Jackrabbit."
0,"extend LevenshteinAutomata to support transpositions as primitive editsThis would be a nice improvement for spell correction: currently a transposition counts as 2 edits,
which means users of DirectSpellChecker must use larger values of n (e.g. 2 instead of 1) and 
larger priority queue sizes, plus some sort of re-ranking with another distance measure for good results.

Instead if we can integrate ""chapter 7"" of http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.16.652 
then you can just build an alternative DFA where a transposition is only a single edit 
(http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance)

According to the benchmarks in the original paper, the performance for LevT looks to be very similar to Lev.

Support for this is now in moman (https://bitbucket.org/jpbarrette/moman/) thanks to Jean-Philippe 
Barrette-LaPierre.
"
0,"IfHeader: Incorrect test for parsing keyword ""not"" in parseIfListThe test for the ""not"" keyword tests the last character as

     (not !='t' || not != 'T')

which always yields true (not cannot be t and T at the same time). The correct test would be

     (not !='t' && not != 'T')"
0,"build.xml: result of ""dist-src"" should support ""build-contrib""Currently the packed src distribution would fail to run ""ant build-contrib"".
It would be much nicer if that work.
In fact, would be nicer if you could even ""re-pack"" with it.

For now I marked this for 2.1, although I am not yet sure if this is a stopper."
1,NodeDefinitionTemplateImpl.setDefaultPrimaryTypeName(null) throws exceptionexpect to clear the name.
1,"handling of expanded-form jcr names by node type *Template classes ItemDefinitionTemplate treats the name as opque string, instead of a JCR Name.

Example: when setting the name to

  ""{http://example.org/}foo""

then getName() needs to return

  ""bar:foo""

which the prefix ""bar"" being mapped to the namesapce ""http://example.org/""."
1,"MultipartPostMethod Holding File Stream Open?From: ""Daniel Walsh"" <daniel.walsh13@verizon.net>
Date: Tue Feb 25, 2003  8:05:49 PM US/Eastern
To: ""Commons HttpClient Project"" <commons-httpclient-dev@jakarta.apache.org>
Subject: MultipartPostMethod Holding File Stream Open?
Reply-To: ""Commons HttpClient Project"" <commons-httpclient-dev@jakarta.apache.org>

I'm using a MultipartPostMethod to upload a file to a servlet:

File file = new File(strUrl);

HttpClient client = new HttpClient();
HostConfiguration hostConfig = new HostConfiguration();
MultipartPostMethod mpPost = new MultipartPostMethod();

 hostConfig.setHost(someURL.getHost(), someURL.getPort(), someURL.getProtocol());
client.setConnectionTimeout(30000);
client.setHostConfiguration(hostConfig);

mpPost.addParameter(""someName"", ""someValue"");
mpPost.addParameter(file.getName(), file);

mpPost.setPath(strPath);
client.executeMethod(mpPost);

String confirmUpload = tpPost.getResponseBodyAsString();
mpPost.releaseConnection();

file.delete();  // this is being blocked.

After the upload, I would like to delete the file off of my disk.  Using other
methods of uploading the file (in particular a PutMethod), I was able to then
delete the file after the upload.  Now that I am using the MultipartPostMethod
obj for the upload, I am unable to delete the file (the return value is false,
and there is no SecurityException being thrown - no SecurityManager even set as
of this point either).

So, I guess my question is whether there is a call to the MultipartPostMethod
obj that I'm overlooking that would release it's connection (I'm sure that it is
opening an InputStream of some sort to read the file contents, in order to form
the HTTP message) to the file - so that I can then have unimpeded access to it
for other operations?"
1,TCK: check for wrong repository descriptor. should be versioning instead of locking... at least according to the comment.
0,"concurrent read-only access to a sessionEven though the JCR specification does not make a statement about Sessions shared across a number of threads I think it would be great for many applications if we could state that sharing a read-only session is supported by Jackrabbit.
On many occasions in the mailing lists we stated that there should not be an issue with sharing a read-only session, however I think it has never been thoroughly tested or even specified as a ""design goal"".

If we can come to an agreement that this is desirable I think it would be great to start including testcases to validate that behaviour and update the documentation respectively."
0,"Add the ability to disable inheriting ancestor ACLsThe current ACL implementation will walk the tree from the item being accessed, up to the root, collecting ACL entries for all the ancestors. With this system, there is no easy way to restrict access to subnodes except by adding DENY entries to negate the entries inherited from the parent nodes.

I'd like to request a way to turn this behavior off either at a node level or global level.

The place where recursion is happening is in org.apache.jackrabbit.core.security.authorization.acl.ACLProvider$Entries.collectEntries(NodeImpl node). Inside this method, it could perhaps check a global parameter or the existence of property of the ACL policy node to determine whether to recurse up the tree."
0,Add read acessor for user data to SessionInfoImplAdd method SessionInfoImpl.getUserData() to retrieve the user data set through SessionInfoImpl.setUserData(String)
0,"Some improvements to _TestUtil and its usageI've started this issue because I've noticed that _TestUtil.getRandomMultiplier() is called from many loops' condition check, sometimes hundreds and thousands of times. Each time it does Integer.parseInt after calling System.getProperty. This really can become a constant IMO, either in LuceneTestCase(J4) or _TestUtil, as it's not expected to change while tests are running ...

I then reviewed the class and spotted some more things that I think can be fixed/improved:
# getTestCodec() can become a constant as well
# arrayToString is marked deprecated. I've checked an no one calls them, so I'll delete them. This is a 4.0 code branch + a test-only class. No need to deprecate anything.
# getTempDir calls new Random(), instead of newRandom() in LuceneTestCaseJ4, which means that if something fails, we won't know the random seed used ...
#* In that regard, we might want to output all the classes that obtained a static seed in reportAdditionalFailures(), instead of just the class that ran the test.
# rmDir(String) can be removed IMO, and leave only rmDir(File)
# I suggest we include some recursion in rmDir(File) to handle the deletion of nested directories.
#* Also, it does not check whether the dir deletion itself succeeds (but it does so for the files). This can bite us on Windows, if some test did not close things properly.

I'll work out a patch."
0,"Spellchecker doesn't need to store ngramsThe spellchecker in contrib stores the ngrams although this doesn't seem to be necessary. This patch changes that, I will commit it unless someone objects. This improves indexing speed and index size. Some numbers on a small test I did:

Input of the original index: 2200 text files, index size 5.3 MB, indexing took 17 seconds

Spell index before patch: about 60.000 documents, index size 13 MB, indexing took 62 seconds
Spell index after patch: about 60.000 documents, index size 6.3 MB, indexing took 52 seconds

BTW, the test case fails even before this patch. I'll probaby submit another issue about how to fix that.
"
0,"Collapse Common module into Lucene core utilIt was suggested by Robert in [http://markmail.org/message/wbfuzfamtn2qdvii] that we should try to limit the dependency graph between modules and where there is something 'common' it should probably go into lucene core.  Given that I haven't added anything to this module except the MutableValue classes, I'm going to collapse them into the util package, remove the module, and correct the dependencies."
0,"Performance fix, when deserializing large jcr:binary in ValueHelper.deserialize()While profiling import of large PDF files into Magnolia 3.6.3 (which uses Jackrabbit 1.4 as JCR repository) we had found that there is large CPU time spent on:

""http-8080-4"" daemon prio=6 tid=0x5569fc00 nid=0x6ec runnable [0x5712d000..0x5712fb14]
   java.lang.Thread.State: RUNNABLE
	at java.io.FileOutputStream.writeBytes(Native Method)
	at java.io.FileOutputStream.write(FileOutputStream.java:260)
	at org.apache.jackrabbit.util.Base64.decode(Base64.java:269)
	at org.apache.jackrabbit.util.Base64.decode(Base64.java:184)
	at org.apache.jackrabbit.value.ValueHelper.deserialize(ValueHelper.java:759)
	at org.apache.jackrabbit.core.xml.BufferedStringValue.getValue(BufferedStringValue.java:258)
	at org.apache.jackrabbit.core.xml.PropInfo.apply(PropInfo.java:132)

Looking into source code of Base64.decode it became obvious, that it writes each 1to3byte chunk into unbuffered FileOutputStream (thus calling OS kernel many times to write just few bytes) which causes lot of CPU usage without disk usage.


Provided fix is quite trivial - just wrap FileOutputStream into BufferedOutputStream.
"
0,"If IndexWriter hits OutOfMemoryError it should not commitWhile progress has been made making IndexWriter robust to OOME, I
think there is still a real risk that an OOME at a bad time could put
IndexWriter into a bad state such that if close() is called and
somehow it succeeds without hitting another OOME, it risks
introducing messing up the index.

I'd like to detect if OOME has been hit in any of the methods that
alter IW's state, and if so, do not commit changes to the index.  If
close is called after hitting OOME, I think writer should instead
abort.

Attached patch just adds try/catch clauses to catch OOME, note that
it was hit, and re-throw it.  Then, sync() refuses to commit a new
segments_N if OOME was hit, and close instead calls abort when OOME
was hit.  All tests pass.  I plan to commit in a day or two."
0,"gcj ant target doesn't work on windowsIn order to fix it I made two changes, both really simple.

First I added to org/apache/lucene/store/GCJIndexInput.cc some code to use windows memory-mapped I/O instead than unix mmap().

Then I had to rearrange the link order in the Makefile in order to avoid unresolved symbol errors. Also to build repeatedly I had to instruct make to ignore the return code for the mkdir command as on windows it fails if the directory already exists.

I'm attaching two patches corresponding to the changes; please note that with the patches applied, the gcj target still works on linux. Both patches apply cleanly to the current svn head."
0,"Handling sub-domain cookies.I noticed a difference in behaviour between httpclient and most common browsers 
(IE/Mozilla). If a web site sets a cookie for ""beta.gamma.com"", this cookie is 
not sent in requests to ""alpha.beta.gamma.com"". 
  I am not sure what the cookie specs say, but Mozilla, IE and even 
HTTP::Cookies module in LWP seem to behave differently from HttpClient. 
HttpClient seems to rely on the leading dot in the domain name 
(like "".beta.gamma.com"")."
0,"Documentation bug.  The 2.4.1 query parser syntax wiki page says it is for 1.9This page:

http://lucene.apache.org/java/2_4_1/queryparsersyntax.html

says this:
.bq
This page provides the Query Parser syntax in Lucene 1.9. If you are using a different version of Lucene, please consult the copy of docs/queryparsersyntax.html that was distributed with the version you are using. 

This is misleading on a doc page for 2.4.1"
0,"cache should not generate stale responses to requests explicitly requesting first-hand or fresh onesThe current implementation will serve a stale response in the case that it has a stale cache entry but revalidation with the origin fails. However, the RFC says we SHOULD NOT do this if the client explicitly requested a first-hand or fresh response (via no-cache, max-age, max-stale, or min-fresh).
"
0,"Maintain norms in a single file .nrmNon-compound indexes are ~10% faster at indexing, and perform 50% IO activity comparing to compound indexes. But their file descriptors foot print is much higher. 

By maintaining all field norms in a single .nrm file, we can bound the number of files used by non compound indexes, and possibly allow more applications to use this format.

More details on the motivation for this in: http://www.nabble.com/potential-indexing-perormance-improvement-for-compound-index---cut-IO---have-more-files-though-tf2826909.html (in particular http://www.nabble.com/Re%3A-potential-indexing-perormance-improvement-for-compound-index---cut-IO---have-more-files-though-p7910403.html).
"
0,"Change QueryParser to use ConstantScoreRangeQuery in preference to RangeQuery by defaultChange to QueryParser to default to using new ConstantScoreRangeQuery in preference to RangeQuery
for range queries. This implementation is generally preferable because it 
a) Runs faster 
b) Does not have the scarcity of range terms unduly influence score 
c) avoids any ""TooManyBooleanClauses"" exception.

However, if applications really need to use the old-fashioned RangeQuery and the above
points are not required then the  ""useOldRangeQuery"" property can be used to revert to old behaviour.

The patch includes extra Junit tests for this flag and all other Junit tests pass"
1,"SQL2 Join with OR clause still has some issuesThere are still some issues with Joins that have OR clauses in them. I changed the test, so that it reflects the changes"
1,"SetCookie / DateParser failing to parse non-standard date formatI'm receiving the following expiration date in SetCookie which DateParser 
doesn't handle:

expires=Sat,19-Apr-03 04:28:07 GMT

The lack of a space between ',' and '19' is causing the problem. Is it possible 
to add the following lines to DatePattern?

""EEE,dd-MMM-yy HH:mm:ss z""
""EEE,dd-MMM-yyyy HH:mm:ss z"""
0,"DatabaseJournal needs connection reestablishment logicThe DB based file system and persistence manager implementations have logic for connection reestablishment in case the DB server bounces while the repository is running, but the DB based journal implementation doesn't."
0,"Jcr-Server: useful output upon GET to root- and workspace-resourcesin contrast to the resources representing JCR Node or Properties, the 'root' resource and the resources representing the
workspaces present in the repository don't provide any output when accessed in a browser.

-> add some very simple listing for those 2 resource types."
0,"Update copyright year to 2009Our normal license headers don't contain copyright years, but the NOTICE.txt files do. We should update the year to 2009 where appropriate.
"
1,"Stale connection check does not work with IBM JSSE/JREOS: Windows/AIX
JRE: IBM JRE 1.4.1
JSSE: IBM's implementation (SSLite?)
HttpClient Library: 2.0.2 release

My code enabled connection pooling feature to gain performance improvement in 
the SSL Handshake area. The code works perfectly on Sun JRE 1.4.2 with a think 
time of 60seconds between requests, but the same code fails on IBM JRE. On IBM 
JRE, the code fails to detech stale connections, thus causing down the stream 
setSoTimeout() call to fail.

Further debugging into the library code revealed difference in the way the 
HTTPConnection.isStale() behaves. With in that method, particularly, the 
inputStream.isAvailable() method returns 0 with Sun JRE but -1 with IBM JRE.

I made a small code change to HttpConnection.isStale() method by moving the try
{}finally{} block outside of the if(inputStream.isAvailable()==0) check in the 
following code and BINGO, everything started working on IBM JVMs. It did not 
break anything on Suns JVM.

============== CODE BEGIN
    protected boolean isStale() {
    	LOG.debug(""##SUBBA## HttpConnection.isStale() got called. soTimeout="" 
+ soTimeout);
        boolean isStale = true;
        if (isOpen) {
        	LOG.debug(""##SUBBA## HttpConnection.isStale() got called. 
isOpen="" + isOpen);        	
            // the connection is open, but now we have to see if we can read it
            // assume the connection is not stale.
            isStale = false;

                try {         
                    if (inputStream.available() == 0) {		// ALWAYS 
RETURNS -1 on IBM JVM  0 on SUN
                    	
		  // try {		// SUBBA  MOVED OUTSIDE IF
	                	socket.setSoTimeout(1);
	                  	LOG.debug(""##SUBBA## HttpConnection.isStale() 
got called. setSoTimeout(1)"");                    	
	                    
	                    inputStream.mark(1);
	                    int byteRead = inputStream.read();
	                	LOG.debug(""##SUBBA## HttpConnection.isStale() 
got called. bytesRead="" + byteRead);                    	
	                    
	                    if (byteRead == -1) {
	                    	LOG.debug(""##SUBBA## HttpConnection.isStale() 
got called. SETTING isStale to TRUE HERE"");                    	
	                    	
	                        // again - if the socket is reporting all data 
read,
	                        // probably stale
	                        isStale = true;
	                    } else {
	                        inputStream.reset();
	                    }
		    // SUBBA  MOVED OUTSIDE IF
                //} finally {
                //	LOG.debug(""##SUBBA## HttpConnection.isStale() got 
called. finally block - BEGIN "" + soTimeout);                    	
                //    socket.setSoTimeout(soTimeout);
                //	LOG.debug(""##SUBBA## HttpConnection.isStale() got 
called. finally block - DONE"");                        
               // }

	
                    }                        
                } finally {
                	LOG.debug(""##SUBBA## HttpConnection.isStale() got 
called. finally block - BEGIN "" + soTimeout);                    	
                    socket.setSoTimeout(soTimeout);
                	LOG.debug(""##SUBBA## HttpConnection.isStale() got 
called. finally block - DONE"");                        
                }
.....
.....
.....
========================== CODE END


I've attached logs captured before and after the change on both the JRE's for 
your review:

==================================
IBMs LOG (after change):
==================================
<Jun 10, 2005 1:26:55 PM EDT> <DEBUG> 
<apache.commons.httpclient.MultiThreadedHttpConnectionManager:700> <Getting 
free connection, hostConfig=HostConfiguration
[host=uatservices30.ilab.fnfismd.com, protocol=https:443, port=443]>
<Jun 10, 2005 1:26:55 PM EDT> <DEBUG> 
<apache.commons.httpclient.HttpConnection:492> <##SUBBA## 
HttpConnection.isStale() got called. soTimeout=0>
<Jun 10, 2005 1:26:55 PM EDT> <DEBUG> 
<apache.commons.httpclient.HttpConnection:495> <##SUBBA## 
HttpConnection.isStale() got called. isOpen=true>
<Jun 10, 2005 1:26:55 PM EDT> <DEBUG> 
<apache.commons.httpclient.HttpConnection:500> <##SUBBA## 
HttpConnection.isStale() got called. [class 
java.io.BufferedInputStream].available=-1>
<Jun 10, 2005 1:26:55 PM EDT> <DEBUG> 
<apache.commons.httpclient.HttpConnection:523> <##SUBBA## 
HttpConnection.isStale() got called. finally block - BEGIN 0>
<Jun 10, 2005 1:26:55 PM EDT> <DEBUG> 
<apache.commons.httpclient.HttpConnection:532> <An error occurred while 
reading from the socket, is appears to be stale>
java.net.SocketException: Socket is closed
	at java.net.Socket.setSoTimeout(Socket.java:927)
	at com.ibm.sslite.bf.setSoTimeout(Unknown Source)
	at com.ibm.jsse.bg.setSoTimeout(Unknown Source)
	at org.apache.commons.httpclient.HttpConnection.isStale
(HttpConnection.java:524)
	at org.apache.commons.httpclient.HttpConnection.isOpen
(HttpConnection.java:436)
	at 
org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnection
Adapter.isOpen(MultiThreadedHttpConnectionManager.java:1122)
	at org.apache.commons.httpclient.HttpClient.executeMethod
(HttpClient.java:626)
	at org.apache.commons.httpclient.HttpClient.executeMethod
(HttpClient.java:497)
	at 
com.touchpoint.pia.services.transactions.msp.ApacheHttpClient.invokeRequest
(ApacheHttpClient.java:69)
	at 
com.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequest
(MsWSManager.java:86)
	at 
com.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequestWithPaylo
ad(MsWSManager.java:114)
	at com.touchpoint.pia.services.transactions.msp.MsWSManager.main
(MsWSManager.java:179)
<Jun 10, 2005 1:26:55 PM EDT> <DEBUG> 
<apache.commons.httpclient.HttpConnection:540> <##SUBBA## 
HttpConnection.isStale() return=true>
<Jun 10, 2005 1:26:55 PM EDT> <DEBUG> 
<apache.commons.httpclient.HttpConnection:437> <Connection is stale, 
closing...>

==================================
IBMs LOG (before change):
==================================
<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> 
<apache.commons.httpclient.MultiThreadedHttpConnectionManager:666> <enter 
HttpConnectionManager.ConnectionPool.getHostPool(HostConfiguration)>
<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> 
<apache.commons.httpclient.MultiThreadedHttpConnectionManager:700> <Getting 
free connection, hostConfig=HostConfiguration
[host=uatservices30.ilab.fnfismd.com, protocol=https:443, port=443]>
<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> 
<apache.commons.httpclient.HttpConnection:492> <##SUBBA## 
HttpConnection.isStale() got called.>
<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> 
<apache.commons.httpclient.HttpConnection:495> <##SUBBA## 
HttpConnection.isStale() got called. isOpen=true>
<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> 
<apache.commons.httpclient.HttpConnection:500> <##SUBBA## 
HttpConnection.isStale() got called. [class 
java.io.BufferedInputStream].available=-1>
<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> 
<apache.commons.httpclient.HttpConnection:538> <##SUBBA## 
HttpConnection.isStale() return=false>
<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> 
<apache.commons.httpclient.HttpConnection:599> <HttpConnection.setSoTimeout(0)>
<Jun 10, 2005 1:07:29 PM EDT> <WARN> 
<apache.commons.httpclient.HttpConnection:607> <##SUBBA## Socket Exception>
java.net.SocketException: Socket is closed
	at java.net.Socket.setSoTimeout(Socket.java:927)
	at com.ibm.sslite.bf.setSoTimeout(Unknown Source)
	at com.ibm.jsse.bg.setSoTimeout(Unknown Source)
	at org.apache.commons.httpclient.HttpConnection.setSoTimeout
(HttpConnection.java:603)
	at 
org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnection
Adapter.setSoTimeout(MultiThreadedHttpConnectionManager.java:1296)
	at org.apache.commons.httpclient.HttpClient.executeMethod
(HttpClient.java:633)
	at org.apache.commons.httpclient.HttpClient.executeMethod
(HttpClient.java:497)
	at 
com.touchpoint.pia.services.transactions.msp.ApacheHttpClient.invokeRequest
(ApacheHttpClient.java:69)
	at 
com.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequest
(MsWSManager.java:86)
	at 
com.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequestWithPaylo
ad(MsWSManager.java:114)
	at com.touchpoint.pia.services.transactions.msp.MsWSManager.main
(MsWSManager.java:179)
<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> 
<apache.commons.httpclient.HttpConnection:1151> <enter 
HttpConnection.releaseConnection()>
<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> 
<apache.commons.httpclient.MultiThreadedHttpConnectionManager:513> <enter 
HttpConnectionManager.releaseConnection(HttpConnection)>
<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> 
<apache.commons.httpclient.MultiThreadedHttpConnectionManager:791> <Freeing 
connection, hostConfig=HostConfiguration[host=uatservices30.ilab.fnfismd.com, 
protocol=https:443, port=443]>
<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> 
<apache.commons.httpclient.MultiThreadedHttpConnectionManager:666> <enter 
HttpConnectionManager.ConnectionPool.getHostPool(HostConfiguration)>
<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> 
<apache.commons.httpclient.MultiThreadedHttpConnectionManager:774> <Notifying 
no-one, there are no waiting threads>
java.net.SocketException: Socket is closed
	at java.net.Socket.setSoTimeout(Socket.java:927)
	at com.ibm.sslite.bf.setSoTimeout(Unknown Source)
	at com.ibm.jsse.bg.setSoTimeout(Unknown Source)
	at org.apache.commons.httpclient.HttpConnection.setSoTimeout
(HttpConnection.java:603)
	at 
org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnection
Adapter.setSoTimeout(MultiThreadedHttpConnectionManager.java:1296)
	at org.apache.commons.httpclient.HttpClient.executeMethod
(HttpClient.java:633)
	at org.apache.commons.httpclient.HttpClient.executeMethod
(HttpClient.java:497)
	at 
com.touchpoint.pia.services.transactions.msp.ApacheHttpClient.invokeRequest
(ApacheHttpClient.java:69)
	at 
com.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequest
(MsWSManager.java:86)
	at 
com.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequestWithPaylo
ad(MsWSManager.java:114)
	at com.touchpoint.pia.services.transactions.msp.MsWSManager.main
(MsWSManager.java:179)
java.net.SocketException: Socket is closed
	at java.net.Socket.setSoTimeout(Socket.java:927)
	at com.ibm.sslite.bf.setSoTimeout(Unknown Source)
	at com.ibm.jsse.bg.setSoTimeout(Unknown Source)
	at org.apache.commons.httpclient.HttpConnection.setSoTimeout
(HttpConnection.java:603)
	at 
org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnection
Adapter.setSoTimeout(MultiThreadedHttpConnectionManager.java:1296)
	at org.apache.commons.httpclient.HttpClient.executeMethod
(HttpClient.java:633)
	at org.apache.commons.httpclient.HttpClient.executeMethod
(HttpClient.java:497)
	at 
com.touchpoint.pia.services.transactions.msp.ApacheHttpClient.invokeRequest
(ApacheHttpClient.java:69)
	at 
com.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequest
(MsWSManager.java:86)
	at 
com.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequestWithPaylo
ad(MsWSManager.java:114)
	at com.touchpoint.pia.services.transactions.msp.MsWSManager.main
(MsWSManager.java:179)
Exception in thread ""main"" java.net.SocketException: Socket is closed
	at java.net.Socket.setSoTimeout(Socket.java:927)
	at com.ibm.sslite.bf.setSoTimeout(Unknown Source)
	at com.ibm.jsse.bg.setSoTimeout(Unknown Source)
	at org.apache.commons.httpclient.HttpConnection.setSoTimeout
(HttpConnection.java:603)
	at 
org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnection
Adapter.setSoTimeout(MultiThreadedHttpConnectionManager.java:1296)
	at org.apache.commons.httpclient.HttpClient.executeMethod
(HttpClient.java:633)
	at org.apache.commons.httpclient.HttpClient.executeMethod
(HttpClient.java:497)
	at 
com.touchpoint.pia.services.transactions.msp.ApacheHttpClient.invokeRequest
(ApacheHttpClient.java:69)
	at 
com.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequest
(MsWSManager.java:86)
	at 
com.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequestWithPaylo
ad(MsWSManager.java:114)
	at com.touchpoint.pia.services.transactions.msp.MsWSManager.main
(MsWSManager.java:179)


============================================
**SUNs LOG (after change = before change):
============================================
<Jun 10, 2005 1:25:12 PM EDT> <DEBUG> 
<apache.commons.httpclient.MultiThreadedHttpConnectionManager:700> <Getting 
free connection, hostConfig=HostConfiguration
[host=uatservices30.ilab.fnfismd.com, protocol=https:443, port=443]>
<Jun 10, 2005 1:25:12 PM EDT> <DEBUG> 
<apache.commons.httpclient.HttpConnection:492> <##SUBBA## 
HttpConnection.isStale() got called. soTimeout=0>
<Jun 10, 2005 1:25:12 PM EDT> <DEBUG> 
<apache.commons.httpclient.HttpConnection:495> <##SUBBA## 
HttpConnection.isStale() got called. isOpen=true>
<Jun 10, 2005 1:25:12 PM EDT> <DEBUG> 
<apache.commons.httpclient.HttpConnection:500> <##SUBBA## 
HttpConnection.isStale() got called. [class 
java.io.BufferedInputStream].available=0>
<Jun 10, 2005 1:25:12 PM EDT> <DEBUG> 
<apache.commons.httpclient.HttpConnection:506> <##SUBBA## 
HttpConnection.isStale() got called. setSoTimeout(1)>
<Jun 10, 2005 1:25:12 PM EDT> <DEBUG> 
<apache.commons.httpclient.HttpConnection:510> <##SUBBA## 
HttpConnection.isStale() got called. bytesRead=-1>
<Jun 10, 2005 1:25:12 PM EDT> <DEBUG> 
<apache.commons.httpclient.HttpConnection:513> <##SUBBA## 
HttpConnection.isStale() got called. SETTING isStale to TRUE HERE>
<Jun 10, 2005 1:25:12 PM EDT> <DEBUG> 
<apache.commons.httpclient.HttpConnection:523> <##SUBBA## 
HttpConnection.isStale() got called. finally block - BEGIN 0>
<Jun 10, 2005 1:25:12 PM EDT> <DEBUG> 
<apache.commons.httpclient.HttpConnection:532> <An error occurred while 
reading from the socket, is appears to be stale>
java.net.SocketException: Socket Closed
	at java.net.PlainSocketImpl.setOption(PlainSocketImpl.java:177)
	at java.net.Socket.setSoTimeout(Socket.java:924)
	at com.sun.net.ssl.internal.ssl.SSLSocketImpl.setSoTimeout(DashoA12275)
	at org.apache.commons.httpclient.HttpConnection.isStale
(HttpConnection.java:524)
	at org.apache.commons.httpclient.HttpConnection.isOpen
(HttpConnection.java:436)
	at 
org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnection
Adapter.isOpen(MultiThreadedHttpConnectionManager.java:1122)
	at org.apache.commons.httpclient.HttpClient.executeMethod
(HttpClient.java:626)
	at org.apache.commons.httpclient.HttpClient.executeMethod
(HttpClient.java:497)
	at 
com.touchpoint.pia.services.transactions.msp.ApacheHttpClient.invokeRequest
(ApacheHttpClient.java:69)
	at 
com.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequest
(MsWSManager.java:86)
	at 
com.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequestWithPaylo
ad(MsWSManager.java:114)
	at com.touchpoint.pia.services.transactions.msp.MsWSManager.main
(MsWSManager.java:179)
<Jun 10, 2005 1:25:12 PM EDT> <DEBUG> 
<apache.commons.httpclient.HttpConnection:540> <##SUBBA## 
HttpConnection.isStale() return=true>"
1,MemoryFileSystem.deleteFolder deletes all folders starting with this name MemoryFileSystem.deleteFolder deletes not only the folder requested but all folders that start with the given name.
0,"Confusing code lineLine 81 of TermScorer:

      if (!(target > docs[pointer])) {

Could be replaced with the more readable:

      if (docs[pointer] >= target) {

Sorry for nit picking!"
1,"highlighter problems with overlapping tokensThe lucene highlighter has problems when tokens that overlap are generated.

For example, if analysis of iPod generates the tokens ""i"", ""pod"", ""ipod"" (with pod and ipod in the same position),
then the highlighter will output this as iipod, regardless of if any of those tokens are highlighted.

Discovered via http://issues.apache.org/jira/browse/SOLR-24
"
0,"[PATCH] FuzzyTermEnum optimization and refactorI took a look at it to see if it could be improved.  I saw speed improvements of
20% - 40% by making a couple changes.  

The patch is here: http://www.hagerfamily.com/patches/FuzzyTermEnumOptimizePatch.txt

The Patch is based on the HEAD of the CVS tree as of Oct 22, 2004.

What Changed?

Since the word was discarded if the edit distance for the word was
above a certain threshold, I updated the distance algorithm to abort
if at any time during the calculation it is determined that the best
possible outcome of the edit distance algorithm is above this
threshold.  The source code has a great explanation.

I also reduced the amount of floating point math, reduced the amount
of potential space the array takes in its first dimension, removed the
potential divide by 0 error when one term is an empty string, and
fixed a bug where an IllegalArgumentException was thrown if the class
was somehow initialized wrong, instead of looking at the arguments.

The behavior is almost identical.  The exception is that similarity is
set to 0.0 when it is guaranteed to be below the minimum similarity.

Results

I saw the biggest improvement from longer words, which makes a sense.
My long word was ""bridgetown"" and I saw a 60% improvement on this.
The biggest improvement are for words that are farthest away from the
median length of the words in the index.  Short words (1-3 characters)
saw a 30% improvement.  Medium words saw a 10% improvement (5-7
characters).  These improvements are with the prefix set to 0."
0,"upgrade contrib/ant's tidy.jarcontrib/ant uses a Tidy.jar that also includes classes in org.w3c.dom, org.xml.sax, etc.

This is no problem if you are an ant user, but if you are an IDE user you need to carefully configure the order of your classpath or things will not compile, as these will override the ones in the Solr libs, for example.

The solution is to upgrade the tidy.jar to the newest one that only includes org.w3c.tidy and doesn't cause these problems."
0,It's not possible to register event listeners that filters on mixin supertypesThe current implementation of blocks() in EventFilter does not check if the given EventState has a mixin that is derived from one of the given node types.
0,"misleading contrib/tck-webapp/...RepositoryServlet javadocIn org.apache.jackrabbit.tck.j2ee.RepositoryServlet it says ""...puts the reference into the application context"" but according to the behavior it should say ""...puts the reference into a class variable"". In a j2ee environment the application context refers to the ServletConext instance bounded to the web application.
"
1,"Duplicate attribute in BeanDescriptor and CollectionDescriptor2 different attributes are used in BeanDescriptor and CollectionDescriptor to store the jcr type (jcrType and jcrNodeType). JcrNodeType can be removed. 
This imply modifications in  the DTD, the pm implementation and the different mapping xml files used for the unit tests. 

Furthermore, it should be nice to use the same name (jcrType)  in all descriptors.  There is a lot of confusion across the different descriptors. sometime jcrType is used, sometime jcrNodeType is used. I propose to use only jcrType with the following purpose : 

* In the ClassDescriptor, it  is used to store the primary node type of the class. 
* In the FieldDescriptor, it  is used to store the property type. 
* In the BeanDescriptor  it is used to defined the child node type. 
* In the CollectionDescriptor , it is used to defined the child node type. "
0,separate java code from .jj fileIt would make development easier to move most of the java code out from the .jj file and into a real java file.
0,"terminology: source uses ""protected  property"" for something that only only indirectly has to do with that termDocumentation and method names (DavProperty) use ""protected"" as pseudonym for ""return upon PROPFIND/allprop"". This isn't really accurate, because the live properties defined in RFC2518/4918 *are* protected, but are returned with PROPFIND/allprop nevertheless.

Proposal: update documentation and method names to say something like ""visibleInAllprop"".
"
0,"Architecture Diagrams needed for Lucene, Solr and Nutch"
0,"Minor refactoring to IndexFileNameFilterIndexFileNameFilter looks like it's designed to be a singleton, however its constructor is public and its singleton member is package visible. The proposed patch changes the constructor and member to private. Since it already has a static getFilter() method, and no code in Lucene references those two, I don't think it creates any problems from an API perspective."
1,"DecompressingEntity not calling close on InputStream retrieved by getContentThe method DecompressingEntity.writeTo(OutputStream outstream) does not close the InputStream retrieved by getContent().
According to the documentation of HttpEntity.writeTo:
IMPORTANT: Please note all entity implementations must ensure that
all allocated resources are properly deallocated when this method
returns.

-> imho this is not satisfied in DecompressingEntity.writeTo "
0,Evaluate if membershipcache (JCR-2703) obsoletes the cache in DefaultPrincipalProvider
1,"Deadlock on version operations in a clustered environmentVersion operations in a cluster may end up in a deadlock: a write operation in the version store will acquire the version manager's write lock (N1.VW) and subsequently the cluster journal's write lock (N1.JW). Another cluster node's write operation in some workspace will acquire the journal's write lock (N2.JW) and first process the journal record log: if some of these changes concern the version store, the version manager's read lock (N2.VR) has to be acquired in order to deliver them. If the first cluster node reaches N1.VW, and the second reaches N2.JW, we have a deadlock. The same scenario takes place when the second cluster node synchronizes to the latest journal changes and reaches N2.JR, when the first cluster node is in N1.VW."
0,"Make ""boolean readOnly"" a required arg to IndexReader.openMost apps don't need read/write IndexReader, and, a readOnly
IndexReader has better concurrent performance.

I'd love to simply default readOnly to true, and you'd have to specify
""false"" if you want a read/write reader (I think that's the natural
default), but I think that'd break too many back-compat cases.

So the workaround is to make the parameter explicit, in 2.9.

I think even for IndexSearcher's methods that open an IndexReader
under the hood, we should also make the parameter explicit.
"
0,Test must not fail if mixin cannot be addedNearly all mixin types are optional and a test must not fail if a mixin cannot be added. It should rather throw a NotExecutableException. Some tests still try to add a mixin without checking whether an implementation supports it.
1,"InvalidItemStateException when attempting concurrent, non conflicting writesI'm having some problems doing concurrent addition of nodes to a parent node in Jackrabbit.  I've attached a simple test which starts up a bunch of threads which add nodes to a parent node concurrently. If I add in locks I can get this to work, however according to the mailing list this should work without locks. However, the test always fails with this:

javax.jcr.InvalidItemStateException: Item cannot be saved because it has been modified externally: node /testParent
	at org.apache.jackrabbit.core.ItemImpl.getTransientStates(ItemImpl.java:281)
	at org.apache.jackrabbit.core.ItemImpl.save(ItemImpl.java:939)
	at org.mule.galaxy.impl.JackrabbitConcurrentWriteTest$1.run(JackrabbitConcurrentWriteTest.java:71)

I'm using Jackrabbit 1.6.1. Here is my (verbose) node type:

  <nodeType name=""galaxy:noSiblings"" 
    isMixin=""false"" 
    hasOrderableChildNodes=""false""
    primaryItemName="""">
    <propertyDefinition name=""*"" requiredType=""undefined"" onParentVersion=""COPY"" />
    <propertyDefinition name=""*"" requiredType=""undefined"" onParentVersion=""COPY"" multiple=""true""/>
    <childNodeDefinition name=""*"" defaultPrimaryType=""nt:unstructured"" onParentVersion=""COPY"" sameNameSiblings=""false"" />
    <supertypes>
        <supertype>nt:base</supertype>
        <supertype>mix:referenceable</supertype>
        <supertype>mix:lockable</supertype>
    </supertypes>
  </nodeType>

And my test:    

package org.mule.galaxy.impl;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

import javax.jcr.LoginException;
import javax.jcr.Node;
import javax.jcr.Repository;
import javax.jcr.RepositoryException;
import javax.jcr.Session;
import javax.jcr.SimpleCredentials;

import junit.framework.TestCase;

import org.apache.commons.io.FileUtils;
import org.apache.jackrabbit.api.JackrabbitNodeTypeManager;
import org.apache.jackrabbit.core.RepositoryImpl;
import org.apache.jackrabbit.core.TransientRepository;
import org.apache.jackrabbit.core.config.RepositoryConfig;

public class JackrabbitConcurrentWriteTest extends TestCase {
    
    private Repository repository;
    private Session session;
    private String parentUUID;
    private boolean continueLoop = true;
    
    public void setUp() throws Exception {
        FileUtils.deleteDirectory(new File(""repository""));
        File repoDir = new File(""repository"");
        repoDir.mkdirs();
        RepositoryConfig config = RepositoryConfig.create(new File(""src/test/resources/META-INF/jackrabbit-repo-test.xml""), repoDir);
        repository = RepositoryImpl.create(config);
        session = createSession();
        
        createCustomNodeTypes(session);
        
        parentUUID = session.getRootNode().addNode(""testParent"", ""galaxy:noSiblings"").getUUID();
        session.save();
        session.logout();
    }

    private Session createSession() throws LoginException, RepositoryException {
        return repository.login(new SimpleCredentials(""username"", ""password"".toCharArray()));
    }
    
    public void testConcurrency() throws Exception {
        final List<Exception> exceptions = new ArrayList<Exception>();
        int threadCount = 20;
        final CountDownLatch latch = new CountDownLatch(threadCount);
        
        for (int i = 0; i < threadCount; i++) {
            Thread thread = new Thread() {

                @Override
                public void run() {
                    try {
                        while (continueLoop) {
                            Session session = createSession();
                            try {
                                Node node = session.getNodeByUUID(parentUUID);
                                node.addNode(UUID.randomUUID().toString());
                                node.save();
                                session.save();
                            } finally {
                                session.logout();
                            }   
                        }
                    } catch (RepositoryException e) {
                        exceptions.add(e);
                        continueLoop = false;
                    }
                    latch.countDown();
                }
                
            };
            thread.start();
        }
        
        latch.await(10, TimeUnit.SECONDS);
        continueLoop = false;
        
        for (Exception e : exceptions) {
            e.printStackTrace();
        }
        assertEquals(0, exceptions.size());
    }
    
    public void createCustomNodeTypes(Session session) throws RepositoryException, IOException {
        // Get the JackrabbitNodeTypeManager from the Workspace.
        // Note that it must be cast from the generic JCR NodeTypeManager to
        // the Jackrabbit-specific implementation.
        // (see: http://jackrabbit.apache.org/node-types.html)
        JackrabbitNodeTypeManager manager = (JackrabbitNodeTypeManager) session.getWorkspace().getNodeTypeManager();

        // Register the custom node types defined in the CND file
        InputStream is = Thread.currentThread().getContextClassLoader()
                .getResourceAsStream(""org/mule/galaxy/impl/jcr/nodeTypes.xml"");
        manager.registerNodeTypes(is, JackrabbitNodeTypeManager.TEXT_XML);
    }
}"
0,"Create ""quick start"" developer bundles for model 1,2,3 deploymentPlease create ""quick start"" developer bundles for deployment models 1,2,3 with all dependance libs and application startup code. Some kind of ""Hello, world"" app on models 1,2,3.
Tomcat and jetty bundles would be nice."
1,"WebDAV/DaveX Servlets susceptible to CSRF AttacksBoth the WebDAV and the remoting (DaveX) servlets are susceptible to CSRF attacks.

"
1,"ALLOW_CIRCULAR_REDIRECTS has no effect if references include query stringALLOW_CIRCULAR_REDIRECTS parameter in HttpClientParameters has no effect if
circular reference contains in URL parameters."
0,Wrap SegmentInfos in public class Wrap SegmentInfos in a public class so that subclasses of MergePolicy do not need to be in the org.apache.lucene.index package.  
0,"LineDocSource should assign stable IDs; docdate field should be NumericFieldSome small enhancements when indexing docs from a line doc source:

  * Assign docid by line number instead of by number-of-docs-indexed;
    this makes the resulting ID stable when using multiple threads

  * The docdate field is now indexed as a String (possible created
    through DateTools).  I added two numeric fields: one that indexes
    .getTime() (= long msec) and another that indexes seconds since
    the day started.  This gives us two numeric fields to play
    with...
"
0,"thread pool implementation of parallel queriesThis component is a replacement for ParallelMultiQuery that runs a thread pool
with queue instead of starting threads for every query execution (so its
performance is better)."
1,"RamUsageEstimator.NUM_BYTES_ARRAY_HEADER and other constants are incorrectRamUsageEstimator.NUM_BYTES_ARRAY_HEADER is computed like that: NUM_BYTES_OBJECT_HEADER + NUM_BYTES_INT + NUM_BYTES_OBJECT_REF. The NUM_BYTES_OBJECT_REF part should not be included, at least not according to this page: http://www.javamex.com/tutorials/memory/array_memory_usage.shtml

{quote}
A single-dimension array is a single object. As expected, the array has the usual object header. However, this object head is 12 bytes to accommodate a four-byte array length. Then comes the actual array data which, as you might expect, consists of the number of elements multiplied by the number of bytes required for one element, depending on its type. The memory usage for one element is 4 bytes for an object reference ...
{quote}

While on it, I wrote a sizeOf(String) impl, and I wonder how do people feel about including such helper methods in RUE, as static, stateless, methods? It's not perfect, there's some room for improvement I'm sure, here it is:

{code}
	/**
	 * Computes the approximate size of a String object. Note that if this object
	 * is also referenced by another object, you should add
	 * {@link RamUsageEstimator#NUM_BYTES_OBJECT_REF} to the result of this
	 * method.
	 */
	public static int sizeOf(String str) {
		return 2 * str.length() + 6 // chars + additional safeness for arrays alignment
				+ 3 * RamUsageEstimator.NUM_BYTES_INT // String maintains 3 integers
				+ RamUsageEstimator.NUM_BYTES_ARRAY_HEADER // char[] array
				+ RamUsageEstimator.NUM_BYTES_OBJECT_HEADER; // String object
	}
{code}

If people are not against it, I'd like to also add sizeOf(int[] / byte[] / long[] / double[] ... and String[])."
1,"Do not increment revison while target workspace is not initializedIt can happen that a workspace is not initialized at all during a syncronize should be performed.
This can happen when a cluster member performs a re-index of a workspace. The changelog should not be ignored it
should be processed after the workspace is initailized."
0,"[PATCH] small fixes to the new scoring.html docThis is an awesome initiative.  We need more docs that cleanly explain the inner workings of Lucene in general... thanks Grant & Steve & others!

I have a few small initial proposed fixes, largely just adding some more description around the components of the formula.  But also a couple typos, another link out to Wikipedia, a missing closing ), etc.  I've only made it through the ""Understanding the Scoring Formula"" section so far."
0,ItemSaveOperation should not swallow stacktraceWhen a StaleItemStateException is thrown the stacktrace is swallowed. This makes it much harder to figure out what went wrong from the logs.
0,"MultiStatus response for PROPPATCH (copied from JCR-175)Rob Owen commented on JCR-175:
--------------------------------------------------

doPropPatch in AbstractWebdavServlet still needs to send back a multistatus (207) response even in the successful case.

I didn't see a way to collect the success/failure status for each property, but instead created a multistatus response and added a propstat (SC_OK) for each of the properties in the setProperties and removeProperties. This allowed a WebDAV client, which expected a multistatus response from PROPPATCH, to work correctly with jcr-server. In the more general case the actual property status code will need to be used ."
1,"NPE in TestNRTThreadsI hit this when while(1)ing this test... I think it's because the logic on when we ask the SegmentReader to load stored fields is off...

{noformat}
*** Thread: Lucene Merge Thread #1 ***
org.apache.lucene.index.MergePolicy$MergeException:
java.lang.NullPointerException
       at org.apache.lucene.index.ConcurrentMergeScheduler.handleMergeException(ConcurrentMergeScheduler.java:507)
       at org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:472)
Caused by: java.lang.NullPointerException
       at org.apache.lucene.index.SegmentReader$FieldsReaderLocal.initialValue(SegmentReader.java:245)
       at org.apache.lucene.index.SegmentReader$FieldsReaderLocal.initialValue(SegmentReader.java:242)
       at org.apache.lucene.util.CloseableThreadLocal.get(CloseableThreadLocal.java:68)
       at org.apache.lucene.index.SegmentReader.getFieldsReader(SegmentReader.java:749)
       at org.apache.lucene.index.SegmentReader.document(SegmentReader.java:838)
       at org.apache.lucene.index.IndexReader.document(IndexReader.java:951)
       at org.apache.lucene.index.TestNRTThreads$1.warm(TestNRTThreads.java:86)
       at org.apache.lucene.index.IndexWriter.mergeMiddle(IndexWriter.java:3311)
       at org.apache.lucene.index.IndexWriter.merge(IndexWriter.java:2875)
       at org.apache.lucene.index.ConcurrentMergeScheduler.doMerge(ConcurrentMergeScheduler.java:379)
       at org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:447)
{noformat}
"
1,"Lazy Field Loading has edge case bug causing read past EOFWhile trying to run some benchmarking of Lazy filed loading, i discovered there seems to be an edge case when accessing the last field of the last doc of an index.

the problem seems to only happen when the doc has been accessed after at least one other doc.

i have not tried to dig into the code to find the root cause, testcase to follow..."
0,"Automatic staging of the non-Maven release artefactsCurrently the Jackrabbit release process includes the following manual steps in addition to the standard Maven release plugin invocations:

<script>
VERSION=x.y.z  # Release version number

# Prepare the release directory
mkdir target/$VERSION

# Copy the main release artifacts created in the release:perform stage
cp target/checkout/RELEASE-NOTES.txt target/$VERSION
cp target/checkout/target/jackrabbit-$VERSION-src.zip* target/$VERSION
cp target/checkout/jackrabbit-webapp/target/jackrabbit-webapp-$VERSION.war* target/$VERSION
cp target/checkout/jackrabbit-jca/target/jackrabbit-jca-$VERSION.rar* target/$VERSION
cp target/checkout/jackrabbit-standalone/target/jackrabbit-standalone-$VERSION.jar* target/$VERSION

# Add MD5 and SHA1 checksums
for BINARY in target/$VERSION/*.zip target/$VERSION/*ar; do
  openssl md5 < $BINARY > $BINARY.md5
  openssl sha1 < $BINARY > $BINARY.sha
done

# Upload the release directory to people.apache.org
scp -r target/$VERSION people.apache.org:public_html/jackrabbit/$VERSION
</script>

I'd like to automate these steps."
0,extensibility patch for DavResourceImplattached is a very simple patch that allows subclasses of DavResourceImpl to access the Node represented by the dav resource.
1,"BQ provides an explanation on a non-matchPlug in seed -6336594106867842617L into TestExplanations then run TestSimpleExplanationsOfNonMatches and you'll hit this:
{noformat}
    [junit] Testsuite: org.apache.lucene.search.TestSimpleExplanationsOfNonMatches
    [junit] Testcase: testBQ2(org.apache.lucene.search.TestSimpleExplanationsOfNonMatches):	FAILED
    [junit] Explanation of [[+yy +w3]] for #0 doesn't indicate non-match: 0.08778467 = (MATCH) product of:
    [junit]   0.17556934 = (MATCH) sum of:
    [junit]     0.17556934 = (MATCH) weight(field:w3 in 0), product of:
    [junit]       0.5165708 = queryWeight(field:w3), product of:
    [junit]         0.7768564 = idf(docFreq=4, maxDocs=4)
    [junit]         0.6649502 = queryNorm
    [junit]       0.33987468 = (MATCH) fieldWeight(field:w3 in 0), product of:
    [junit]         1.0 = tf(termFreq(field:w3)=1)
    [junit]         0.7768564 = idf(docFreq=4, maxDocs=4)
    [junit]         0.4375 = fieldNorm(field=field, doc=0)
    [junit]   0.5 = coord(1/2)
    [junit]  expected:<0.0> but was:<0.08778467>
    [junit] junit.framework.AssertionFailedError: Explanation of [[+yy +w3]] for #0 doesn't indicate non-match: 0.08778467 = (MATCH) product of:
    [junit]   0.17556934 = (MATCH) sum of:
    [junit]     0.17556934 = (MATCH) weight(field:w3 in 0), product of:
    [junit]       0.5165708 = queryWeight(field:w3), product of:
    [junit]         0.7768564 = idf(docFreq=4, maxDocs=4)
    [junit]         0.6649502 = queryNorm
    [junit]       0.33987468 = (MATCH) fieldWeight(field:w3 in 0), product of:
    [junit]         1.0 = tf(termFreq(field:w3)=1)
    [junit]         0.7768564 = idf(docFreq=4, maxDocs=4)
    [junit]         0.4375 = fieldNorm(field=field, doc=0)
    [junit]   0.5 = coord(1/2)
    [junit]  expected:<0.0> but was:<0.08778467>
    [junit] 	at org.apache.lucene.search.CheckHits.checkNoMatchExplanations(CheckHits.java:60)
    [junit] 	at org.apache.lucene.search.TestSimpleExplanationsOfNonMatches.qtest(TestSimpleExplanationsOfNonMatches.java:36)
    [junit] 	at org.apache.lucene.search.TestExplanations.qtest(TestExplanations.java:101)
    [junit] 	at org.apache.lucene.search.TestSimpleExplanations.testBQ2(TestSimpleExplanations.java:235)
    [junit] 	at org.apache.lucene.util.LuceneTestCase.runBare(LuceneTestCase.java:397)
    [junit] 	at org.apache.lucene.util.LuceneTestCase.run(LuceneTestCase.java:389)
{noformat}

The bug is real -- BQ's explain method fails to properly enforce required clauses when the sub-scorer is null.  Thank you random testing!
"
1,"ArrayHits does not end properly when skipTo doesn't find documentIf skipTo(target) does not find a document that that has a higher value than the target, it falls out of the loop and calls next() possibly returning a previously found document. The patch makes sure that -1 is returned in this case, otherwise confusing results might occur.

Index: src/main/java/org/apache/jackrabbit/core/query/lucene/hits/ArrayHits.java
===================================================================
--- src/main/java/org/apache/jackrabbit/core/query/lucene/hits/ArrayHits.java	(revision 608900)
+++ src/main/java/org/apache/jackrabbit/core/query/lucene/hits/ArrayHits.java	(working copy)
@@ -87,9 +87,9 @@
             int nextDocValue = hits[i];
             if (nextDocValue >= target) {
                 index = i;
-                break;
+                return next();
             }
         }
-        return next();
+        return -1;
     }
 }
"
0,"optimization in sending requestBy doing network sniffering, I noticed that httpclient send the request line 
and headers as separate packages. All other httpclient, including IE, Netscape, 
Java's URLConnection all send it as one package. This can be easily fixed using 
some buffering in HttpMethodBase."
1,"Node.addNode(String, String) doesn't prevent use of mixin types as primary type"
0,"shutdown of MultiThreadedHttpConnectionManager- declare 'shutdown' attributes volatile
- interrupt cleanup thread to avoid polling
- don't use iterator on WeakHashMap, ConcurrentModificationException
  might be triggered by garbage collection

patch follows
"
0,"Remove oal.util.MapBackedSet (Java 6 offsers Collections.newSetFromMap())Easy search and replace job. In 3.x we still need the class, as Java 5 does not have Collections.newSetFromMap()."
0,"lock token validityThere are several minor issues in the mapping between JCR lock tokens and WebDAV lock tokens:

1) WebDAV lock tokens are supposed to use URI syntax (such as opaquelocktoken: or urn:uuid:)

2) The server currently computes lock tokens for session-scoped locks based on the node id; these are not valid JCR lock tokens though and cause exceptions when they are re-added when they appear in a Lock-Token header or an If header. This will likely cause requests to fail that use both types of locks (yes, maybe academic but should be fixed anyway)

Proposal:

a) Map lock tokens to oqaquelocktoken URIs, using a constant UUID plus a postfix encoding the original lock token
b) Use a syntax that allows to distinguish between tokens for open-scoped locks or session-scoped locks, so that we do not try to add the latter type to the Session (alternatively, handle exceptions doing so gracefully)"
0,"Various places do map lookups in loop instead of using entrySet iteratorVarious places loop over a keyset iterator and do a map look up each time thru the loop, I plan to convert these places to use an entryset iterator to avoid this."
0,"Make IndexReader really read-only in Lucene 4.0As we change API completely in Lucene 4.0 we are also free to remove read-write access and commits from IndexReader. This code is so hairy and buggy (as investigated by Robert and Mike today) when you work on SegmentReader level but forget to flush in the DirectoryReader, so its better to really make IndexReaders readonly.

Currently with IndexReader you can do things like:
- delete/undelete Documents -> Can be done by with IndexWriter, too (using deleteByQuery)
- change norms -> this is a bad idea in general, but when we remove norms at all and replace by DocValues this is obsolete already. Changing DocValues should also be done using IndexWriter in trunk (once it is ready)"
1,"The class from cotrub directory org.apache.lucene.index.IndexSplitter creates a non correct indexWhen using the method IndexSplitter.split(File destDir, String[] segs) from the Lucene cotrib directory (contrib/misc/src/java/org/apache/lucene/index) it creates an index with segments descriptor file with wrong data. Namely wrong is the number representing the name of segment that would be created next in this index.
If some of the segments of the index already has this name this results either to impossibility to create new segment or in crating of an corrupted segment."
0,"User definable default headers supportProvide the ability to set default headers to be sent on every request.  Should
be used whenever an object is created or recycled.  Needs to be user
configurable."
0,"httpMethod.abort neededThis is the problem : I use the httpclient to fire many requests. At some point 
of time, the server has queued up requests. So certain requests are waiting for 
response. Now when I call httpMethod.releaseConnection, the request should stop 
waiting for the response and the connection should be closed. However, this 
does not happen. The request is only given up after it has timed out."
0,Jcr-Server: remove jcr depedency from dav-library
0,"Reduce log level in MultiIndex for deleting obsolete indexThe MultiIndex class issues a logging message (with info level) that the obsolete index cannot be deleted (quite often).
As the segments are deleted later (with a retry) and this ""warning"" can be ignored (http://dev.day.com/kb/content/wiki/kb/Crx/Troubleshooting/UnableToDeleteObsoleteIndex.html ), it would be nice to reduce the logging level to debug. People, who are maintaining projects, are not aware of Jackarabbit details and are sometimes scared about this ""warning"" :-)

Thank you in advance!

Kind regards
Sergiy"
0,"Add automatic default configurationWe should provide a simple way to start a Jackrabbit repository with default configuration. The current First Hops document exposes too much configuration details to be really friendly to first-time users.

I'd like to provide a default TransientRepository constructor that looks for ""repository.xml"" as the configuration file and ""repository"" as the repository home directory. If either of these does not exist, it is automatically created using default settings. This way the repository setup would boil down to:

    Repository repository = new TransientRepository();

As an added feature I'm planning to support system properties ""org.apache.jackrabbit.repository.conf"" and ""org.apache.jackrabbit.repository.home"" for overriding the defaults.

This improvement would make it easier to write and set up ""Hello, World!"" -type applications, thus helping interested people to try out Jackrabbit. This feature will also make it easier to provide a standard template for test classes that exhibit some error condition. Like this:

    import javax.jcr.*;
    import org.apache.jackrabbit.core.TransientRepository;
    public Example {
        public static void main(String[] args) {
            try {
                Repository repository = new TransientRepository();
                Session session = repository.login();
                try {
                    // YOUR CODE HERE
                } finally {
                    session.close();
                }
            } catch (Exception e) {
                e.printStackTRace();
            }
        }
    }

I'm targetting this for inclusion in 1.0 as it affects none of the existing code and it will probably be very helpful for the expected number of new users we are going to see after 1.0 is out."
1,"registration of new namespace does not respect existing session mappingsconsider the following (starting with a default namespace registry):

// remap nt namespace
Session.setNamespacePrefix(""foobar"", ""http://www.jcp.org/jcr/nt/1.0"");

// create new namespace
NamespaceRegistry.registerNamespace(""foobar"", ""http://www.foo.org/bar/1.0"");

now the session used above that remapped the nt namespace has an ambigous namespace mapping:
foobar --> ""http://www.jcp.org/jcr/nt/1.0""
""http://www.jcp.org/jcr/nt/1.0"" --> foobar
""http://www.foo.org/bar/1.0"" --> foobar

i.e. the new foobar namespace is hidden for this session. either the registration should not work, or an automatic prefix is to be defined in all local session mappings.

"
0,"Make ObjectIterator implement RangeIterator interfaceCurrently, it's not possible to skip a part of results returned in the form of ObjectIterator (for example, to implement db-like pagination feature with offset/max parameters).

It would be great if ObjectIterator implement RangeIterator interface, and it's trivial enough since underlying NodeIterator implements this interface."
0,"org.apache.jackrabbit.core.query.lucene.SearchIndex with in-memory lucene indexIf I'm not wrong, there is actually no way to configure SearchIndex in order to use a memory only lucene index.

Since you can configure a repository using a org.apache.jackrabbit.core.state.mem.InMemPersistenceManager, it makes sense that also search index offers a similar configuration.
MultiIndex and PersistentIndex now always use a org.apache.lucene.store.FSDirectory, they should be refactored in order to allow a switching to a org.apache.lucene.store.RAMDirectory for this."
0,Rename some remaining tests for new IndexReader class hierarchy
0,"Various small improvements to contrib/benchmarkI've worked out a few small improvements to contrib/benchmark:

  * Refactored the common code in Open/CreateIndexTask that sets the
    configuration for the IndexWriter.  This also fixes a bug in
    OpenIndexTasks that prevented you from disabling flushing by RAM.

  * Added a new config property for LineDocMaker:

      doc.reuse.fields=true|false

    which turns on/off reusing of Field/Document by LineDocMaker.
    This lets us measure performance impact of sharing Field/Document
    vs not, and also turn it off when necessary (eg if you have your
    own consumer that uses private threads).

  * Added merge.scheduler & merge.policy config options.

  * Added param for OptimizeTask, which expects an int and calls
    optimize(maxNumSegments) with that param.

  * Added param for CloseIndex(true|false) -- if you pass false that
    means close the index, aborting any running merges
"
0,"Use separate index for jcr:system treeCurrently each workspace index also includes index data of repository wide data (e.g. version nodes under jcr:system). There are several drawbacks with this approach:

- indexing is duplicated and does not scale when using a lot of workspaces
- workspaces cannot be 'put to sleep' when they are not actively used.

The repository should have an additional index for system data, which includes: versioning and nodetype representation in content. Basically data under /jcr:system.

Queries issued on a workspace will then use two index to execute the query: the workspace index and the system index."
0,"DefaultHttpRequestRetryHandler is not handling PUT as an idempotent method for retries, though RFC2616 section 9.1.2 clearly defines it to be one.See attached patch file for a fix:

Fix treats PUT requests as idempotent, marking them to be retried when their enclosed HttpEntity is either null or repeatable.

"
1,"BooleanScorer2 does not compile with ecjBooleanScorer2, derived from scorer, has two inner classes both derived, ultimately, from Scorer.
As such they all define doc() or inherit it.
ecj produces an error when doc() is called from score in the inner classes in the methods
        countingDisjunctionSumScorer
    and
        countingConjunctionSumScorer

The error message is:
    The method doc is defined in an inherited type and in an enclosing scope.

The affected lines are: 160, 161, 178, and 179


I have run the junit test TestBoolean2 (as well as all the others) with
        doc()
    changed to
        BooleanScorer2.this.doc()
    and also to:
        this.doc();
The result was that the tests passed for both.

I added debug statements to all the doc methods and the score methods in the affected classes, but I could not determine what it should be.
"
0,"Implement TokenStream.end() in contrib TokenStreamsSee LUCENE-1448. Mike's patch there already contains the necessary fixes.

I'll attach a patch here as soon as LUCENE-1460 is committed."
1,3.1 fileformats out of dateThe 3.1 fileformats is missing the change from LUCENE-2811
1,"session.exportDocumentView() does not work with jaxb 2.1.x  UnmarshallerHandlerI tried to update my project from Jackrabbit 1.4 to 1.5 and found following error, that is critical for my app.
Project uses Import/Export features of JCR and JAXB to map XML from JCR to java objects.

exportDocumentView() works with streams when I call it like this:

              Unmarshaller umr = getUnmarshaller();
        ...
                fo = new FileOutputStream(""/tmp/export-node.xml"");
                jcrs.exportDocumentView(path,fo , false, false);
                fi = new FileInputStream(""/tmp/export-node.xml"");
                umr.unmarshal(new InputSource(fi));    

But it does not work when I call it using SAX event handler:

            UnmarshallerHandler ctxh = umr.getUnmarshallerHandler();
             jcrs.exportDocumentView(path, ctxh, false, false);

giving following exception:

java.lang.NullPointerException
        at org.xml.sax.helpers.AttributesImpl.getIndex(AttributesImpl.java:203)
        at com.sun.xml.bind.v2.runtime.unmarshaller.InterningXmlVisitor$AttributesImpl.getIndex(InterningXmlVisitor.java:112)
        at com.sun.xml.bind.v2.runtime.unmarshaller.XsiNilLoader.selectLoader(XsiNilLoader.java:62)
        at com.sun.xml.bind.v2.runtime.unmarshaller.ProxyLoader.startElement(ProxyLoader.java:53)
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext._startElement(UnmarshallingContext.java:449)
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.startElement(UnmarshallingContext.java:427)
        at com.sun.xml.bind.v2.runtime.unmarshaller.InterningXmlVisitor.startElement(InterningXmlVisitor.java:71)
        at com.sun.xml.bind.v2.runtime.unmarshaller.SAXConnector.startElement(SAXConnector.java:137)
        at org.apache.jackrabbit.commons.xml.Exporter.startElement(Exporter.java:438)
        at org.apache.jackrabbit.commons.xml.DocumentViewExporter.exportNode(DocumentViewExporter.java:76)
        at org.apache.jackrabbit.commons.xml.Exporter.exportNode(Exporter.java:298)
        at org.apache.jackrabbit.commons.xml.Exporter.exportNodes(Exporter.java:214)
        at org.apache.jackrabbit.commons.xml.DocumentViewExporter.exportNode(DocumentViewExporter.java:77)
        at org.apache.jackrabbit.commons.xml.Exporter.exportNode(Exporter.java:298)
        at org.apache.jackrabbit.commons.xml.Exporter.exportNodes(Exporter.java:214)
        at org.apache.jackrabbit.commons.xml.DocumentViewExporter.exportNode(DocumentViewExporter.java:77)
        at org.apache.jackrabbit.commons.xml.Exporter.exportNode(Exporter.java:298)
        at org.apache.jackrabbit.commons.xml.Exporter.export(Exporter.java:144)
        at org.apache.jackrabbit.commons.AbstractSession.export(AbstractSession.java:461)
        at org.apache.jackrabbit.commons.AbstractSession.exportDocumentView(AbstractSession.java:241)
        at ua.org.dg.semaril.helpers.AbstractTypeResolver.getContent(AbstractTypeResolver.java:31

Version 1.4. works fine.

Jukka, please check your changes to  org.apache.jackrabbit.commons.xml.Exporter.
"
1,"EdgeNGramTokenFilter stops on tokens smaller then minimum gram size.If a token is encountered in the stream that is shorter in length than the min gram size, the filter will stop processing the token stream.

Working up a unit test now, but may be a few days before I can provide it. Wanted to get it in the system."
0,"make max size of CachingEntryCollector's cache configurableTo assist in analyzing the bottleneck it would be good if it was easy to change the max size, currently hard-wired to 5000. Suggest to be pragmatic and do that through a system property."
0,"When we move to java 1.5 in 3.0 we should replace all Interger, Long, etc construction with .valueOf-128 to 128 are guaranteed to be cached and using valueOf in that case is 3.5 times faster than using contructor"
0,"Missing derby dependencythe derby dependency is missing in the OCM subproject. So, the unit tests cannot be executed. "
0,"Jcr-Server: Avoid xml parsing if request body is missingOriginally reported by Brian.

"
0,"Add configuration path to SynonymProviderThis is an enhancement to the SynonymProvider, which will be included in the 1.4 release. The current interface only has a getSynonyms() method but does not allow to initialize the SynonymProvider. It should be possible to initialize the provider with a configuration file. The configuration may then include the synonym definitions or a pointer to a location where the synonyms are defined. The configuration will be implementation dependent.

In addition there should be a simple default implementation in jackrabbit-core. The wordnet-synonyms in the sandbox are only of limited use and must be built manually."
0,Highlighter dist jar includes memory binary class filesMark Harwood sent me a note about this issue noticed by a colleague. Previous releases have the memory class files in the Highlighter distribution jar. The Highlighter uses the same contrib dependency method that the xml query parser does - the problem doesn't manifest there because of the alphabetical order of build though. Fix is to not inheritAll when launching the ant task to build memory contrib.
0,"Logging into a repository with a big version history takes a long timeWenn a SessionImpl instance is created, the VersionManager.getVirtualItemStateProvider method is called. This method - amongst other things - loads the complete (!) version history into memory and walks through it to do some mapping.

Besides taking a long time (near 1 minute just to get the version history through PersistentVersionManager.getVersionHistories()) mapping the version histories ultimately results in an ""OutOfMemoryError"".

Currently there are 768 version histories and this is only a very small fraction of the expected final number of version histories in my application"
0,"Per thread DocumentsWriters that write their own private segmentsSee LUCENE-2293 for motivation and more details.

I'm copying here Mike's summary he posted on 2293:

Change the approach for how we buffer in RAM to a more isolated
approach, whereby IW has N fully independent RAM segments
in-process and when a doc needs to be indexed it's added to one of
them. Each segment would also write its own doc stores and
""normal"" segment merging (not the inefficient merge we now do on
flush) would merge them. This should be a good simplification in
the chain (eg maybe we can remove the *PerThread classes). The
segments can flush independently, letting us make much better
concurrent use of IO & CPU."
0,"TestTimeLimitedCollector  shuold not fail if the testing machine happens to be slowThe test fails on Hudson about once a month, like this:

{quote}
   [junit] Testcase: testTimeoutNotGreedy(org.apache.lucene.search.TestTimeLimitedCollector):  FAILED
   [junit] lastDoc=21 ,&& allowed=799 ,&& elapsed=900 >= 886 = ( 2*resolution +  TIME_ALLOWED + SLOW_DOWN = 2*20 + 799 + 47)
   [junit] junit.framework.AssertionFailedError: lastDoc=21 ,&& allowed=799 ,&& elapsed=900 >= 886 = ( 2*resolution +  TIME_ALLOWED + SLOW_DOWN = 2*20 + 799 + 47)
   [junit]     at org.apache.lucene.search.TestTimeLimitedCollector.doTestTimeout(TestTimeLimitedCollector.java:189)
   [junit]     at org.apache.lucene.search.TestTimeLimitedCollector.testTimeoutNotGreedy(TestTimeLimitedCollector.java:150)
   [junit]
   [junit]
   [junit] Test org.apache.lucene.search.TestTimeLimitedCollector FAILED
{quote}

Modify the test to just print a warning in this case - but still verify that there was an early termination.
"
0,"Improve contrib/benchmark for testing near-real-time search performanceIt's not easy to test NRT performance right now w/ contrib/benchmark.
I've made some initial fixes to improve this:

  * Added new '&', that can follow any task within a serial sequence,
    to ""background"" the task (just like a shell).  The test runs in
    the BG, and then at the end of all serial tasks, any still running
    BG tasks are stopped & joined.

  * Added WaitTask that simply waits; useful for controlling how long
    the BG'd tasks get to run.

  * Added RollbackIndex task, which is real handy for using a given
    index for an NRT test, doing a bunch of updates, then reverting it
    all so your next run uses the same starting index

  * Fixed the existing NearRealTimeReaderTask to simply periodically
    open the new reader (previously it was also running a fixed
    search), and removed its own threading (since & can do that
    now). It periodically wakes up, opens the new reader, and swaps it
    into the PerfRunData, at the schedule you specify.  I switched all
    usage of PerfRunData's get/setIndexReader APIs to use ref
    counting.

With these changes you can now make some very simple but powerful
algs, eg:

{code}
OpenIndex
{
  NearRealtimeReader(0.5) &
  # Warm
  Search
  { ""Index1"" AddDoc > : * : 100/sec &
  [ { ""Search"" Search > : * ] : 4 &
  Wait(30.0)
}
CloseReader
RollbackIndex
RepSumByName
{code}

This alg first opens the IndexWriter, then spawns the BG thread to
reopen the NRT reader twice per second, does one warming Search (in
the FG), spans a new thread to index documents at the rate of 100 per
second, then spawns 4 search threads that do as many searches as they
can.  We then wait for 30 seconds, then stop all the threads, revert
the index, and report.

The patch is a work in progress -- it generally works, but there're a
few nocommits, and, we may want to improve reporting (though I think
that's a separate issue).
"
0,"update NOTICE.txtFrom the java-dev discussion, NOTICE.txt should be up-to-date.

One thing I know, is that the persian stopwords file (analyzers/fa) came from the same source as the arabic stopwords file, and is BSD-licensed. 

There might be others (I think ICU has already been added)"
1,"Removal of first version throws javax.jcr.ReferentialIntegrityExceptionA ReferentialIntegrityException occurs when I delete the first version succeeding the root version. Deleting other versions works fine. Here is the stack:

javax.jcr.ReferentialIntegrityException: Unable to remove version. At least once referenced.
        at org.apache.jackrabbit.core.version.InternalVersionHistoryImpl.removeVersion(InternalVersionHistoryImpl.java:379)
        at org.apache.jackrabbit.core.version.InternalVersionManagerBase.internalRemoveVersion(InternalVersionManagerBase.java:684)
        at org.apache.jackrabbit.core.version.InternalVersionManagerImpl$5.run(InternalVersionManagerImpl.java:495)
        at org.apache.jackrabbit.core.version.InternalVersionManagerImpl$DynamicESCFactory.doSourced(InternalVersionManagerImpl.java:760)
        at org.apache.jackrabbit.core.version.InternalVersionManagerImpl.removeVersion(InternalVersionManagerImpl.java:493)
        at org.apache.jackrabbit.core.version.InternalXAVersionManager.removeVersion(InternalXAVersionManager.java:264)
        at org.apache.jackrabbit.core.version.VersionHistoryImpl.removeVersion(VersionHistoryImpl.java:253)

The code is simple:

VersionHistory vh = session.getWorkspace().getVersionManager().getVersionHistory(path);
vh.removeVersion(version); // where version is the first version succeeding the root version

"
0,"HTTP Client doesn't support multipart/related content-typeIt is not possible to sent data easely as a multipart/related content-type (as 
discribed in rfc 2387) using Http Client."
0,"Redesign NodeInfo.getReferences()The method returns an array of PropertyIds. When there are lots of references this may become an problem. As with any other return value that potentially is large we should return an iterator.

I suggest to redesign the handling of references in line with recent discussions how child infos are handled.

- A NodeInfo implementation must either return the complete list of PropertyIds or null if it does not want to return the PropertyIds at that time.
- Introduce a new method: Iterator<PropertyId> RepositoryService.getReferences(SessionInfo, NodeId)

This has the following advantages:

- loading of references can be delayed until it is really needed
- large collections of references can be streamed through the SPI"
0,"Provide access to cluster recordsCluster records are read/written inside o.a.j.core.cluster.ClusterNode in private methods. In order to support tools such as a journal walker that would display human readable descriptions of cluster records, these inner workings should be made public. "
1,"XMLTextExtractor returns an empty reader when encoding is unsupportedXMLTextExtractor is failing to index xml files.  Searching for content in xml files is not coming back with results.

On the extractText(InputStream stream, String type, String encoding) method, the encoding is coming in as an empty string, and it throws an exception at line 62 (reader.parse(source)).

modifying the following statement fixes the problem:
before:  if (encoding != null) {
after:  if (encoding != null && !encoding.equals("""")) {"
1,occasional MergeException while indexingTestStressIndexing2.testMultiConfig occasionally hits merge exceptions
0,"Analyzer for LatvianLess aggressive form of Kreslins' phd thesis: A stemming algorithm for Latvian.
"
1,"Deadlock: IndexWriter.addIndexes(IndexReader[])A deadlock issue occurs under the following circumstances
- IndexWriter.autoCommit == true
- IndexWriter.directory contains multiple segments
- IndexWriter.AddIndex(IndexReader[]) is invoked

I put together a JUnit test that recreates the deadlock, which I've attached.  It is the first test method, 'testAddIndexByIndexReader()'.

In a nutshell, here is what happens:

        // 1) AddIndexes(IndexReader[]) acquires the write lock,
        // then begins optimization of destination index (this is
        // prior to adding any external segments).
        //
        // 2) Main thread starts a ConcurrentMergeScheduler.MergeThread
        // to merge the 2 segments.
        //
        // 3) Merging thread tries to acquire the read lock at
        // IndexWriter.blockAddIndexes(boolean) in
        // IndexWriter.StartCommit(), but cannot as...
        //
        // 4) Main thread still holds the write lock, and is
        // waiting for the IndexWriter.runningMerges data structure
        // to be devoid of merges with their optimize flag
        // set (IndexWriter.optimizeMergesPending()).
"
0,"NTLM class registers Sun JCE implementation by defaultCurrently the NTLM class attempts to load and register the Sun JCE implementation unless a 
System property is set to indicate a different JCE to use.  We should remove this entirely and leave 
the installation and configuration of the JCE to the application rather than trying to do it ourselves 
as this could cause problems with other implementations of JCE.  I'll attach an initial patch for this 
in a moment, with a patch for the documentation in the morning.  (Writing docs at 1am is never a 
good idea.)"
0,FileRevision should have a flag to control whether to sync the file on every write.FileRevision class syncs the underlying revision.log file it uses on every write which could be a performance problem. Add a boolean flag to control whether to sync the file on every write.
0,"Access cluster node idI need to know the cluster node id in my application. I didn't find any other way than to cast to org.apache.jackrabbit.core.RepositoryImpl : ((RepositoryImpl) session.getRepository()).getConfig().getClusterConfig().getId()

I would appreciate it if I could get to this using the system property ClusterNode.SYSTEM_PROPERTY_NODE_ID."
0,"Documentation Error for FilteredTermEnumAs pointed out in 
http://nagoya.apache.org/eyebrowse/ReadMsg?listName=lucene-user@jakarta.apache.org&msgNo=11034
the documentation of FilteredTermEnum.term() is wrong:
it says 
'Returns the current Term in the enumeration. Initially invalid, valid after
next() called for the first time.'
but the implementation of the constructors of the two derived classes
(FuzzyTermEnum and WildcardTermEnum) already initializes the object to point to
the first match. So calling next() before accessing terms will leave out the
first match.

So I suggest to replace the second sentance by something like
'Returns null if no Term matches or all terms have been enumerated.'
(I checked that for WildcardTermEnum only).
Further one might add some note to the docs of the constructors of FuzzyTermEnum
and WildcardTermEnum that they will point to the first element of the
enumeration (if any)."
0,"Refactoring of the Persistence Managerscurrently the persistence managers reside in:
 org.apache.jackrabbit.core.state
 org.apache.jackrabbit.core.state.db
 org.apache.jackrabbit.core.state.mem
 org.apache.jackrabbit.core.state.obj
 org.apache.jackrabbit.core.state.xml
 (org.apache.jackrabbit.core.state.util)

there are also a lot of other classes that deal with states (eg:
SharedItemStateManager) in the state package that do not relate to
pms.

i would like to move all persistencemanagers and pm related stuff to:

 org.apache.jackrabbit.core.persistence

I'd keep the current classes as deprecated subclasses within
jackrabbit-core.jar until Jackrabbit 2.0. There may (?) be people who
are extending the existing classes, so I'd avoid breaking binary
compatibility there even though we've never promised to actually honor
compatiblity within o.a.j.core."
1,"SegmentTermEnum.next() doesn't maintain prevBuffer at endWhen you're iterating a SegmentTermEnum and you go past the end of the docs, you end up with a state where the nextBuffer = null and the prevBuffer is the penultimate term, not the last term.  This patch fixes it.  (It's also required for my Prefetching bug [LUCENE-506])

Index: java/org/apache/lucene/index/SegmentTermEnum.java
===================================================================
--- java/org/apache/lucene/index/SegmentTermEnum.java	(revision 382121)
+++ java/org/apache/lucene/index/SegmentTermEnum.java	(working copy)
@@ -109,6 +109,7 @@
   /** Increments the enumeration to the next element.  True if one exists.*/
   public final boolean next() throws IOException {
     if (position++ >= size - 1) {
+      prevBuffer.set(termBuffer);
       termBuffer.reset();
       return false;
     }
"
0,Add toString() methods to QOM tree classesHaving the QOM tree classes render themselves to SQL2 in their toString() methods would make debugging the QOM code quite a bit easier.
0,"PostgreSQL support in clustering moduleThere is no ddl file for PostgreSQL in clustering module, so I'm attaching here the one we are using in our project. Hope it helps."
0,"ant generate-maven-artifacts target broken for contribWhen executing 'ant generate-maven-artifacts' from a pristine checkout of branch_3x/lucene or trunk/lucene the following error is encountered:

{code}
dist-maven:
     [copy] Copying 1 file to /home/drew/lucene/branch_3x/lucene/build/contrib/analyzers/common
[artifact:install-provider] Installing provider: org.apache.maven.wagon:wagon-ssh:jar:1.0-beta-2:runtime
[artifact:pom] An error has occurred while processing the Maven artifact tasks.
[artifact:pom]  Diagnosis:
[artifact:pom] 
[artifact:pom] Unable to initialize POM pom.xml.template: Cannot find parent: org.apache.lucene:lucene-contrib for project: org.apache.lucene:lucene-analyzers:jar:3.1-SNAPSHOT for project org.apache.lucene:lucene-analyzers:jar:3.1-SNAPSHOT
[artifact:pom] Unable to download the artifact from any repository
{code}


The contrib portion of the ant build is executed in a subant task which does not pick up the pom definitions for lucene-parent and lucene-contrib from the main build.xml, so the lucene-parent and lucene-controb poms must be loaded specifically as a part of the contrib build using the artifact:pom task.
"
0,"Typo in NodeTypeRegistryIt seems a little typo has been introduced in the NodeTypeRegistry, as illustrated in this stack trace : 

Caused by: javax.jcr.RepositoryException: internal error: invalid resource: nodetypes/custom_nodetypes.xml
	at org.apache.jackrabbit.core.nodetype.NodeTypeRegistry.<init>(NodeTypeRegistry.java:703) ~[jackrabbit-core-2.2-SNAPSHOT.jar:2.2-SNAPSHOT]
	at org.apache.jackrabbit.core.RepositoryImpl.createNodeTypeRegistry(RepositoryImpl.java:422) ~[jackrabbit-core-2.2-SNAPSHOT.jar:na]
	at org.apache.jackrabbit.core.RepositoryImpl.<init>(RepositoryImpl.java:294) ~[jackrabbit-core-2.2-SNAPSHOT.jar:na]

This happens when using a DbFileSystem for the root filesystem. This didn't cause a problem in 2.1.1

The patch attached to this ticket correct the issue."
0,"Fix NOTICE files to match consensus from legal teamAs discussed in LEGAL-62 and the related legal-discuss@ threads, the Jackrabbit NOTICE files currently contain information that doesn't really need to be there. A simple ""Copyright (c) ..."" statement is not a required attribution notice."
0,"Improved background text extractionAs recently discussed on the mailing list (see http://markmail.org/message/syt7lc2guzapt7la), the current approach to text extraction in background threads doesn't work that well especially with the Tika-based extractors that support streamed parsing of many document types.

Also, we currently *all* of the extracted text streams are buffered into Strings before being passed into the Lucene index. It would be good if we could somehow get back to passing just Readers to Lucene."
0,"[PATCH] HttpClient#getHost & HttpClient#getPort methods are misleadingHttpClient#getHost & HttpClient#getPort methods are misleading, accompanied by
obsolete, factually wrong javadocs and as such should be deprecated.

Oleg"
1,"ClusterNode not properly shutdown when repository has shutdownSometimes when the repository is shutdown the ClusterNode is not shutdown and it therefore tries to update records or access a closed Journal file.  The setup that generated the exception is I have 3 VMs each with a Repository that are all connected to the same database.  In the below stack trace one of the repositories is being shutdown however the ClusterNode thread is also trying to update the repository journal at the same time.  Below is a copy of the stack trace.

[4/23/08 9:58:52:496 CDT] 00000061 SystemOut     O 89811653 [WebContainer : 2] INFO  org.apache.jackrabbit.core.RepositoryImpl  - Shutting down repository...
[4/23/08 9:58:52:511 CDT] 0000054c SystemOut     O 89811621 [ClusterNode-b06e4fe7-a602-4a93-b106-e0834046ae0f] INFO  org.apache.jackrabbit.core.cluster.ClusterNode  - Processing revision: 7174
[4/23/08 9:58:52:527 CDT] 00000061 SystemOut     O 89811684 [WebContainer : 2] INFO  org.apache.jackrabbit.core.RepositoryImpl  - shutting down workspace 'default'...
[4/23/08 9:58:52:574 CDT] 00000061 SystemOut     O 89811715 [WebContainer : 2] INFO  org.apache.jackrabbit.core.observation.ObservationDispatcher  - Notification of EventListeners stopped.
[4/23/08 9:58:53:058 CDT] 00000061 SystemOut     O 89812215 [WebContainer : 2] INFO  org.apache.jackrabbit.core.RepositoryImpl  - workspace 'default' has been shutdown
[4/23/08 9:58:53:308 CDT] 00000308 SystemOut     O 91641048 [ClusterNode-e609e8a6-320e-44ea-be0f-ab8c5cb89662] INFO  org.apache.jackrabbit.core.cluster.ClusterNode  - Processing revision: 7165
[4/23/08 9:58:53:324 CDT] 00000308 SystemOut     O 91641064 [ClusterNode-e609e8a6-320e-44ea-be0f-ab8c5cb89662] INFO  org.apache.jackrabbit.core.cluster.ClusterNode  - Processing revision: 7166
[4/23/08 9:58:53:324 CDT] 00000308 SystemOut     O 91641064 [ClusterNode-e609e8a6-320e-44ea-be0f-ab8c5cb89662] INFO  org.apache.jackrabbit.core.cluster.ClusterNode  - Processing revision: 7167
[4/23/08 9:58:53:339 CDT] 00000308 SystemOut     O 91641079 [ClusterNode-e609e8a6-320e-44ea-be0f-ab8c5cb89662] INFO  org.apache.jackrabbit.core.cluster.ClusterNode  - Processing revision: 7168
[4/23/08 9:58:53:339 CDT] 00000308 SystemOut     O 91641079 [ClusterNode-e609e8a6-320e-44ea-be0f-ab8c5cb89662] INFO  org.apache.jackrabbit.core.cluster.ClusterNode  - Processing revision: 7169
[4/23/08 9:58:53:355 CDT] 00000308 SystemOut     O 91641095 [ClusterNode-e609e8a6-320e-44ea-be0f-ab8c5cb89662] INFO  org.apache.jackrabbit.core.cluster.ClusterNode  - Processing revision: 7170
[4/23/08 9:58:53:371 CDT] 00000308 SystemOut     O 91641111 [ClusterNode-e609e8a6-320e-44ea-be0f-ab8c5cb89662] INFO  org.apache.jackrabbit.core.cluster.ClusterNode  - Processing revision: 7171
[4/23/08 9:58:53:386 CDT] 00000308 SystemOut     O 91641126 [ClusterNode-e609e8a6-320e-44ea-be0f-ab8c5cb89662] INFO  org.apache.jackrabbit.core.cluster.ClusterNode  - Processing revision: 7172
[4/23/08 9:58:53:417 CDT] 00000308 SystemOut     O 91641157 [ClusterNode-e609e8a6-320e-44ea-be0f-ab8c5cb89662] INFO  org.apache.jackrabbit.core.cluster.ClusterNode  - Processing revision: 7173
[4/23/08 9:58:53:433 CDT] 00000308 SystemOut     O 91641173 [ClusterNode-e609e8a6-320e-44ea-be0f-ab8c5cb89662] INFO  org.apache.jackrabbit.core.cluster.ClusterNode  - Processing revision: 7174
[4/23/08 9:58:53:433 CDT] 00000308 SystemOut     O 91641173 [ClusterNode-e609e8a6-320e-44ea-be0f-ab8c5cb89662] INFO  org.apache.jackrabbit.core.cluster.ClusterNode  - Processing revision: 7175
[4/23/08 9:58:53:496 CDT] 00000308 SystemOut     O 91641236 [ClusterNode-e609e8a6-320e-44ea-be0f-ab8c5cb89662] INFO  org.apache.jackrabbit.core.journal.AbstractJournal  - Synchronized to revision: 7175
[4/23/08 9:58:54:292 CDT] 00000131 SystemOut     O 89171473 [ClusterNode-4930503b-ab33-4444-999e-c87fb3681bf7] INFO  org.apache.jackrabbit.core.cluster.ClusterNode  - Processing revision: 7173
[4/23/08 9:58:54:308 CDT] 00000131 SystemOut     O 89171504 [ClusterNode-4930503b-ab33-4444-999e-c87fb3681bf7] INFO  org.apache.jackrabbit.core.cluster.ClusterNode  - Processing revision: 7174
[4/23/08 9:58:54:308 CDT] 00000131 SystemOut     O 89171504 [ClusterNode-4930503b-ab33-4444-999e-c87fb3681bf7] INFO  org.apache.jackrabbit.core.cluster.ClusterNode  - Processing revision: 7175
[4/23/08 9:58:54:386 CDT] 00000131 SystemOut     O 89171582 [ClusterNode-4930503b-ab33-4444-999e-c87fb3681bf7] INFO  org.apache.jackrabbit.core.journal.AbstractJournal  - Synchronized to revision: 7175
[4/23/08 9:58:55:417 CDT] 00000061 SystemOut     O 89814574 [WebContainer : 2] INFO  org.apache.jackrabbit.core.RepositoryImpl  - Repository has been shutdown
[4/23/08 9:58:56:089 CDT] 0000054c SystemOut     O 89815199 [ClusterNode-b06e4fe7-a602-4a93-b106-e0834046ae0f] ERROR org.apache.jackrabbit.core.cluster.ClusterNode  - Unable to read revision '7174'.
org.apache.jackrabbit.core.journal.JournalException: I/O error while reading string.
	at org.apache.jackrabbit.core.journal.ReadRecord.readString(ReadRecord.java:169)
	at org.apache.jackrabbit.core.cluster.ClusterNode.consume(ClusterNode.java:979)
	at org.apache.jackrabbit.core.journal.AbstractJournal.doSync(AbstractJournal.java:198)
	at org.apache.jackrabbit.core.journal.AbstractJournal.sync(AbstractJournal.java:173)
	at org.apache.jackrabbit.core.cluster.ClusterNode.sync(ClusterNode.java:303)
	at org.apache.jackrabbit.core.cluster.ClusterNode.run(ClusterNode.java:274)
	at java.lang.Thread.run(Thread.java:797)
Caused by: 
java.io.IOException: Closed Connection
	at oracle.jdbc.driver.DatabaseError.SQLToIOException(DatabaseError.java:517)
	at oracle.jdbc.driver.OracleBlobInputStream.needBytes(OracleBlobInputStream.java:187)
	at oracle.jdbc.driver.OracleBufferedStream.readInternal(OracleBufferedStream.java:130)
	at oracle.jdbc.driver.OracleBufferedStream.read(OracleBufferedStream.java:108)
	at java.io.DataInputStream.readBoolean(DataInputStream.java:246)
	at org.apache.jackrabbit.core.journal.ReadRecord.readString(ReadRecord.java:161)
	... 6 more
[4/23/08 9:58:56:261 CDT] 0000054c SystemOut     O 89815355 [ClusterNode-b06e4fe7-a602-4a93-b106-e0834046ae0f] ERROR org.apache.jackrabbit.core.journal.DatabaseJournal  - Error while moving to next record.
java.sql.SQLException: Closed Connection: next
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:112)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:146)
	at oracle.jdbc.driver.OracleResultSetImpl.next(OracleResultSetImpl.java:181)
	at org.apache.jackrabbit.core.journal.DatabaseRecordIterator.fetchRecord(DatabaseRecordIterator.java:136)
	at org.apache.jackrabbit.core.journal.DatabaseRecordIterator.hasNext(DatabaseRecordIterator.java:85)
	at org.apache.jackrabbit.core.journal.AbstractJournal.doSync(AbstractJournal.java:190)
	at org.apache.jackrabbit.core.journal.AbstractJournal.sync(AbstractJournal.java:173)
	at org.apache.jackrabbit.core.cluster.ClusterNode.sync(ClusterNode.java:303)
	at org.apache.jackrabbit.core.cluster.ClusterNode.run(ClusterNode.java:274)
	at java.lang.Thread.run(Thread.java:797)
[4/23/08 9:58:56:402 CDT] 0000054c SystemOut     O 89815418 [ClusterNode-b06e4fe7-a602-4a93-b106-e0834046ae0f] WARN  org.apache.jackrabbit.core.cluster.ClusterNode  - Unable to set current revision to 7174.
org.apache.jackrabbit.core.journal.JournalException: Revision file closed.
	at org.apache.jackrabbit.core.journal.FileRevision.set(FileRevision.java:100)
	at org.apache.jackrabbit.core.cluster.ClusterNode.setRevision(ClusterNode.java:1073)
	at org.apache.jackrabbit.core.journal.AbstractJournal.doSync(AbstractJournal.java:211)
	at org.apache.jackrabbit.core.journal.AbstractJournal.sync(AbstractJournal.java:173)
	at org.apache.jackrabbit.core.cluster.ClusterNode.sync(ClusterNode.java:303)
	at org.apache.jackrabbit.core.cluster.ClusterNode.run(ClusterNode.java:274)
	at java.lang.Thread.run(Thread.java:797)

"
0,"Consistency check/fix doesn't work with PSQL persistence managerPSQL doesn't save blobs directly into table row, instead saves a link there and puts the binary stream somewhere else. The general consistency check method in BundleDBPersistenceManager doesn't take this into account.
I've fixed this by changing getBytes(Blob) method in BundleDbPersistenceManager to getBytes(ResultSet) and overriding it for PSQL."
0,"First Steps document is outdatedAs reported by Manoj Prasad on the development mailing list, the code and configuration shown on the First Steps document [1] is no longer up to date with the latest Jackrabbit sources. The differences are:

   * the Versioning element needs to be added to the repository configuration file
   * the output values printed by the examples have changes (log messages, new node types, etc.)
   * multiple values (especially jcr:mixinTypes properties) are not handled correctly

The document should be updated.

[1] http://incubator.apache.org/jackrabbit/firststeps.html"
1,"DirectoryTaxonomyWriter can lose the INDEX_CREATE_TIME property, causing DirTaxoReader.refresh() to falsely succeed (or fail)DirTaxoWriter sets createTime to null after it put it in the commit data once. But that's wrong because if one calls commit(Map<>) twice, the second time doesn't record the creation time. Also, in the ctor, if an index exists and OpenMode is not CREATE, the creation time property is not read.

I wrote a couple of unit tests that assert this, and modified DirTaxoWriter to always record the creation time (in every commit) -- that's the only safe way.

Will upload a patch shortly."
0,"Jackrabbit performance test suiteI'd like to set up a multi-version performance test suite inside jackrabbit-core/src/test/performance, similar to the compatibility test suite we added in JCR-2631. This performance test suite would produce comparable performance numbers for a number of simple benchmark tests across different Jackrabbit versions, including the latest snapshot.

"
0,"Improved log message: include pathThe cluster logs a message for each appended operation. The log message is currently the revision number. A more interesting log message would be the user name, and the path of the change (the most specific path if the change contains multiple nodes)."
0,"cache module should handle out-of-order validations properly and unconditionally refreshThere is a protocol recommendation that when we attempt to revalidate a cache entry, but we receive a response that has a Date header that's actually *older* than that of our current entry, we SHOULD revalidate again unconditionally with either max-age=0 or no-cache (since some upstream cache would appear to be out-of-date).

http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.2.6

"
0,"JSR 283: Identifier based event filteringJSR 283 PFD states:

Only events whose associated parent node has one of the identifiers in the uuid String array will be received. If this parameter is null then no identifier-related restriction is placed on events received. Note that specifying an empty array instead of null results in no nodes being listened to. The uuid is used for backwards compatibility with JCR 1.0.
"
0,"javacc-maven-plugin version in jackrabbit-core pom fileHi, I noticed that the pom.xml file of the jackrabbit-core project needs to specify version ""2.1"" for the javacc-maven-plugin because if it takes the 2.2-SNAPSHOT it won't compile. I put the 2.1 version and it worked fine.

<plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>javacc-maven-plugin</artifactId>
        <version>2.1</version>
        <executions>


Im working with revision 529712 [April 17, 2007, 15:05 EST]"
1,"When node is created and locked in same transaction, exception is thrownFollowing code fails when executed inside an XA transaction:

Node n = session.getRootNode().addNode(""n"");
n.addMixin(""mix:lockable"");
session.save();
Lock lock = n.lock(false, false);

Stacktrace is

Caused by: javax.transaction.xa.XAException
	at org.apache.jackrabbit.core.TransactionContext.prepare(TransactionContext.java:155)
	at org.apache.jackrabbit.core.XASessionImpl.commit(XASessionImpl.java:337)
	at org.apache.jackrabbit.jca.TransactionBoundXAResource.commit(TransactionBoundXAResource.java:39)
	at org.apache.geronimo.transaction.manager.WrapperNamedXAResource.commit(WrapperNamedXAResource.java:47)
	at org.apache.geronimo.transaction.manager.TransactionImpl.commit(TransactionImpl.java:301)
	... 32 more
Caused by: org.apache.jackrabbit.core.TransactionException: Unable to update.
	at org.apache.jackrabbit.core.lock.XAEnvironment.prepare(XAEnvironment.java:275)
	at org.apache.jackrabbit.core.lock.XALockManager.prepare(XALockManager.java:245)
	at org.apache.jackrabbit.core.TransactionContext.prepare(TransactionContext.java:138)
	... 36 more
Caused by: javax.jcr.ItemNotFoundException: failed to build path of 48fb59d8-ac77-4b9f-8b53-9f2492dca5e5: 48fb59d8-ac77-4b9f-8b53-9f2492dca5e5: 48fb59d8-ac77-4b9f-8b53-9f2492dca5e5
	at org.apache.jackrabbit.core.HierarchyManagerImpl.getPath(HierarchyManagerImpl.java:407)
	at org.apache.jackrabbit.core.CachingHierarchyManager.getPath(CachingHierarchyManager.java:272)
	at org.apache.jackrabbit.core.lock.LockManagerImpl.getPath(LockManagerImpl.java:651)
	at org.apache.jackrabbit.core.lock.LockManagerImpl.internalLock(LockManagerImpl.java:276)
	at org.apache.jackrabbit.core.lock.XAEnvironment$LockInfo.update(XAEnvironment.java:409)
	at org.apache.jackrabbit.core.lock.XAEnvironment.prepare(XAEnvironment.java:273)
	... 38 more
Caused by: org.apache.jackrabbit.core.state.NoSuchItemStateException: 48fb59d8-ac77-4b9f-8b53-9f2492dca5e5
	at org.apache.jackrabbit.core.state.SessionItemStateManager.getItemState(SessionItemStateManager.java:189)
	at org.apache.jackrabbit.core.HierarchyManagerImpl.getItemState(HierarchyManagerImpl.java:188)
	at org.apache.jackrabbit.core.HierarchyManagerImpl.getPath(HierarchyManagerImpl.java:402)
	... 43 more

"
0,"default behaviour of useExpectHeaderI suggest to set the ExpectContinueMethod.setUseExpectHeader per default to
false or to arrange that per default it is not used. We lost an awfull lot of
time in a project in which we used MultipartPostMethod via a proxy. Everthing
worked fine in dev, however as soon as we started to use the proxy in production
or testing environment we had severe problems. We lost several manday looking
for the problem, including sniffing and logging op the proxy. It ended up to be
the useexpectheader which was true per default. Putting in on false ended our
problems...

In my opinion it is a bit hard to make something default behaviour if the
javadoc warns : <snip>
handshake should be used with caution, as it may cause problems with HTTP
servers and proxies that do not support HTTP/1.1 protocol.
</snip>

regards
dirkp"
0,"[Maven] Migrate checkstyle.properties to XMLNewer Checkstyle versions (used with latest Maven builds) can not use the old
properties configuration file. They work with XML configuration files.
checkstyle.properties must be migrated in order to use a current version of Maven."
0,"Create OSGi Bundles from jackrabbit-webdav and jackrabbit-jcr-server librariesPropose to generate bundles from the jackrabbit-webdav (exporting everything) and jackrabbit-jcr-server (exporting nothing) libraries. In addition a new class is added to the jackrabbit-jcr-server library, which in case of deployment in an OSGi framework will register a Servlet with the OSGi HttpService to expose the JcrRemotingServlet."
1,"[PATCH] ClassDescriptor.hasIdField uses faulty logichasIdField tries to compare a FieldDescriptor to an empty string, which doesn't make sense, here:

     public boolean hasIdField() {
        return (this.idFieldDescriptor != null && ! this.idFieldDescriptor.equals(""""));
     }


i'm assuming it should be

       return (this.idFieldDescriptor != null && this.idFieldDescriptor.isId());

patch does this

"
1,"IndexDeletionPolicy.delete behaves incorrectly when deleting latest generation I have been looking to provide the ability to rollback committed transactions and encountered some issues.
I appreciate IndexDeletionPolicy's main motivation is to handle cleaning away OLD commit points but it does not explicitly state that it can or cannot be used to clean NEW commit points.

If this is not supported then the documentation should ideally state this. If the intention is to support this behaviour then read on .......

There seem to be 2 issues so far:
1) The first attempt to call IndexCommit.delete on the latest commit point fails to remove any contents. The subsequent call succeeds however
2) Deleting the latest commit point fails to update the segments.gen file to point to segments_N-1. New IndexReaders that are opened are then misdirected to open segments_N which has been deleted

Junit test to follow...

"
0,"add Galician analyzerAdds analyzer for Galician, based upon [""Regras do lematizador para o galego""|http://bvg.udc.es/recursos_lingua/stemming.jsp] , and a set of stopwords created in the usual fashion.

This is really just an adaptation of the Portuguese [RSLP|http://www.inf.ufrgs.br/~viviane/rslp/index.htm], so I added that too, and modified our existing hand-coded RSLP-S (RSLP's plural-only step) to just be a plural-only flow of RSLP.
"
0,"RepositoryStatistics should be more flexibleRight now, Jackrabbit reports TimeSeries for things like BUNDLE_READ_COUNTER, BUNDLE_WRITE_COUNTER, etc. but there is no way to extend Jackrabbit and report TimeSeries for additional properties. That's because the type of TimeSeries are defined in RepositoryStatistics class as Type enum. Enums in Java cannot be extended which limits to TimeSeries to the Types defined in RepositoryStatistics. 

I suggest that RepositoryStatistics is improved to allow additional TimeSeries. One approach is to define an additional RepositoryStatistics#getType(String) method. "
1,"SSLSocketFactory.connectSocket(...) possible NPE    public Socket connectSocket(
            final Socket sock,
            final InetSocketAddress remoteAddress,
            final InetSocketAddress localAddress,
            final HttpParams params) throws IOException, UnknownHostException, ConnectTimeoutException {
...

        SSLSocket sslsock = (SSLSocket) (sock != null ? sock : createSocket()); // ==> sock may be null
        if (localAddress != null) {
            sock.setReuseAddress(HttpConnectionParams.getSoReuseaddr(params)); // ==> NPE if sock is null
            sslsock.bind(localAddress);
        }

Should sock.setReuseAddress be sslsock.setReuseAddress?
"
0,Add path encoding to ISO9075The utility class ISO9075 only allows you to encode and decode names. It should also have methods that allow you to pass a path. This is useful when a XPath query is created with a path constraint based on e.g. a Node.getPath().
0,"don't reuse byte[] in IndexInput/Output for read/writeStringIndexInput now holds a private ""byte[] bytes"", which it re-uses for reading strings.  Likewise, IndexOutput holds a UTF8Result (which holds ""byte[] bytes""), re-used for writing strings.

These are both dangerous, since on reading or writing immense strings, we never free this storage.

We don't use read/writeString in very perf sensitive parts of the code, so, I think we should not reuse the byte[] at all.

I think this is likely the cause of the recent ""IndexWriter and memory usage"" thread, started by Ross Woolf on java-user@."
0,"UUIDDocId should check IndexReader using equals()The method UUIDDocId.getDocumentNumber(IndexReader) tests the passed index reader using its object identity.

This is a left over when there was one index per workspace and no system index. When the system index was introduced each query execution will create a new CombinedIndexReader covering the workspace index and the system index. The method should now use the equals() method to test the passed IndexReader."
0,"ASCIIFoldingFilter: expose folding logic + small improvements to ISOLatin1AccentFilterThis patch adds a couple of non-ascii chars to ISOLatin1AccentFilter (namely: left & right single quotation marks, en dash, em dash) which we very frequently encounter in our projects. I know that this class is now deprecated; this improvement is for legacy code that hasn't migrated yet.

It also enables easy access to the ascii folding technique use in ASCIIFoldingFilter for potential re-use in non-Lucene-related code."
0,Remove Searcher from Weight#explainExplain needs to calculate corpus wide stats in a way that is consistent with MultiSearcher.
0,"[PATCH] queryParser.setOperator(int) should be made typesafeThere are AND and DEFAULT_OPERATOR_AND in QueryParser, so calling 
setOperator(QueryParser.AND) looks okay and compiles, but it's not correct. 
I'll attach a patch that uses a typesafe enum to avoid this problem. As 
there's also a getOperator method I had to change the name of the new method 
to get/setDefaultOperator. I don't like that, but it seems to be the only way 
to avoid compile errors for people who switch to a new version of Lucene. 
 
Okay to commit?"
0,Allow for wildcard restriction in resource-based ACEs
0,"add suggester that uses shortest path/wFST instead of bucketsCurrently the FST suggester (really an FSA) quantizes weights into buckets (e.g. single byte) and puts them in front of the word.
This makes it fast, but you lose granularity in your suggestions.

Lately the question was raised, if you build lucene's FST with positiveintoutputs, does it behave the same as a tropical semiring wFST?

In other words, after completing the word, we instead traverse min(output) at each node to find the 'shortest path' to the 
best suggestion (with the highest score).

This means we wouldnt need to quantize weights at all and it might make some operations (e.g. adding fuzzy matching etc) a lot easier."
0,"some jcr-client tests fail if a server runs on localhost:80 This is caused by RepositoryFactoryImplTest.testGetSpi2davRepository() and probably RepositoryFactoryImplTest.testGetSpi2davexRepository(). 

To fix this the tests should set up the required webDav servers for the test runs. Currently the tests just try to connect to localhost:80 expecting the connection to fail in a specific way. "
1,"SegmentMerger should assert .del and .s* files are not passed to createCompoundFileSpinoff from LUCENE-3126. SegmentMerger.createCompoundFile does not document that it should not receive files that are not included in the .cfs, such as .del and .s* (separate norms). Today, that method is called from code which ensures that, but we should:
# Add some documentation to clarify that.
# Add some asserts so that if a test (or other code, running w/ -ea) does that, we catch it.

Will post a patch soon"
0,"Create UAX29URLEmailAnalyzer: a standard analyzer that recognizes URLs and emailsThis Analyzer should contain the same components as StandardAnalyzer, except for the tokenizer, which should be UAX29URLEmailTokenizer instead of StandardTokenizer."
0,"auto close idle connectionsThis has been mentioned several times on the mailing list (most recently here:
http://nagoya.apache.org/eyebrowse/ReadMsg?listName=commons-httpclient-dev@jakarta.apache.org&msgNo=5191
)
It is desirable for the http client to close it's connection after some
configurable idle time. Failing to do so causes the server (and every TCP
resource in between) to keep the socket open and possibly run out of resources
under load.

The HTTP 1.1 RFC has this to say under section 8.1.4:
Servers will usually have some time-out value beyond which they will
   no longer maintain an inactive connection. Proxy servers might make
   this a higher value since it is likely that the client will be making
   more connections through the same server. The use of persistent
   connections places no requirements on the length (or existence) of
   this time-out for either the client or the server.

   When a client or server wishes to time-out it SHOULD issue a graceful
   close on the transport connection. Clients and servers SHOULD both
   constantly watch for the other side of the transport close, and
   respond to it as appropriate. If a client or server does not detect
   the other side's close promptly it could cause unnecessary resource
   drain on the network.

The first sentence of the 2nd paragraph is interesting: how is the client
supposed to do a ""graceful close""? Does it simply mean closing the socket?
One possiblity may be to issue a HTTP/OPTIONS * request with a Connection:close
header."
1,"NativeFSLockFactory.makeLock(...).isLocked() does not workIndexWriter.isLocked() or IndexReader.isLocked() do not work with NativeFSLockFactory.

The problem is, that the method NativeFSLock.isLocked() just checks if the same lock instance was locked before (lock != null). If the LockFactory created a new lock instance, this always returns false, even if its locked."
1,"DateValue.equals() relies on Calendar.equals()JSR170 states regarding Date values:
""The text format of dates must follow the following ISO 8601:2000-compliant format"".

While DateValue.valueOf(String) and DateValue.getString() both rely on the functionality provided by the org.apache.jackrabbit.util.ISO8601, DateValue.equals() compares the equality of the internal Calendar object (DateValue line 89). This may return false even if the Iso-format of both values are equal.

In other words: Creating a new DateValue using the ValueFactory from the String representation of an existing DateValue will return an object, that is not equal to the original DateValue. The reason for this is, that the String does not contain all infomation, that is used during Calendar.equals.

regards
angela

"
1,"FastVectorHighlighter: AIOOBE occurs if one PhraseQuery is contained by another PhraseQueryI'm very sorry but this is another one. If q=""a b c d"" OR ""b c"", then ArrayIndexOutOfBoundsException occurs in FieldQuery.checkOverlap(). I'm working on this and fix with test case soon to be posted.
Thank you for your patient!
"
0,"Implement ""point in time"" searching without relying on filesystem semanticsThis was touched on in recent discussion on dev list:

  http://www.gossamer-threads.com/lists/lucene/java-dev/41700#41700

and then more recently on the user list:

  http://www.gossamer-threads.com/lists/lucene/java-user/42088

Lucene's ""point in time"" searching currently relies on how the
underlying storage handles deletion files that are held open for
reading.

This is highly variable across filesystems.  For example, UNIX-like
filesystems usually do ""close on last delete"", and Windows filesystem
typically refuses to delete a file open for reading (so Lucene retries
later).  But NFS just removes the file out from under the reader, and
for that reason ""point in time"" searching doesn't work on NFS
(see LUCENE-673 ).

With the lockless commits changes (LUCENE-701 ), it's quite simple to
re-implement ""point in time searching"" so as to not rely on filesystem
semantics: we can just keep more than the last segments_N file (as
well as all files they reference).

This is also in keeping with the design goal of ""rely on as little as
possible from the filesystem"".  EG with lockless we no longer re-use
filenames (don't rely on filesystem cache being coherent) and we no
longer use file renaming (because on Windows it can fails).  This
would be another step of not relying on semantics of ""deleting open
files"".  The less we require from filesystem the more portable Lucene
will be!

Where it gets interesting is what ""policy"" we would then use for
removing segments_N files.  The policy now is ""remove all but the last
one"".  I think we would keep this policy as the default.  Then you
could imagine other policies:

  * Keep past N day's worth

  * Keep the last N

  * Keep only those in active use by a reader somewhere (note: tricky
    how to reliably figure this out when readers have crashed, etc.)

  * Keep those ""marked"" as rollback points by some transaction, or
    marked explicitly as a ""snaphshot"".

  * Or, roll your own: the ""policy"" would be an interface or abstract
    class and you could make your own implementation.

I think for this issue we could just create the framework
(interface/abstract class for ""policy"" and invoke it from
IndexFileDeleter) and then implement the current policy (delete all
but most recent segments_N) as the default policy.

In separate issue(s) we could then create the above more interesting
policies.

I think there are some important advantages to doing this:

  * ""Point in time"" searching would work on NFS (it doesn't now
    because NFS doesn't do ""delete on last close""; see LUCENE-673 )
    and any other Directory implementations that don't work
    currently.

  * Transactional semantics become a possibility: you can set a
    snapshot, do a bunch of stuff to your index, and then rollback to
    the snapshot at a later time.

  * If a reader crashes or machine gets rebooted, etc, it could choose
    to re-open the snapshot it had previously been using, whereas now
    the reader must always switch to the last commit point.

  * Searchers could search the same snapshot for follow-on actions.
    Meaning, user does search, then next page, drill down (Solr),
    drill up, etc.  These are each separate trips to the server and if
    searcher has been re-opened, user can get inconsistent results (=
    lost trust).  But with, one series of search interactions could
    explicitly stay on the snapshot it had started with.

"
1,"InstantiatedIndexReader throws NullPointerException in norms() when used with a MultiReader
When using InstantiatedIndexReader under a MultiReader where the other Reader contains documents, a NullPointerException is thrown here;

 public void norms(String field, byte[] bytes, int offset) throws IOException {
    byte[] norms = getIndex().getNormsByFieldNameAndDocumentNumber().get(field);
    System.arraycopy(norms, 0, bytes, offset, norms.length);
  }

the 'norms' variable is null. Performing the copy only when norms is not null does work, though I'm sure it's not the right fix.

java.lang.NullPointerException
	at org.apache.lucene.store.instantiated.InstantiatedIndexReader.norms(InstantiatedIndexReader.java:297)
	at org.apache.lucene.index.MultiReader.norms(MultiReader.java:273)
	at org.apache.lucene.search.TermQuery$TermWeight.scorer(TermQuery.java:70)
	at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:131)
	at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:112)
	at org.apache.lucene.search.Searcher.search(Searcher.java:136)
	at org.apache.lucene.search.Searcher.search(Searcher.java:146)
	at org.apache.lucene.store.instantiated.TestWithMultiReader.test(TestWithMultiReader.java:41)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)

"
0,"MultiThreadedConnectionManager should provide a shutdownMultiThreadedConnectionManager should provide a shutdown() method to release 
all its resources, it is currently using daemon threads that cannot be stopped 
and HTTP connections that cannot be released.
This is annoying when the pool of connection is created within a web 
application that is undeployed and re-deployed (i.e. the JVM is not restarted) 
consuming resources on local and remote servers."
0,"the spi2dav sandbox project should be put into a common release cycleRemoting JSR170 calls requires obviously both server and client sides.  The server is available for download, as JCR WebDAV Server in both http://www.apache.org/dyn/closer.cgi/jackrabbit/binaries/jackrabbit-jcr-server-1.4.1.jar and http://www.apache.org/dyn/closer.cgi/jackrabbit/binaries/jackrabbit-webapp-1.4.war.  However, the client is just casually mentioned as ""can be found in the Jackrabbit sandbox.""  This issue is to request that the SPI2DAV client code (especially a ResponseFactory that returns a JCR2SPI Repository implementation) be available for download as well.

Furthermore, please make the RepositoryFactory implements javax.naming.spi.ObjectFactory so that only configuration (vs. Java coding) is needed in order to use it.  This is how org.apache.jackrabbit.rmi.client.ClientRepositoryFactory works."
1,Null paths break the compare methodThe compare method cannot handle the path being null
1,"Syns2Index failsRunning Syns2Index fails with a
java.lang.IllegalArgumentException: maxBufferedDocs must at least be 2 when enabled exception.
at org.apache.lucene.index.IndexWriter.setMaxBufferedDocs(IndexWriter.java:883)
at org.apache.lucene.wordnet.Syns2Index.index(Syns2Index.java:249)
at org.apache.lucene.wordnet.Syns2Index.main(Syns2Index.java:208)

The code is here
		// blindly up these parameters for speed
		writer.setMergeFactor( writer.getMergeFactor() * 2);
		writer.setMaxBufferedDocs( writer.getMaxBufferedDocs() * 2);

It looks like getMaxBufferedDocs used to return 10, and now it returns -1, not sure when that started happening.

My suggestion would be to just remove these three lines.  Since speed has already improved vastly, there isn't a need to speed things up.

To run this, Syns2Index requires two args.  The first is the location of the wn_s.pl file, and the second is the directory to create the index in."
0,Make DefaultSecurityManager the default security manager (instead of SimpleSecurityManager)JCR-2164 made DefaultSecurityManager the default security manager for test runs. However the repository.xml included in jackrabbit core and the one for cluster tests still refer to the SimpleSecurityManager. For consistency reasons I think it makes sense to change these places to DefaultSecurityManager.
1,"IndexWriter.addIndexes results in java.lang.OutOfMemoryErrorI'm re-opening a bug I logged previously. My previous bug report has 
disappeared. 

Issue: IndexWriter.addIndexes results in java.lang.OutOfMemoryError for large 
merges.

Until this writing, I've been merging successfully only through repetition, 
i.e. I keep repeating merges until a success. As my index size has grown, my 
success rate has steadily declined. I've reached the point where merges now 
fail 100% of the time. I can't merge.

My tests indicate the threshold is ~30GB on P4/800MB VM with 6 indexes. I have 
repeated my tests on many different machines (not machine dependent). I have 
repeated my test using local and attached storage devices (not storage 
dependent).

For what its worth, I believe the exception occurs entirely during the optimize 
process which is called implicitly after the merge. I say this because each 
time it appears the correct amount of bytes are written to the new index. Is it 
possible to decouple the merge and optimize processes?


The code snippet follows. I can send you the class file and 120GB data set. Let 
me know how you want it.

>>>>> code sample >>>>>

Directory[] sources = new Directory[paths.length];
...

Directory dest = FSDirectory.getDirectory( path, true);
IndexWriter writer = new IndexWriter( dest, new TermAnalyzer( 
StopWords.SEARCH_MAP), true);

writer.addIndexes( sources);
writer.close();"
1,"VirtualNodeTypeStateProvider creates PropertyState with type != value(s).getTypeVirtualNodeTypeStateProvider creates the item states for the in content representation of the node type definitions and in case of jcr:defaultValues hard codes the type of the property state (thus the jcr property) to PropertyType.STRING.

the nt-definition of nt:propertyDefinition however states that jcr:defaultValues doesn't have a required type, thus the type should rather be determined based on the values themselves.

the current behaviour leads situations where

Property.getType != Property.getValues()[0].getType()

which from my point of view is a bug."
0,"TCK: SetPropertyAssumeTypeTest doesn't allow ValueFormatException upon type conversion failureSetPropertyAssumeTypeTest# testValuesConstraintVioloationExceptionBecauseOfInvalidTypeParameter

This test should allow an implementation to throw ValueFormatException.  In Section 7.1.5, the Javadoc for setProperty(String, Value[] int) states: ""If the property type of the supplied Value objects is different from that specified, then a best-effort conversion is attempted. If the conversion fails, a ValueFormatException is thrown.""

Proposal: catch and consume ValueFormatException.

--- SetPropertyAssumeTypeTest.java      (revision 422074)
+++ SetPropertyAssumeTypeTest.java      (working copy)
@@ -28,6 +28,7 @@
 import javax.jcr.PropertyType;
 import javax.jcr.RepositoryException;
 import javax.jcr.Property;
+import javax.jcr.ValueFormatException;
 import java.util.Calendar;
 import java.util.Date;
  
@@ -525,6 +526,9 @@
         catch (ConstraintViolationException e) {
             // success
         }
+        catch (ValueFormatException e) {
+            // success
+        }
     }
"
0,"FastVectorHighlighter - expose FieldFragList.fragInfo for user-customizable FragmentsBuilderNeeded to build a custom highlightable snippet - snippet should start with the sentence containing the first match, then continue for 250 characters.

So created a custom FragmentsBuilder extending SimpleFragmentsBuilder and overriding the createFragments(IndexReader reader, int docId, String fieldName, FieldFragList fieldFragList) method - unit test containing the code is attached to the JIRA.

To get this to work, needed to expose (make public) the FieldFragList.fragInfo member variable. This is currently package private, so only FragmentsBuilder implementations within the lucene-highlighter o.a.l.s.vectorhighlight package (such as SimpleFragmentsBuilder) can access it. Since I am just using the lucene-highlighter.jar as an external dependency to my application, the simplest way to access FieldFragList.fragInfo in my class was to make it public.
"
0,"Create a Codec to work with streaming and append-only filesystemsSince early 2.x times Lucene used a skip/seek/write trick to patch the length of the terms dict into a place near the start of the output data file. This however made it impossible to use Lucene with append-only filesystems such as HDFS.

In the post-flex trunk the following code in StandardTermsDictWriter initiates this:
{code}
    // Count indexed fields up front
    CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT); 

    out.writeLong(0);                             // leave space for end index pointer
{code}
and completes this in close():
{code}
      out.seek(CodecUtil.headerLength(CODEC_NAME));
      out.writeLong(dirStart);
{code}

I propose to change this layout so that this pointer is stored simply at the end of the file. It's always 8 bytes long, and we known the final length of the file from Directory, so it's a single additional seek(length - 8) to read it, which is not much considering the benefits."
0,"rename expungeDeletesSimilar to optimize(), expungeDeletes() has a misleading name.

We already had problems with this on the user list because TieredMergePolicy
didn't 'expunge' all their deletes.

Also I think expunge is the wrong word, because expunge makes it seem
like you just wrangle up the deletes and kick them out of the party and
that it should be fast.



"
0,"querystring still not set in Url*Method constructorsThe queryString is still not set in various Url*Method's constructors. It does 
get set in setUrl. The simplest fix is to call setUrl in these constructors."
0,"update tests so that both Query.XPATH and Query:SQL are treated as optional featuresIn JCR 2.0, both Query.XPATH and Query.SQL are optional (or, actually, deprecated).

We either need to modify the tests so that they pass on a repository that doesn't support them (-> NotExecutableException), or remove them altogether."
1,"Proxy-Authorization header received on server side
 
 I'm following example
 http://hc.apache.org/httpcomponents-client-ga/examples.html
 Proxy authentication
 
 but it seems that not only proxy is receiving credentials for proxy.
 In log, which is generated at target.host I can see header
 Proxy-Authorization: Basic ....

--------- HEADER
Host:target.host:443
Connection:Keep-Alive
User-Agent:Apache-HttpClient/4.1 (java 1.5)
Proxy-Authorization:Basic Z
--------- POST


Dusan"
1,"DirectoryTaxonomyReader.refresh misbehaves with ref countsDirectoryTaxonomyReader uses the internal IndexReader in order to track its own reference counting. However, when you call refresh(), it reopens the internal IndexReader, and from that point, all previous reference counting gets lost (since the new IndexReader's refCount is 1).

The solution is to track reference counting in DTR itself. I wrote a simple unit test which exposes the bug (will be attached with the patch shortly)."
1,"QueryParser does not correctly handle escaped characters within quoted stringsThe Lucene query parser incorrectly handles escaped characters inside quoted strings; specifically, a quoted string that ends with an (escaped) backslash followed by any additional quoted string will not be properly tokenized. Consider the following example:

bq. {{(name:""///mike\\\\\\"") or (name:""alphonse"")}}

This is not a contrived example -- it derives from an actual bug we've encountered in our system. Running this query will throw an exception, but removing the second clause resolves the problem. After some digging I've found that the problem is with the way quoted strings are processed by the lexer: you'll notice that Mike's name is followed by three escaped backslashes right before the ending quote; looking at the JavaCC code for the query parser highlights the problem:

{code:title=QueryParser.jj|borderStyle=solid}
<DEFAULT> TOKEN : {
  <AND:       (""AND"" | ""&&"") >
| <OR:        (""OR"" | ""||"") >
| <NOT:       (""NOT"" | ""!"") >
| <PLUS:      ""+"" >
| <MINUS:     ""-"" >
| <LPAREN:    ""("" >
| <RPAREN:    "")"" >
| <COLON:     "":"" >
| <STAR:      ""*"" >
| <CARAT:     ""^"" > : Boost
| <QUOTED:     ""\"""" (~[""\""""] | ""\\\"""")* ""\"""">
...
{code}

Take a look at the way the QUOTED token is constructed -- there is no lexical processing of the escaped characters within the quoted string itself. In the above query the lexer matches everything from the first quote through all the backslashes, _treating the end quote as an escaped character_, thus also matching the starting quote of the second term. This causes a lexer error, because the last quote is then considered the start of a new match.

I've come to understand that the Lucene query handler is supposed to be able to handle unsanitized human input; indeed the lexer above would handle a query like {{""blah\""}} without complaining, but that's a ""best-guess"" approach that results in bugs with legal, automatically generated queries. I've attached a patch that fixes the erroneous behavior but does not maintain leniency with malformed queries; I believe this is the correct approach because the two design goals are fundamentally at odds. I'd appreciate any comments."
0,"Allow importing of ACL with unknown principalsIt should be possible to import ACLs with principals that are not known to the principal provider, yet."
0,adding EmptyDocIdSet/IteratorAdding convenience classes for EmptyDocIdSet and EmptyDocIdSetIterator
0,"Ability to group search results by fieldIt would be awesome to group search results by specified field. Some functionality was provided for Apache Solr but I think it should be done in Core Lucene. There could be some useful information like total hits about collapsed data like total count and so on.

Thanks,
Artyom"
0,"LoginModuleConfig should allow to specify principalProvider-name in addition to the classGilles Metz reported this issue regarding login module configuration with Day's CRX based on Jackrabbit, which in
previous versions allowed to specify multiple prinicpal providers of the same class but with different configurations.
With JR 2.0 and 2.1 this is not supported as the pp class name is used as key in the registry and does not allow
to specify a separate key/name.





"
0,"GCJ makefile hardcodes compiler commandssrc/gcj/Makefile hardcodes the command names for gcj, gcjh, and g++. This makes it difficult to 
compile with a particular version of GCJ if multiple are installed with suffixes (eg, gcj-4.0)

Steps to reproduce:
1. Configure, compile, and install GCC/GCJ with something like --program-suffix=-4.0
2. cd ~/src/lucene && ant gcj

Expected results:
Somehow be able to specify my compiler.

Actual results:
Can't find 'gcj' executable, or worse runs wrong version. :)

Suggested fix: as is common with variable names like CC to force a C compiler, allow the builder to 
override the compiler commands used by setting optional environment variables GCJ etc.
Patch to be attached.

Additional info:
Building Lucene from SVN 2005-04-19."
0,"JCR2SPI: Remove validation check for same-named Node and PropertyJSR 170 disallowed a parent node to have a property and a child node with the same name.

This limitation has been removed with JSR 283 and the RI (jackrabbit-core) already removed the check.
I would suggest to change Jcr2Spi accordingly and leave this validation to the underlying SPI impl.

If I'm not mistaken this JSR 170 requirement is asserted in a single place (ItemStateValidator)."
1,"StandardTokenizer splitting all of Korean words into separate charactersStandardTokenizer splits all those Korean words inth separate character tokens. For example, ""?????"" is one Korean word that means ""Hello"", but StandardAnalyzer separates it into five tokens of ""?"", ""?"", ""?"", ""?"", ""?""."
0,"Refactor segmentInfos from IndexReader into its subclassesReferences to segmentInfos in IndexReader cause different kinds of problems
for subclasses of IndexReader, like e. g. MultiReader.

Only subclasses of IndexReader that own the index directory, namely 
SegmentReader and MultiSegmentReader, should have a SegmentInfos object
and be able to access it.

Further information:
http://www.gossamer-threads.com/lists/lucene/java-dev/51808
http://www.gossamer-threads.com/lists/lucene/java-user/52460

A part of the refactoring work was already done in LUCENE-781"
